/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersClubapplication,
    ControllersClubapplicationFromJSON,
    ControllersClubapplicationToJSON,
    ControllersComplaint,
    ControllersComplaintFromJSON,
    ControllersComplaintToJSON,
    ControllersComplainttype,
    ControllersComplainttypeFromJSON,
    ControllersComplainttypeToJSON,
    ControllersRoomuse,
    ControllersRoomuseFromJSON,
    ControllersRoomuseToJSON,
    EntAcademicYear,
    EntAcademicYearFromJSON,
    EntAcademicYearToJSON,
    EntActivities,
    EntActivitiesFromJSON,
    EntActivitiesToJSON,
    EntActivityType,
    EntActivityTypeFromJSON,
    EntActivityTypeToJSON,
    EntClub,
    EntClubFromJSON,
    EntClubToJSON,
    EntClubBranch,
    EntClubBranchFromJSON,
    EntClubBranchToJSON,
    EntClubType,
    EntClubTypeFromJSON,
    EntClubTypeToJSON,
    EntClubappStatus,
    EntClubappStatusFromJSON,
    EntClubappStatusToJSON,
    EntClubapplication,
    EntClubapplicationFromJSON,
    EntClubapplicationToJSON,
    EntComplaint,
    EntComplaintFromJSON,
    EntComplaintToJSON,
    EntComplaintType,
    EntComplaintTypeFromJSON,
    EntComplaintTypeToJSON,
    EntDiscipline,
    EntDisciplineFromJSON,
    EntDisciplineToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderToJSON,
    EntPurpose,
    EntPurposeFromJSON,
    EntPurposeToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
    EntRoomuse,
    EntRoomuseFromJSON,
    EntRoomuseToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
    EntUserStatus,
    EntUserStatusFromJSON,
    EntUserStatusToJSON,
    EntUsertype,
    EntUsertypeFromJSON,
    EntUsertypeToJSON,
    EntYear,
    EntYearFromJSON,
    EntYearToJSON,
} from '../models';

export interface CreateAcademicYearRequest {
    academicYear: EntAcademicYear;
}

export interface CreateActivitiesRequest {
    activities: EntActivities;
}

export interface CreateActivityTypeRequest {
    activityType: EntActivityType;
}

export interface CreateClubRequest {
    club: EntClub;
}

export interface CreateClubapplicationRequest {
    clubapplication: ControllersClubapplication;
}

export interface CreateClubappstatusRequest {
    clubappstatus: EntClubappStatus;
}

export interface CreateClubbranchRequest {
    clubbranch: EntClubBranch;
}

export interface CreateClubtypeRequest {
    clubtype: EntClubType;
}

export interface CreateComplaintRequest {
    complaint: ControllersComplaint;
}

export interface CreateComplainttypeRequest {
    complainttype: ControllersComplainttype;
}

export interface CreateDisciplineRequest {
    discipline: EntDiscipline;
}

export interface CreateGenderRequest {
    gender: EntGender;
}

export interface CreatePurposeRequest {
    purpose: EntPurpose;
}

export interface CreateRoomRequest {
    room: EntRoom;
}

export interface CreateRoomuseRequest {
    roomuse: ControllersRoomuse;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface CreateUserstatusRequest {
    userstatus: EntUserStatus;
}

export interface CreateYearRequest {
    year: EntYear;
}

export interface DeleteAcademicYearRequest {
    id: number;
}

export interface DeleteActivitiesRequest {
    id: number;
}

export interface DeleteActivityTypeRequest {
    id: number;
}

export interface DeleteClubRequest {
    id: number;
}

export interface DeleteClubapplicationRequest {
    id: number;
}

export interface DeleteClubappstatusRequest {
    id: number;
}

export interface DeleteClubbranchRequest {
    id: number;
}

export interface DeleteClubtypeRequest {
    id: number;
}

export interface DeleteComplaintRequest {
    id: number;
}

export interface DeleteComplainttypeRequest {
    id: number;
}

export interface DeleteDisciplineRequest {
    id: number;
}

export interface DeleteGenderRequest {
    id: number;
}

export interface DeletePurposeRequest {
    id: number;
}

export interface DeleteRoomRequest {
    id: number;
}

export interface DeleteRoomuseRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface DeleteUserstatusRequest {
    id: number;
}

export interface DeleteYearRequest {
    id: number;
}

export interface GetAcademicYearRequest {
    id: number;
}

export interface GetActivitiesRequest {
    id: number;
}

export interface GetActivityTypeRequest {
    id: number;
}

export interface GetClubRequest {
    id: number;
}

export interface GetClubapplicationRequest {
    id: number;
    cid?: number;
    sid?: number;
}

export interface GetClubappstatusRequest {
    id: number;
}

export interface GetClubbranchRequest {
    id: number;
}

export interface GetClubtypeRequest {
    id: number;
}

export interface GetComplaintRequest {
    id: number;
    cid?: number;
    tid?: number;
}

export interface GetComplainttypeRequest {
    id: number;
}

export interface GetDisciplineRequest {
    id: number;
}

export interface GetGenderRequest {
    id: number;
}

export interface GetPurposeRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface GetRoomuseRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface GetUserstatusRequest {
    id: number;
}

export interface GetUsertypeRequest {
    id: number;
}

export interface GetYearRequest {
    id: number;
}

export interface ListAcademicYearRequest {
    limit?: number;
    offset?: number;
}

export interface ListActivitiesRequest {
    limit?: number;
    offset?: number;
}

export interface ListActivityTypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListClubRequest {
    limit?: number;
    offset?: number;
}

export interface ListClubapplicationRequest {
    limit?: number;
    offset?: number;
}

export interface ListClubappstatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListClubbranchRequest {
    limit?: number;
    offset?: number;
}

export interface ListClubtypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListComplaintRequest {
    limit?: number;
    offset?: number;
}

export interface ListComplainttypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListDisciplineRequest {
    limit?: number;
    offset?: number;
}

export interface ListGenderRequest {
    limit?: number;
    offset?: number;
}

export interface ListPurposeRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomuseRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserstatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListUsertypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListYearRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateAcademicYearRequest {
    id: number;
    academicYear: EntAcademicYear;
}

export interface UpdateActivitiesRequest {
    id: number;
    activities: EntActivities;
}

export interface UpdateActivityTypeRequest {
    id: number;
    activityType: EntActivityType;
}

export interface UpdateClubRequest {
    id: number;
    club: EntClub;
}

export interface UpdateClubapplicationRequest {
    id: number;
    clubapplication: EntClubapplication;
}

export interface UpdateClubappstatusRequest {
    id: number;
    clubappstatus: EntClubappStatus;
}

export interface UpdateClubbranchRequest {
    id: number;
    clubbranch: EntClubBranch;
}

export interface UpdateClubtypeRequest {
    id: number;
    clubtype: EntClubType;
}

export interface UpdateComplaintRequest {
    id: number;
    complaint: EntComplaint;
}

export interface UpdateComplainttypeRequest {
    id: number;
    complainttype: EntComplaintType;
}

export interface UpdateDisciplineRequest {
    id: number;
    discipline: EntDiscipline;
}

export interface UpdateGenderRequest {
    id: number;
    gender: EntGender;
}

export interface UpdatePurposeRequest {
    id: number;
    purpose: EntPurpose;
}

export interface UpdateRoomRequest {
    id: number;
    room: EntRoom;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

export interface UpdateUserstatusRequest {
    id: number;
    userstatus: EntUserStatus;
}

export interface UpdateUsertypeRequest {
    id: number;
    usertype: EntUsertype;
}

export interface UpdateYearRequest {
    id: number;
    year: EntYear;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create AcademicYear
     * Create AcademicYear
     */
    async createAcademicYearRaw(requestParameters: CreateAcademicYearRequest): Promise<runtime.ApiResponse<EntAcademicYear>> {
        if (requestParameters.academicYear === null || requestParameters.academicYear === undefined) {
            throw new runtime.RequiredError('academicYear','Required parameter requestParameters.academicYear was null or undefined when calling createAcademicYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/AcademicYears`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAcademicYearToJSON(requestParameters.academicYear),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAcademicYearFromJSON(jsonValue));
    }

    /**
     * Create AcademicYear
     * Create AcademicYear
     */
    async createAcademicYear(requestParameters: CreateAcademicYearRequest): Promise<EntAcademicYear> {
        const response = await this.createAcademicYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create activities
     * Create activities
     */
    async createActivitiesRaw(requestParameters: CreateActivitiesRequest): Promise<runtime.ApiResponse<EntActivities>> {
        if (requestParameters.activities === null || requestParameters.activities === undefined) {
            throw new runtime.RequiredError('activities','Required parameter requestParameters.activities was null or undefined when calling createActivities.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/activities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntActivitiesToJSON(requestParameters.activities),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntActivitiesFromJSON(jsonValue));
    }

    /**
     * Create activities
     * Create activities
     */
    async createActivities(requestParameters: CreateActivitiesRequest): Promise<EntActivities> {
        const response = await this.createActivitiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create ActivityType
     * Create ActivityType
     */
    async createActivityTypeRaw(requestParameters: CreateActivityTypeRequest): Promise<runtime.ApiResponse<EntActivityType>> {
        if (requestParameters.activityType === null || requestParameters.activityType === undefined) {
            throw new runtime.RequiredError('activityType','Required parameter requestParameters.activityType was null or undefined when calling createActivityType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ActivityTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntActivityTypeToJSON(requestParameters.activityType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntActivityTypeFromJSON(jsonValue));
    }

    /**
     * Create ActivityType
     * Create ActivityType
     */
    async createActivityType(requestParameters: CreateActivityTypeRequest): Promise<EntActivityType> {
        const response = await this.createActivityTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create club
     * Create club
     */
    async createClubRaw(requestParameters: CreateClubRequest): Promise<runtime.ApiResponse<EntClub>> {
        if (requestParameters.club === null || requestParameters.club === undefined) {
            throw new runtime.RequiredError('club','Required parameter requestParameters.club was null or undefined when calling createClub.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/club`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubToJSON(requestParameters.club),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubFromJSON(jsonValue));
    }

    /**
     * Create club
     * Create club
     */
    async createClub(requestParameters: CreateClubRequest): Promise<EntClub> {
        const response = await this.createClubRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create clubapplication
     * Create clubapplication
     */
    async createClubapplicationRaw(requestParameters: CreateClubapplicationRequest): Promise<runtime.ApiResponse<EntClubapplication>> {
        if (requestParameters.clubapplication === null || requestParameters.clubapplication === undefined) {
            throw new runtime.RequiredError('clubapplication','Required parameter requestParameters.clubapplication was null or undefined when calling createClubapplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clubapplications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersClubapplicationToJSON(requestParameters.clubapplication),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubapplicationFromJSON(jsonValue));
    }

    /**
     * Create clubapplication
     * Create clubapplication
     */
    async createClubapplication(requestParameters: CreateClubapplicationRequest): Promise<EntClubapplication> {
        const response = await this.createClubapplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create clubappstatus
     * Create clubappstatus
     */
    async createClubappstatusRaw(requestParameters: CreateClubappstatusRequest): Promise<runtime.ApiResponse<EntClubappStatus>> {
        if (requestParameters.clubappstatus === null || requestParameters.clubappstatus === undefined) {
            throw new runtime.RequiredError('clubappstatus','Required parameter requestParameters.clubappstatus was null or undefined when calling createClubappstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clubappstatuss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubappStatusToJSON(requestParameters.clubappstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubappStatusFromJSON(jsonValue));
    }

    /**
     * Create clubappstatus
     * Create clubappstatus
     */
    async createClubappstatus(requestParameters: CreateClubappstatusRequest): Promise<EntClubappStatus> {
        const response = await this.createClubappstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create clubbranch
     * Create ClubBranch
     */
    async createClubbranchRaw(requestParameters: CreateClubbranchRequest): Promise<runtime.ApiResponse<EntClubBranch>> {
        if (requestParameters.clubbranch === null || requestParameters.clubbranch === undefined) {
            throw new runtime.RequiredError('clubbranch','Required parameter requestParameters.clubbranch was null or undefined when calling createClubbranch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clubbranch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubBranchToJSON(requestParameters.clubbranch),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubBranchFromJSON(jsonValue));
    }

    /**
     * Create clubbranch
     * Create ClubBranch
     */
    async createClubbranch(requestParameters: CreateClubbranchRequest): Promise<EntClubBranch> {
        const response = await this.createClubbranchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create clubtype
     * Create ClubType
     */
    async createClubtypeRaw(requestParameters: CreateClubtypeRequest): Promise<runtime.ApiResponse<EntClubType>> {
        if (requestParameters.clubtype === null || requestParameters.clubtype === undefined) {
            throw new runtime.RequiredError('clubtype','Required parameter requestParameters.clubtype was null or undefined when calling createClubtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clubtype`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubTypeToJSON(requestParameters.clubtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubTypeFromJSON(jsonValue));
    }

    /**
     * Create clubtype
     * Create ClubType
     */
    async createClubtype(requestParameters: CreateClubtypeRequest): Promise<EntClubType> {
        const response = await this.createClubtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create complaint
     * Create complaint
     */
    async createComplaintRaw(requestParameters: CreateComplaintRequest): Promise<runtime.ApiResponse<EntComplaint>> {
        if (requestParameters.complaint === null || requestParameters.complaint === undefined) {
            throw new runtime.RequiredError('complaint','Required parameter requestParameters.complaint was null or undefined when calling createComplaint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/complaints`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersComplaintToJSON(requestParameters.complaint),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntComplaintFromJSON(jsonValue));
    }

    /**
     * Create complaint
     * Create complaint
     */
    async createComplaint(requestParameters: CreateComplaintRequest): Promise<EntComplaint> {
        const response = await this.createComplaintRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create complainttype
     * Create complainttype
     */
    async createComplainttypeRaw(requestParameters: CreateComplainttypeRequest): Promise<runtime.ApiResponse<EntComplaintType>> {
        if (requestParameters.complainttype === null || requestParameters.complainttype === undefined) {
            throw new runtime.RequiredError('complainttype','Required parameter requestParameters.complainttype was null or undefined when calling createComplainttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/complainttypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersComplainttypeToJSON(requestParameters.complainttype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntComplaintTypeFromJSON(jsonValue));
    }

    /**
     * Create complainttype
     * Create complainttype
     */
    async createComplainttype(requestParameters: CreateComplainttypeRequest): Promise<EntComplaintType> {
        const response = await this.createComplainttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create discipline
     * Create discipline
     */
    async createDisciplineRaw(requestParameters: CreateDisciplineRequest): Promise<runtime.ApiResponse<EntDiscipline>> {
        if (requestParameters.discipline === null || requestParameters.discipline === undefined) {
            throw new runtime.RequiredError('discipline','Required parameter requestParameters.discipline was null or undefined when calling createDiscipline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/disciplines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDisciplineToJSON(requestParameters.discipline),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDisciplineFromJSON(jsonValue));
    }

    /**
     * Create discipline
     * Create discipline
     */
    async createDiscipline(requestParameters: CreateDisciplineRequest): Promise<EntDiscipline> {
        const response = await this.createDisciplineRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create gender
     * Create gender
     */
    async createGenderRaw(requestParameters: CreateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling createGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * Create gender
     * Create gender
     */
    async createGender(requestParameters: CreateGenderRequest): Promise<EntGender> {
        const response = await this.createGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create purpose
     * Create purpose
     */
    async createPurposeRaw(requestParameters: CreatePurposeRequest): Promise<runtime.ApiResponse<EntPurpose>> {
        if (requestParameters.purpose === null || requestParameters.purpose === undefined) {
            throw new runtime.RequiredError('purpose','Required parameter requestParameters.purpose was null or undefined when calling createPurpose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/purposes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPurposeToJSON(requestParameters.purpose),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPurposeFromJSON(jsonValue));
    }

    /**
     * Create purpose
     * Create purpose
     */
    async createPurpose(requestParameters: CreatePurposeRequest): Promise<EntPurpose> {
        const response = await this.createPurposeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create room
     * Create room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create room
     * Create room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roomuse
     * Create roomuse
     */
    async createRoomuseRaw(requestParameters: CreateRoomuseRequest): Promise<runtime.ApiResponse<EntRoomuse>> {
        if (requestParameters.roomuse === null || requestParameters.roomuse === undefined) {
            throw new runtime.RequiredError('roomuse','Required parameter requestParameters.roomuse was null or undefined when calling createRoomuse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomuses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRoomuseToJSON(requestParameters.roomuse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomuseFromJSON(jsonValue));
    }

    /**
     * Create roomuse
     * Create roomuse
     */
    async createRoomuse(requestParameters: CreateRoomuseRequest): Promise<EntRoomuse> {
        const response = await this.createRoomuseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create userstatus
     * Create userstatus
     */
    async createUserstatusRaw(requestParameters: CreateUserstatusRequest): Promise<runtime.ApiResponse<EntUserStatus>> {
        if (requestParameters.userstatus === null || requestParameters.userstatus === undefined) {
            throw new runtime.RequiredError('userstatus','Required parameter requestParameters.userstatus was null or undefined when calling createUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/userstatuss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserStatusToJSON(requestParameters.userstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserStatusFromJSON(jsonValue));
    }

    /**
     * Create userstatus
     * Create userstatus
     */
    async createUserstatus(requestParameters: CreateUserstatusRequest): Promise<EntUserStatus> {
        const response = await this.createUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create usertype
     * Create usertype
     */
    async createUsertypeRaw(): Promise<runtime.ApiResponse<EntUsertype>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/usertypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUsertypeFromJSON(jsonValue));
    }

    /**
     * Create usertype
     * Create usertype
     */
    async createUsertype(): Promise<EntUsertype> {
        const response = await this.createUsertypeRaw();
        return await response.value();
    }

    /**
     * Create year
     * Create year
     */
    async createYearRaw(requestParameters: CreateYearRequest): Promise<runtime.ApiResponse<EntYear>> {
        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling createYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/years`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntYearToJSON(requestParameters.year),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntYearFromJSON(jsonValue));
    }

    /**
     * Create year
     * Create year
     */
    async createYear(requestParameters: CreateYearRequest): Promise<EntYear> {
        const response = await this.createYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * get AcademicYear by ID
     * Delete a AcademicYear entity by ID
     */
    async deleteAcademicYearRaw(requestParameters: DeleteAcademicYearRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAcademicYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/AcademicYears/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get AcademicYear by ID
     * Delete a AcademicYear entity by ID
     */
    async deleteAcademicYear(requestParameters: DeleteAcademicYearRequest): Promise<object> {
        const response = await this.deleteAcademicYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * get activities by ID
     * Delete a activities entity by ID
     */
    async deleteActivitiesRaw(requestParameters: DeleteActivitiesRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteActivities.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get activities by ID
     * Delete a activities entity by ID
     */
    async deleteActivities(requestParameters: DeleteActivitiesRequest): Promise<object> {
        const response = await this.deleteActivitiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get ActivityType by ID
     * Delete a ActivityType entity by ID
     */
    async deleteActivityTypeRaw(requestParameters: DeleteActivityTypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteActivityType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ActivityTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get ActivityType by ID
     * Delete a ActivityType entity by ID
     */
    async deleteActivityType(requestParameters: DeleteActivityTypeRequest): Promise<object> {
        const response = await this.deleteActivityTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get club by ID
     * Delete a club entity by ID
     */
    async deleteClubRaw(requestParameters: DeleteClubRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteClub.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/club/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get club by ID
     * Delete a club entity by ID
     */
    async deleteClub(requestParameters: DeleteClubRequest): Promise<object> {
        const response = await this.deleteClubRaw(requestParameters);
        return await response.value();
    }

    /**
     * get clubapplication by ID
     * Delete a clubapplication entity by ID
     */
    async deleteClubapplicationRaw(requestParameters: DeleteClubapplicationRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteClubapplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubapplications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get clubapplication by ID
     * Delete a clubapplication entity by ID
     */
    async deleteClubapplication(requestParameters: DeleteClubapplicationRequest): Promise<object> {
        const response = await this.deleteClubapplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get clubappstatus by ID
     * Delete a clubappstatus entity by ID
     */
    async deleteClubappstatusRaw(requestParameters: DeleteClubappstatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteClubappstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubappstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get clubappstatus by ID
     * Delete a clubappstatus entity by ID
     */
    async deleteClubappstatus(requestParameters: DeleteClubappstatusRequest): Promise<object> {
        const response = await this.deleteClubappstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get clubbranch by ID
     * Delete a clubbranch entity by ID
     */
    async deleteClubbranchRaw(requestParameters: DeleteClubbranchRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteClubbranch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubbranch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get clubbranch by ID
     * Delete a clubbranch entity by ID
     */
    async deleteClubbranch(requestParameters: DeleteClubbranchRequest): Promise<object> {
        const response = await this.deleteClubbranchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get clubtype by ID
     * Delete a clubtype entity by ID
     */
    async deleteClubtypeRaw(requestParameters: DeleteClubtypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteClubtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubtype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get clubtype by ID
     * Delete a clubtype entity by ID
     */
    async deleteClubtype(requestParameters: DeleteClubtypeRequest): Promise<object> {
        const response = await this.deleteClubtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get complaint by ID
     * Delete a complaint entity by ID
     */
    async deleteComplaintRaw(requestParameters: DeleteComplaintRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteComplaint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/complaints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get complaint by ID
     * Delete a complaint entity by ID
     */
    async deleteComplaint(requestParameters: DeleteComplaintRequest): Promise<object> {
        const response = await this.deleteComplaintRaw(requestParameters);
        return await response.value();
    }

    /**
     * get complainttype by ID
     * Delete a complainttype entity by ID
     */
    async deleteComplainttypeRaw(requestParameters: DeleteComplainttypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteComplainttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/complainttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get complainttype by ID
     * Delete a complainttype entity by ID
     */
    async deleteComplainttype(requestParameters: DeleteComplainttypeRequest): Promise<object> {
        const response = await this.deleteComplainttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get discipline by ID
     * Delete a discipline entity by ID
     */
    async deleteDisciplineRaw(requestParameters: DeleteDisciplineRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDiscipline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/disciplines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get discipline by ID
     * Delete a discipline entity by ID
     */
    async deleteDiscipline(requestParameters: DeleteDisciplineRequest): Promise<object> {
        const response = await this.deleteDisciplineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGenderRaw(requestParameters: DeleteGenderRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGender(requestParameters: DeleteGenderRequest): Promise<object> {
        const response = await this.deleteGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get purpose by ID
     * Delete a purpose entity by ID
     */
    async deletePurposeRaw(requestParameters: DeletePurposeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePurpose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/purposes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get purpose by ID
     * Delete a purpose entity by ID
     */
    async deletePurpose(requestParameters: DeletePurposeRequest): Promise<object> {
        const response = await this.deletePurposeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Delete a room entity by ID
     */
    async deleteRoomRaw(requestParameters: DeleteRoomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get room by ID
     * Delete a room entity by ID
     */
    async deleteRoom(requestParameters: DeleteRoomRequest): Promise<object> {
        const response = await this.deleteRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomuse by ID
     * Delete a roomuse entity by ID
     */
    async deleteRoomuseRaw(requestParameters: DeleteRoomuseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoomuse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomuses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get roomuse by ID
     * Delete a roomuse entity by ID
     */
    async deleteRoomuse(requestParameters: DeleteRoomuseRequest): Promise<object> {
        const response = await this.deleteRoomuseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get userstatus by ID
     * Delete a userstatus entity by ID
     */
    async deleteUserstatusRaw(requestParameters: DeleteUserstatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get userstatus by ID
     * Delete a userstatus entity by ID
     */
    async deleteUserstatus(requestParameters: DeleteUserstatusRequest): Promise<object> {
        const response = await this.deleteUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get year by ID
     * Delete a year entity by ID
     */
    async deleteYearRaw(requestParameters: DeleteYearRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/years/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get year by ID
     * Delete a year entity by ID
     */
    async deleteYear(requestParameters: DeleteYearRequest): Promise<object> {
        const response = await this.deleteYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * get AcademicYear by ID
     * Get a AcademicYear entity by ID
     */
    async getAcademicYearRaw(requestParameters: GetAcademicYearRequest): Promise<runtime.ApiResponse<EntAcademicYear>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAcademicYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/AcademicYears/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAcademicYearFromJSON(jsonValue));
    }

    /**
     * get AcademicYear by ID
     * Get a AcademicYear entity by ID
     */
    async getAcademicYear(requestParameters: GetAcademicYearRequest): Promise<EntAcademicYear> {
        const response = await this.getAcademicYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * get activities by ID
     * Get a activities entity by ID
     */
    async getActivitiesRaw(requestParameters: GetActivitiesRequest): Promise<runtime.ApiResponse<Array<EntActivities>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getActivities.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntActivitiesFromJSON));
    }

    /**
     * get activities by ID
     * Get a activities entity by ID
     */
    async getActivities(requestParameters: GetActivitiesRequest): Promise<Array<EntActivities>> {
        const response = await this.getActivitiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * get ActivityType by ID
     * Get a ActivityType entity by ID
     */
    async getActivityTypeRaw(requestParameters: GetActivityTypeRequest): Promise<runtime.ApiResponse<EntActivityType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getActivityType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ActivityTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntActivityTypeFromJSON(jsonValue));
    }

    /**
     * get ActivityType by ID
     * Get a ActivityType entity by ID
     */
    async getActivityType(requestParameters: GetActivityTypeRequest): Promise<EntActivityType> {
        const response = await this.getActivityTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get club by ID
     * Get a club entity by ID
     */
    async getClubRaw(requestParameters: GetClubRequest): Promise<runtime.ApiResponse<Array<EntClub>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClub.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/club/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClubFromJSON));
    }

    /**
     * get club by ID
     * Get a club entity by ID
     */
    async getClub(requestParameters: GetClubRequest): Promise<Array<EntClub>> {
        const response = await this.getClubRaw(requestParameters);
        return await response.value();
    }

    /**
     * get clubapplication by ID
     * Get a clubapplication entity by ID
     */
    async getClubapplicationRaw(requestParameters: GetClubapplicationRequest): Promise<runtime.ApiResponse<Array<EntClubapplication>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClubapplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.cid !== undefined) {
            queryParameters['cid'] = requestParameters.cid;
        }

        if (requestParameters.sid !== undefined) {
            queryParameters['sid'] = requestParameters.sid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubapplications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClubapplicationFromJSON));
    }

    /**
     * get clubapplication by ID
     * Get a clubapplication entity by ID
     */
    async getClubapplication(requestParameters: GetClubapplicationRequest): Promise<Array<EntClubapplication>> {
        const response = await this.getClubapplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get clubappstatus by ID
     * Get a clubappstatus entity by ID
     */
    async getClubappstatusRaw(requestParameters: GetClubappstatusRequest): Promise<runtime.ApiResponse<EntClubappStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClubappstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubappstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubappStatusFromJSON(jsonValue));
    }

    /**
     * get clubappstatus by ID
     * Get a clubappstatus entity by ID
     */
    async getClubappstatus(requestParameters: GetClubappstatusRequest): Promise<EntClubappStatus> {
        const response = await this.getClubappstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get clubbranch by ID
     * Get a clubbranch entity by ID
     */
    async getClubbranchRaw(requestParameters: GetClubbranchRequest): Promise<runtime.ApiResponse<EntClubBranch>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClubbranch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubbranch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubBranchFromJSON(jsonValue));
    }

    /**
     * get clubbranch by ID
     * Get a clubbranch entity by ID
     */
    async getClubbranch(requestParameters: GetClubbranchRequest): Promise<EntClubBranch> {
        const response = await this.getClubbranchRaw(requestParameters);
        return await response.value();
    }

    /**
     * get clubtype by ID
     * Get a clubtype entity by ID
     */
    async getClubtypeRaw(requestParameters: GetClubtypeRequest): Promise<runtime.ApiResponse<EntClubType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClubtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubtype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubTypeFromJSON(jsonValue));
    }

    /**
     * get clubtype by ID
     * Get a clubtype entity by ID
     */
    async getClubtype(requestParameters: GetClubtypeRequest): Promise<EntClubType> {
        const response = await this.getClubtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get complaint by ID
     * Get a complaint entity by ID
     */
    async getComplaintRaw(requestParameters: GetComplaintRequest): Promise<runtime.ApiResponse<Array<EntComplaint>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getComplaint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.cid !== undefined) {
            queryParameters['cid'] = requestParameters.cid;
        }

        if (requestParameters.tid !== undefined) {
            queryParameters['tid'] = requestParameters.tid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/complaints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntComplaintFromJSON));
    }

    /**
     * get complaint by ID
     * Get a complaint entity by ID
     */
    async getComplaint(requestParameters: GetComplaintRequest): Promise<Array<EntComplaint>> {
        const response = await this.getComplaintRaw(requestParameters);
        return await response.value();
    }

    /**
     * get complainttype by ID
     * Get a complainttype entity by ID
     */
    async getComplainttypeRaw(requestParameters: GetComplainttypeRequest): Promise<runtime.ApiResponse<EntComplaintType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getComplainttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/complainttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntComplaintTypeFromJSON(jsonValue));
    }

    /**
     * get complainttype by ID
     * Get a complainttype entity by ID
     */
    async getComplainttype(requestParameters: GetComplainttypeRequest): Promise<EntComplaintType> {
        const response = await this.getComplainttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get discipline by ID
     * Get a discipline entity by ID
     */
    async getDisciplineRaw(requestParameters: GetDisciplineRequest): Promise<runtime.ApiResponse<EntDiscipline>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDiscipline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/disciplines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDisciplineFromJSON(jsonValue));
    }

    /**
     * get discipline by ID
     * Get a discipline entity by ID
     */
    async getDiscipline(requestParameters: GetDisciplineRequest): Promise<EntDiscipline> {
        const response = await this.getDisciplineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGenderRaw(requestParameters: GetGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGender(requestParameters: GetGenderRequest): Promise<EntGender> {
        const response = await this.getGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get purpose by ID
     * Get a purpose entity by ID
     */
    async getPurposeRaw(requestParameters: GetPurposeRequest): Promise<runtime.ApiResponse<EntPurpose>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPurpose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/purposes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPurposeFromJSON(jsonValue));
    }

    /**
     * get purpose by ID
     * Get a purpose entity by ID
     */
    async getPurpose(requestParameters: GetPurposeRequest): Promise<EntPurpose> {
        const response = await this.getPurposeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomuse by ID
     * Get a roomuse entity by ID
     */
    async getRoomuseRaw(requestParameters: GetRoomuseRequest): Promise<runtime.ApiResponse<Array<EntRoomuse>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomuse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomuses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomuseFromJSON));
    }

    /**
     * get roomuse by ID
     * Get a roomuse entity by ID
     */
    async getRoomuse(requestParameters: GetRoomuseRequest): Promise<Array<EntRoomuse>> {
        const response = await this.getRoomuseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get userstatus by ID
     * Get a userstatus entity by ID
     */
    async getUserstatusRaw(requestParameters: GetUserstatusRequest): Promise<runtime.ApiResponse<EntUserStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserStatusFromJSON(jsonValue));
    }

    /**
     * get userstatus by ID
     * Get a userstatus entity by ID
     */
    async getUserstatus(requestParameters: GetUserstatusRequest): Promise<EntUserStatus> {
        const response = await this.getUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get usertype by ID
     * Get a usertype entity by ID
     */
    async getUsertypeRaw(requestParameters: GetUsertypeRequest): Promise<runtime.ApiResponse<EntUsertype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUsertype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/usertypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUsertypeFromJSON(jsonValue));
    }

    /**
     * get usertype by ID
     * Get a usertype entity by ID
     */
    async getUsertype(requestParameters: GetUsertypeRequest): Promise<EntUsertype> {
        const response = await this.getUsertypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get year by ID
     * Get a year entity by ID
     */
    async getYearRaw(requestParameters: GetYearRequest): Promise<runtime.ApiResponse<EntYear>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/years/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntYearFromJSON(jsonValue));
    }

    /**
     * get year by ID
     * Get a year entity by ID
     */
    async getYear(requestParameters: GetYearRequest): Promise<EntYear> {
        const response = await this.getYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * list AcademicYear entities
     * List AcademicYear entities
     */
    async listAcademicYearRaw(requestParameters: ListAcademicYearRequest): Promise<runtime.ApiResponse<Array<EntAcademicYear>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/AcademicYears`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAcademicYearFromJSON));
    }

    /**
     * list AcademicYear entities
     * List AcademicYear entities
     */
    async listAcademicYear(requestParameters: ListAcademicYearRequest): Promise<Array<EntAcademicYear>> {
        const response = await this.listAcademicYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * list activities entities
     * List activities entities
     */
    async listActivitiesRaw(requestParameters: ListActivitiesRequest): Promise<runtime.ApiResponse<Array<EntActivities>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntActivitiesFromJSON));
    }

    /**
     * list activities entities
     * List activities entities
     */
    async listActivities(requestParameters: ListActivitiesRequest): Promise<Array<EntActivities>> {
        const response = await this.listActivitiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * list ActivityType entities
     * List ActivityType entities
     */
    async listActivityTypeRaw(requestParameters: ListActivityTypeRequest): Promise<runtime.ApiResponse<Array<EntActivityType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ActivityTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntActivityTypeFromJSON));
    }

    /**
     * list ActivityType entities
     * List ActivityType entities
     */
    async listActivityType(requestParameters: ListActivityTypeRequest): Promise<Array<EntActivityType>> {
        const response = await this.listActivityTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list club entities
     * List club entities
     */
    async listClubRaw(requestParameters: ListClubRequest): Promise<runtime.ApiResponse<Array<EntClub>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/club`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClubFromJSON));
    }

    /**
     * list club entities
     * List club entities
     */
    async listClub(requestParameters: ListClubRequest): Promise<Array<EntClub>> {
        const response = await this.listClubRaw(requestParameters);
        return await response.value();
    }

    /**
     * list clubapplication entities
     * List clubapplication entities
     */
    async listClubapplicationRaw(requestParameters: ListClubapplicationRequest): Promise<runtime.ApiResponse<Array<EntClubapplication>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubapplications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClubapplicationFromJSON));
    }

    /**
     * list clubapplication entities
     * List clubapplication entities
     */
    async listClubapplication(requestParameters: ListClubapplicationRequest): Promise<Array<EntClubapplication>> {
        const response = await this.listClubapplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * list clubappstatus entities
     * List clubappstatus entities
     */
    async listClubappstatusRaw(requestParameters: ListClubappstatusRequest): Promise<runtime.ApiResponse<Array<EntClubappStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubappstatuss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClubappStatusFromJSON));
    }

    /**
     * list clubappstatus entities
     * List clubappstatus entities
     */
    async listClubappstatus(requestParameters: ListClubappstatusRequest): Promise<Array<EntClubappStatus>> {
        const response = await this.listClubappstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list clubbranch entities
     * List clubbranch entities
     */
    async listClubbranchRaw(requestParameters: ListClubbranchRequest): Promise<runtime.ApiResponse<Array<EntClubBranch>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubbranch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClubBranchFromJSON));
    }

    /**
     * list clubbranch entities
     * List clubbranch entities
     */
    async listClubbranch(requestParameters: ListClubbranchRequest): Promise<Array<EntClubBranch>> {
        const response = await this.listClubbranchRaw(requestParameters);
        return await response.value();
    }

    /**
     * list clubtype entities
     * List clubtype entities
     */
    async listClubtypeRaw(requestParameters: ListClubtypeRequest): Promise<runtime.ApiResponse<Array<EntClubType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clubtype`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClubTypeFromJSON));
    }

    /**
     * list clubtype entities
     * List clubtype entities
     */
    async listClubtype(requestParameters: ListClubtypeRequest): Promise<Array<EntClubType>> {
        const response = await this.listClubtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list complaint entities
     * List complaint entities
     */
    async listComplaintRaw(requestParameters: ListComplaintRequest): Promise<runtime.ApiResponse<Array<EntComplaint>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/complaints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntComplaintFromJSON));
    }

    /**
     * list complaint entities
     * List complaint entities
     */
    async listComplaint(requestParameters: ListComplaintRequest): Promise<Array<EntComplaint>> {
        const response = await this.listComplaintRaw(requestParameters);
        return await response.value();
    }

    /**
     * list complainttype entities
     * List complainttype entities
     */
    async listComplainttypeRaw(requestParameters: ListComplainttypeRequest): Promise<runtime.ApiResponse<Array<EntComplaintType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/complainttypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntComplaintTypeFromJSON));
    }

    /**
     * list complainttype entities
     * List complainttype entities
     */
    async listComplainttype(requestParameters: ListComplainttypeRequest): Promise<Array<EntComplaintType>> {
        const response = await this.listComplainttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list discipline entities
     * List discipline entities
     */
    async listDisciplineRaw(requestParameters: ListDisciplineRequest): Promise<runtime.ApiResponse<Array<EntDiscipline>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/disciplines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDisciplineFromJSON));
    }

    /**
     * list discipline entities
     * List discipline entities
     */
    async listDiscipline(requestParameters: ListDisciplineRequest): Promise<Array<EntDiscipline>> {
        const response = await this.listDisciplineRaw(requestParameters);
        return await response.value();
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGenderRaw(requestParameters: ListGenderRequest): Promise<runtime.ApiResponse<Array<EntGender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGenderFromJSON));
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGender(requestParameters: ListGenderRequest): Promise<Array<EntGender>> {
        const response = await this.listGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list purpose entities
     * List purpose entities
     */
    async listPurposeRaw(requestParameters: ListPurposeRequest): Promise<runtime.ApiResponse<Array<EntPurpose>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/purposes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPurposeFromJSON));
    }

    /**
     * list purpose entities
     * List purpose entities
     */
    async listPurpose(requestParameters: ListPurposeRequest): Promise<Array<EntPurpose>> {
        const response = await this.listPurposeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomuse entities
     * List roomuse entities
     */
    async listRoomuseRaw(requestParameters: ListRoomuseRequest): Promise<runtime.ApiResponse<Array<EntRoomuse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomuseFromJSON));
    }

    /**
     * list roomuse entities
     * List roomuse entities
     */
    async listRoomuse(requestParameters: ListRoomuseRequest): Promise<Array<EntRoomuse>> {
        const response = await this.listRoomuseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list userstatus entities
     * List userstatus entities
     */
    async listUserstatusRaw(requestParameters: ListUserstatusRequest): Promise<runtime.ApiResponse<Array<EntUserStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatuss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserStatusFromJSON));
    }

    /**
     * list userstatus entities
     * List userstatus entities
     */
    async listUserstatus(requestParameters: ListUserstatusRequest): Promise<Array<EntUserStatus>> {
        const response = await this.listUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list usertype entities
     * List usertype entities
     */
    async listUsertypeRaw(requestParameters: ListUsertypeRequest): Promise<runtime.ApiResponse<Array<EntUsertype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/usertypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUsertypeFromJSON));
    }

    /**
     * list usertype entities
     * List usertype entities
     */
    async listUsertype(requestParameters: ListUsertypeRequest): Promise<Array<EntUsertype>> {
        const response = await this.listUsertypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list year entities
     * List year entities
     */
    async listYearRaw(requestParameters: ListYearRequest): Promise<runtime.ApiResponse<Array<EntYear>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/years`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntYearFromJSON));
    }

    /**
     * list year entities
     * List year entities
     */
    async listYear(requestParameters: ListYearRequest): Promise<Array<EntYear>> {
        const response = await this.listYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * update AcademicYear by ID
     * Update a AcademicYear entity by ID
     */
    async updateAcademicYearRaw(requestParameters: UpdateAcademicYearRequest): Promise<runtime.ApiResponse<EntAcademicYear>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAcademicYear.');
        }

        if (requestParameters.academicYear === null || requestParameters.academicYear === undefined) {
            throw new runtime.RequiredError('academicYear','Required parameter requestParameters.academicYear was null or undefined when calling updateAcademicYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/AcademicYears/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntAcademicYearToJSON(requestParameters.academicYear),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAcademicYearFromJSON(jsonValue));
    }

    /**
     * update AcademicYear by ID
     * Update a AcademicYear entity by ID
     */
    async updateAcademicYear(requestParameters: UpdateAcademicYearRequest): Promise<EntAcademicYear> {
        const response = await this.updateAcademicYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * update Activities by ID
     * Update a Activities entity by ID
     */
    async updateActivitiesRaw(requestParameters: UpdateActivitiesRequest): Promise<runtime.ApiResponse<EntActivities>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateActivities.');
        }

        if (requestParameters.activities === null || requestParameters.activities === undefined) {
            throw new runtime.RequiredError('activities','Required parameter requestParameters.activities was null or undefined when calling updateActivities.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Activities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntActivitiesToJSON(requestParameters.activities),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntActivitiesFromJSON(jsonValue));
    }

    /**
     * update Activities by ID
     * Update a Activities entity by ID
     */
    async updateActivities(requestParameters: UpdateActivitiesRequest): Promise<EntActivities> {
        const response = await this.updateActivitiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * update ActivityType by ID
     * Update a ActivityType entity by ID
     */
    async updateActivityTypeRaw(requestParameters: UpdateActivityTypeRequest): Promise<runtime.ApiResponse<EntActivityType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateActivityType.');
        }

        if (requestParameters.activityType === null || requestParameters.activityType === undefined) {
            throw new runtime.RequiredError('activityType','Required parameter requestParameters.activityType was null or undefined when calling updateActivityType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ActivityTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntActivityTypeToJSON(requestParameters.activityType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntActivityTypeFromJSON(jsonValue));
    }

    /**
     * update ActivityType by ID
     * Update a ActivityType entity by ID
     */
    async updateActivityType(requestParameters: UpdateActivityTypeRequest): Promise<EntActivityType> {
        const response = await this.updateActivityTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update club by ID
     * Update a club entity by ID
     */
    async updateClubRaw(requestParameters: UpdateClubRequest): Promise<runtime.ApiResponse<EntClub>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateClub.');
        }

        if (requestParameters.club === null || requestParameters.club === undefined) {
            throw new runtime.RequiredError('club','Required parameter requestParameters.club was null or undefined when calling updateClub.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/club/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubToJSON(requestParameters.club),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubFromJSON(jsonValue));
    }

    /**
     * update club by ID
     * Update a club entity by ID
     */
    async updateClub(requestParameters: UpdateClubRequest): Promise<EntClub> {
        const response = await this.updateClubRaw(requestParameters);
        return await response.value();
    }

    /**
     * update clubapplication by ID
     * Update a clubapplication entity by ID
     */
    async updateClubapplicationRaw(requestParameters: UpdateClubapplicationRequest): Promise<runtime.ApiResponse<EntClubapplication>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateClubapplication.');
        }

        if (requestParameters.clubapplication === null || requestParameters.clubapplication === undefined) {
            throw new runtime.RequiredError('clubapplication','Required parameter requestParameters.clubapplication was null or undefined when calling updateClubapplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clubapplications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubapplicationToJSON(requestParameters.clubapplication),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubapplicationFromJSON(jsonValue));
    }

    /**
     * update clubapplication by ID
     * Update a clubapplication entity by ID
     */
    async updateClubapplication(requestParameters: UpdateClubapplicationRequest): Promise<EntClubapplication> {
        const response = await this.updateClubapplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * update clubappstatus by ID
     * Update a clubappstatus entity by ID
     */
    async updateClubappstatusRaw(requestParameters: UpdateClubappstatusRequest): Promise<runtime.ApiResponse<EntClubappStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateClubappstatus.');
        }

        if (requestParameters.clubappstatus === null || requestParameters.clubappstatus === undefined) {
            throw new runtime.RequiredError('clubappstatus','Required parameter requestParameters.clubappstatus was null or undefined when calling updateClubappstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clubappstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubappStatusToJSON(requestParameters.clubappstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubappStatusFromJSON(jsonValue));
    }

    /**
     * update clubappstatus by ID
     * Update a clubappstatus entity by ID
     */
    async updateClubappstatus(requestParameters: UpdateClubappstatusRequest): Promise<EntClubappStatus> {
        const response = await this.updateClubappstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update clubbranch by ID
     * Update a clubbranch entity by ID
     */
    async updateClubbranchRaw(requestParameters: UpdateClubbranchRequest): Promise<runtime.ApiResponse<EntClubBranch>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateClubbranch.');
        }

        if (requestParameters.clubbranch === null || requestParameters.clubbranch === undefined) {
            throw new runtime.RequiredError('clubbranch','Required parameter requestParameters.clubbranch was null or undefined when calling updateClubbranch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clubbranch/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubBranchToJSON(requestParameters.clubbranch),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubBranchFromJSON(jsonValue));
    }

    /**
     * update clubbranch by ID
     * Update a clubbranch entity by ID
     */
    async updateClubbranch(requestParameters: UpdateClubbranchRequest): Promise<EntClubBranch> {
        const response = await this.updateClubbranchRaw(requestParameters);
        return await response.value();
    }

    /**
     * update clubtype by ID
     * Update a clubtype entity by ID
     */
    async updateClubtypeRaw(requestParameters: UpdateClubtypeRequest): Promise<runtime.ApiResponse<EntClubType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateClubtype.');
        }

        if (requestParameters.clubtype === null || requestParameters.clubtype === undefined) {
            throw new runtime.RequiredError('clubtype','Required parameter requestParameters.clubtype was null or undefined when calling updateClubtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/clubtype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntClubTypeToJSON(requestParameters.clubtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClubTypeFromJSON(jsonValue));
    }

    /**
     * update clubtype by ID
     * Update a clubtype entity by ID
     */
    async updateClubtype(requestParameters: UpdateClubtypeRequest): Promise<EntClubType> {
        const response = await this.updateClubtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update complaint by ID
     * Update a complaint entity by ID
     */
    async updateComplaintRaw(requestParameters: UpdateComplaintRequest): Promise<runtime.ApiResponse<EntComplaint>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateComplaint.');
        }

        if (requestParameters.complaint === null || requestParameters.complaint === undefined) {
            throw new runtime.RequiredError('complaint','Required parameter requestParameters.complaint was null or undefined when calling updateComplaint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/complaints/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntComplaintToJSON(requestParameters.complaint),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntComplaintFromJSON(jsonValue));
    }

    /**
     * update complaint by ID
     * Update a complaint entity by ID
     */
    async updateComplaint(requestParameters: UpdateComplaintRequest): Promise<EntComplaint> {
        const response = await this.updateComplaintRaw(requestParameters);
        return await response.value();
    }

    /**
     * update complainttype by ID
     * Update a complainttype entity by ID
     */
    async updateComplainttypeRaw(requestParameters: UpdateComplainttypeRequest): Promise<runtime.ApiResponse<EntComplaintType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateComplainttype.');
        }

        if (requestParameters.complainttype === null || requestParameters.complainttype === undefined) {
            throw new runtime.RequiredError('complainttype','Required parameter requestParameters.complainttype was null or undefined when calling updateComplainttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/complainttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntComplaintTypeToJSON(requestParameters.complainttype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntComplaintTypeFromJSON(jsonValue));
    }

    /**
     * update complainttype by ID
     * Update a complainttype entity by ID
     */
    async updateComplainttype(requestParameters: UpdateComplainttypeRequest): Promise<EntComplaintType> {
        const response = await this.updateComplainttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update discipline by ID
     * Update a discipline entity by ID
     */
    async updateDisciplineRaw(requestParameters: UpdateDisciplineRequest): Promise<runtime.ApiResponse<EntDiscipline>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDiscipline.');
        }

        if (requestParameters.discipline === null || requestParameters.discipline === undefined) {
            throw new runtime.RequiredError('discipline','Required parameter requestParameters.discipline was null or undefined when calling updateDiscipline.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/disciplines/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDisciplineToJSON(requestParameters.discipline),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDisciplineFromJSON(jsonValue));
    }

    /**
     * update discipline by ID
     * Update a discipline entity by ID
     */
    async updateDiscipline(requestParameters: UpdateDisciplineRequest): Promise<EntDiscipline> {
        const response = await this.updateDisciplineRaw(requestParameters);
        return await response.value();
    }

    /**
     * update gender by ID
     * Update a gender entity by ID
     */
    async updateGenderRaw(requestParameters: UpdateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateGender.');
        }

        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling updateGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * update gender by ID
     * Update a gender entity by ID
     */
    async updateGender(requestParameters: UpdateGenderRequest): Promise<EntGender> {
        const response = await this.updateGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * update purpose by ID
     * Update a purpose entity by ID
     */
    async updatePurposeRaw(requestParameters: UpdatePurposeRequest): Promise<runtime.ApiResponse<EntPurpose>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePurpose.');
        }

        if (requestParameters.purpose === null || requestParameters.purpose === undefined) {
            throw new runtime.RequiredError('purpose','Required parameter requestParameters.purpose was null or undefined when calling updatePurpose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/purposes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPurposeToJSON(requestParameters.purpose),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPurposeFromJSON(jsonValue));
    }

    /**
     * update purpose by ID
     * Update a purpose entity by ID
     */
    async updatePurpose(requestParameters: UpdatePurposeRequest): Promise<EntPurpose> {
        const response = await this.updatePurposeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update room by ID
     * Update a room entity by ID
     */
    async updateRoomRaw(requestParameters: UpdateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoom.');
        }

        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling updateRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * update room by ID
     * Update a room entity by ID
     */
    async updateRoom(requestParameters: UpdateRoomRequest): Promise<EntRoom> {
        const response = await this.updateRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update userstatus by ID
     * Update a userstatus entity by ID
     */
    async updateUserstatusRaw(requestParameters: UpdateUserstatusRequest): Promise<runtime.ApiResponse<EntUserStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserstatus.');
        }

        if (requestParameters.userstatus === null || requestParameters.userstatus === undefined) {
            throw new runtime.RequiredError('userstatus','Required parameter requestParameters.userstatus was null or undefined when calling updateUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/userstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserStatusToJSON(requestParameters.userstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserStatusFromJSON(jsonValue));
    }

    /**
     * update userstatus by ID
     * Update a userstatus entity by ID
     */
    async updateUserstatus(requestParameters: UpdateUserstatusRequest): Promise<EntUserStatus> {
        const response = await this.updateUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update usertype by ID
     * Update a usertype entity by ID
     */
    async updateUsertypeRaw(requestParameters: UpdateUsertypeRequest): Promise<runtime.ApiResponse<EntUsertype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUsertype.');
        }

        if (requestParameters.usertype === null || requestParameters.usertype === undefined) {
            throw new runtime.RequiredError('usertype','Required parameter requestParameters.usertype was null or undefined when calling updateUsertype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/usertypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUsertypeToJSON(requestParameters.usertype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUsertypeFromJSON(jsonValue));
    }

    /**
     * update usertype by ID
     * Update a usertype entity by ID
     */
    async updateUsertype(requestParameters: UpdateUsertypeRequest): Promise<EntUsertype> {
        const response = await this.updateUsertypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update year by ID
     * Update a year entity by ID
     */
    async updateYearRaw(requestParameters: UpdateYearRequest): Promise<runtime.ApiResponse<EntYear>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateYear.');
        }

        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling updateYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/years/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntYearToJSON(requestParameters.year),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntYearFromJSON(jsonValue));
    }

    /**
     * update year by ID
     * Update a year entity by ID
     */
    async updateYear(requestParameters: UpdateYearRequest): Promise<EntYear> {
        const response = await this.updateYearRaw(requestParameters);
        return await response.value();
    }

}
