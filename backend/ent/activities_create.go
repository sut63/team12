// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/OMENX/app/ent/academicyear"
	"github.com/OMENX/app/ent/activities"
	"github.com/OMENX/app/ent/activitytype"
	"github.com/OMENX/app/ent/club"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ActivitiesCreate is the builder for creating a Activities entity.
type ActivitiesCreate struct {
	config
	mutation *ActivitiesMutation
	hooks    []Hook
}

// SetName sets the name field.
func (ac *ActivitiesCreate) SetName(s string) *ActivitiesCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetDetail sets the detail field.
func (ac *ActivitiesCreate) SetDetail(s string) *ActivitiesCreate {
	ac.mutation.SetDetail(s)
	return ac
}

// SetStarttime sets the starttime field.
func (ac *ActivitiesCreate) SetStarttime(t time.Time) *ActivitiesCreate {
	ac.mutation.SetStarttime(t)
	return ac
}

// SetEndtime sets the endtime field.
func (ac *ActivitiesCreate) SetEndtime(t time.Time) *ActivitiesCreate {
	ac.mutation.SetEndtime(t)
	return ac
}

// SetActivitytypeID sets the activitytype edge to ActivityType by id.
func (ac *ActivitiesCreate) SetActivitytypeID(id int) *ActivitiesCreate {
	ac.mutation.SetActivitytypeID(id)
	return ac
}

// SetNillableActivitytypeID sets the activitytype edge to ActivityType by id if the given value is not nil.
func (ac *ActivitiesCreate) SetNillableActivitytypeID(id *int) *ActivitiesCreate {
	if id != nil {
		ac = ac.SetActivitytypeID(*id)
	}
	return ac
}

// SetActivitytype sets the activitytype edge to ActivityType.
func (ac *ActivitiesCreate) SetActivitytype(a *ActivityType) *ActivitiesCreate {
	return ac.SetActivitytypeID(a.ID)
}

// SetAcademicyearID sets the academicyear edge to AcademicYear by id.
func (ac *ActivitiesCreate) SetAcademicyearID(id int) *ActivitiesCreate {
	ac.mutation.SetAcademicyearID(id)
	return ac
}

// SetNillableAcademicyearID sets the academicyear edge to AcademicYear by id if the given value is not nil.
func (ac *ActivitiesCreate) SetNillableAcademicyearID(id *int) *ActivitiesCreate {
	if id != nil {
		ac = ac.SetAcademicyearID(*id)
	}
	return ac
}

// SetAcademicyear sets the academicyear edge to AcademicYear.
func (ac *ActivitiesCreate) SetAcademicyear(a *AcademicYear) *ActivitiesCreate {
	return ac.SetAcademicyearID(a.ID)
}

// SetClubID sets the club edge to Club by id.
func (ac *ActivitiesCreate) SetClubID(id int) *ActivitiesCreate {
	ac.mutation.SetClubID(id)
	return ac
}

// SetNillableClubID sets the club edge to Club by id if the given value is not nil.
func (ac *ActivitiesCreate) SetNillableClubID(id *int) *ActivitiesCreate {
	if id != nil {
		ac = ac.SetClubID(*id)
	}
	return ac
}

// SetClub sets the club edge to Club.
func (ac *ActivitiesCreate) SetClub(c *Club) *ActivitiesCreate {
	return ac.SetClubID(c.ID)
}

// Mutation returns the ActivitiesMutation object of the builder.
func (ac *ActivitiesCreate) Mutation() *ActivitiesMutation {
	return ac.mutation
}

// Save creates the Activities in the database.
func (ac *ActivitiesCreate) Save(ctx context.Context) (*Activities, error) {
	if _, ok := ac.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := activities.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := ac.mutation.Detail(); !ok {
		return nil, &ValidationError{Name: "detail", err: errors.New("ent: missing required field \"detail\"")}
	}
	if v, ok := ac.mutation.Detail(); ok {
		if err := activities.DetailValidator(v); err != nil {
			return nil, &ValidationError{Name: "detail", err: fmt.Errorf("ent: validator failed for field \"detail\": %w", err)}
		}
	}
	if _, ok := ac.mutation.Starttime(); !ok {
		return nil, &ValidationError{Name: "starttime", err: errors.New("ent: missing required field \"starttime\"")}
	}
	if _, ok := ac.mutation.Endtime(); !ok {
		return nil, &ValidationError{Name: "endtime", err: errors.New("ent: missing required field \"endtime\"")}
	}
	var (
		err  error
		node *Activities
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivitiesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivitiesCreate) SaveX(ctx context.Context) *Activities {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *ActivitiesCreate) sqlSave(ctx context.Context) (*Activities, error) {
	a, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}

func (ac *ActivitiesCreate) createSpec() (*Activities, *sqlgraph.CreateSpec) {
	var (
		a     = &Activities{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: activities.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activities.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activities.FieldName,
		})
		a.Name = value
	}
	if value, ok := ac.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activities.FieldDetail,
		})
		a.Detail = value
	}
	if value, ok := ac.mutation.Starttime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activities.FieldStarttime,
		})
		a.Starttime = value
	}
	if value, ok := ac.mutation.Endtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activities.FieldEndtime,
		})
		a.Endtime = value
	}
	if nodes := ac.mutation.ActivitytypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.ActivitytypeTable,
			Columns: []string{activities.ActivitytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AcademicyearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.AcademicyearTable,
			Columns: []string{activities.AcademicyearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: academicyear.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.ClubTable,
			Columns: []string{activities.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return a, _spec
}
