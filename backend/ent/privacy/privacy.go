// Code generated by entc, DO NOT EDIT.

package privacy

import (
	"context"
	"errors"
	"fmt"

	"github.com/OMENX/app/ent"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with an allow decision.
	Allow = errors.New("ent/privacy: allow rule")

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with an deny decision.
	Deny = errors.New("ent/privacy: deny rule")

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = errors.New("ent/privacy: skip rule")
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

type decisionCtxKey struct{}

// DecisionContext creates a decision context.
func DecisionContext(parent context.Context, decision error) context.Context {
	if decision == nil || errors.Is(decision, Skip) {
		return parent
	}
	return context.WithValue(parent, decisionCtxKey{}, decision)
}

func decisionFromContext(ctx context.Context) (error, bool) {
	decision, ok := ctx.Value(decisionCtxKey{}).(error)
	if ok && errors.Is(decision, Allow) {
		decision = nil
	}
	return decision, ok
}

type (
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy []QueryRule

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule interface {
		EvalQuery(context.Context, ent.Query) error
	}
)

// EvalQuery evaluates a query against a query policy.
func (policy QueryPolicy) EvalQuery(ctx context.Context, q ent.Query) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalQuery(ctx, q); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

type (
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy []MutationRule

	// MutationRule defines the interface deciding whether a
	// mutation is allowed and optionally modify it.
	MutationRule interface {
		EvalMutation(context.Context, ent.Mutation) error
	}
)

// EvalMutation evaluates a mutation against a mutation policy.
func (policy MutationPolicy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if decision, ok := decisionFromContext(ctx); ok {
		return decision
	}
	for _, rule := range policy {
		switch decision := rule.EvalMutation(ctx, m); {
		case decision == nil || errors.Is(decision, Skip):
		case errors.Is(decision, Allow):
			return nil
		default:
			return decision
		}
	}
	return nil
}

// MutationRuleFunc type is an adapter to allow the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// Policy groups query and mutation policies.
type Policy struct {
	Query    QueryPolicy
	Mutation MutationPolicy
}

// EvalQuery forwards evaluation to query policy.
func (policy Policy) EvalQuery(ctx context.Context, q ent.Query) error {
	return policy.Query.EvalQuery(ctx, q)
}

// EvalMutation forwards evaluation to mutation policy.
func (policy Policy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return policy.Mutation.EvalMutation(ctx, m)
}

// QueryMutationRule is the interface that groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AcademicYearQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AcademicYearQueryRuleFunc func(context.Context, *ent.AcademicYearQuery) error

// EvalQuery return f(ctx, q).
func (f AcademicYearQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AcademicYearQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AcademicYearQuery", q)
}

// The AcademicYearMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AcademicYearMutationRuleFunc func(context.Context, *ent.AcademicYearMutation) error

// EvalMutation calls f(ctx, m).
func (f AcademicYearMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AcademicYearMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AcademicYearMutation", m)
}

// The ActivitiesQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ActivitiesQueryRuleFunc func(context.Context, *ent.ActivitiesQuery) error

// EvalQuery return f(ctx, q).
func (f ActivitiesQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ActivitiesQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ActivitiesQuery", q)
}

// The ActivitiesMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ActivitiesMutationRuleFunc func(context.Context, *ent.ActivitiesMutation) error

// EvalMutation calls f(ctx, m).
func (f ActivitiesMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ActivitiesMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ActivitiesMutation", m)
}

// The ActivityTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ActivityTypeQueryRuleFunc func(context.Context, *ent.ActivityTypeQuery) error

// EvalQuery return f(ctx, q).
func (f ActivityTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ActivityTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ActivityTypeQuery", q)
}

// The ActivityTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ActivityTypeMutationRuleFunc func(context.Context, *ent.ActivityTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f ActivityTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ActivityTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ActivityTypeMutation", m)
}

// The ClubQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ClubQueryRuleFunc func(context.Context, *ent.ClubQuery) error

// EvalQuery return f(ctx, q).
func (f ClubQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ClubQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ClubQuery", q)
}

// The ClubMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ClubMutationRuleFunc func(context.Context, *ent.ClubMutation) error

// EvalMutation calls f(ctx, m).
func (f ClubMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ClubMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ClubMutation", m)
}

// The ClubBranchQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ClubBranchQueryRuleFunc func(context.Context, *ent.ClubBranchQuery) error

// EvalQuery return f(ctx, q).
func (f ClubBranchQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ClubBranchQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ClubBranchQuery", q)
}

// The ClubBranchMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ClubBranchMutationRuleFunc func(context.Context, *ent.ClubBranchMutation) error

// EvalMutation calls f(ctx, m).
func (f ClubBranchMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ClubBranchMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ClubBranchMutation", m)
}

// The ClubTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ClubTypeQueryRuleFunc func(context.Context, *ent.ClubTypeQuery) error

// EvalQuery return f(ctx, q).
func (f ClubTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ClubTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ClubTypeQuery", q)
}

// The ClubTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ClubTypeMutationRuleFunc func(context.Context, *ent.ClubTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f ClubTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ClubTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ClubTypeMutation", m)
}

// The ClubappStatusQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ClubappStatusQueryRuleFunc func(context.Context, *ent.ClubappStatusQuery) error

// EvalQuery return f(ctx, q).
func (f ClubappStatusQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ClubappStatusQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ClubappStatusQuery", q)
}

// The ClubappStatusMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ClubappStatusMutationRuleFunc func(context.Context, *ent.ClubappStatusMutation) error

// EvalMutation calls f(ctx, m).
func (f ClubappStatusMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ClubappStatusMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ClubappStatusMutation", m)
}

// The ClubapplicationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ClubapplicationQueryRuleFunc func(context.Context, *ent.ClubapplicationQuery) error

// EvalQuery return f(ctx, q).
func (f ClubapplicationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ClubapplicationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ClubapplicationQuery", q)
}

// The ClubapplicationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ClubapplicationMutationRuleFunc func(context.Context, *ent.ClubapplicationMutation) error

// EvalMutation calls f(ctx, m).
func (f ClubapplicationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ClubapplicationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ClubapplicationMutation", m)
}

// The ComplaintQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ComplaintQueryRuleFunc func(context.Context, *ent.ComplaintQuery) error

// EvalQuery return f(ctx, q).
func (f ComplaintQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ComplaintQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ComplaintQuery", q)
}

// The ComplaintMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ComplaintMutationRuleFunc func(context.Context, *ent.ComplaintMutation) error

// EvalMutation calls f(ctx, m).
func (f ComplaintMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ComplaintMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ComplaintMutation", m)
}

// The ComplaintTypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ComplaintTypeQueryRuleFunc func(context.Context, *ent.ComplaintTypeQuery) error

// EvalQuery return f(ctx, q).
func (f ComplaintTypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ComplaintTypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ComplaintTypeQuery", q)
}

// The ComplaintTypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ComplaintTypeMutationRuleFunc func(context.Context, *ent.ComplaintTypeMutation) error

// EvalMutation calls f(ctx, m).
func (f ComplaintTypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ComplaintTypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ComplaintTypeMutation", m)
}

// The RoomQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RoomQueryRuleFunc func(context.Context, *ent.RoomQuery) error

// EvalQuery return f(ctx, q).
func (f RoomQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoomQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RoomQuery", q)
}

// The RoomMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RoomMutationRuleFunc func(context.Context, *ent.RoomMutation) error

// EvalMutation calls f(ctx, m).
func (f RoomMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RoomMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RoomMutation", m)
}

// The RoompurposeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RoompurposeQueryRuleFunc func(context.Context, *ent.RoompurposeQuery) error

// EvalQuery return f(ctx, q).
func (f RoompurposeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoompurposeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RoompurposeQuery", q)
}

// The RoompurposeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RoompurposeMutationRuleFunc func(context.Context, *ent.RoompurposeMutation) error

// EvalMutation calls f(ctx, m).
func (f RoompurposeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RoompurposeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RoompurposeMutation", m)
}

// The RoomuseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RoomuseQueryRuleFunc func(context.Context, *ent.RoomuseQuery) error

// EvalQuery return f(ctx, q).
func (f RoomuseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoomuseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RoomuseQuery", q)
}

// The RoomuseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RoomuseMutationRuleFunc func(context.Context, *ent.RoomuseMutation) error

// EvalMutation calls f(ctx, m).
func (f RoomuseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RoomuseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RoomuseMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

// The UsertypeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UsertypeQueryRuleFunc func(context.Context, *ent.UsertypeQuery) error

// EvalQuery return f(ctx, q).
func (f UsertypeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UsertypeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UsertypeQuery", q)
}

// The UsertypeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UsertypeMutationRuleFunc func(context.Context, *ent.UsertypeMutation) error

// EvalMutation calls f(ctx, m).
func (f UsertypeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UsertypeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UsertypeMutation", m)
}
