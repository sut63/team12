// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/OMENX/app/ent/activities"
	"github.com/OMENX/app/ent/club"
	"github.com/OMENX/app/ent/clubapplication"
	"github.com/OMENX/app/ent/clubbranch"
	"github.com/OMENX/app/ent/clubtype"
	"github.com/OMENX/app/ent/complaint"
	"github.com/OMENX/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ClubCreate is the builder for creating a Club entity.
type ClubCreate struct {
	config
	mutation *ClubMutation
	hooks    []Hook
}

// SetName sets the name field.
func (cc *ClubCreate) SetName(s string) *ClubCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetPurpose sets the purpose field.
func (cc *ClubCreate) SetPurpose(s string) *ClubCreate {
	cc.mutation.SetPurpose(s)
	return cc
}

// SetUserID sets the user edge to User by id.
func (cc *ClubCreate) SetUserID(id int) *ClubCreate {
	cc.mutation.SetUserID(id)
	return cc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (cc *ClubCreate) SetNillableUserID(id *int) *ClubCreate {
	if id != nil {
		cc = cc.SetUserID(*id)
	}
	return cc
}

// SetUser sets the user edge to User.
func (cc *ClubCreate) SetUser(u *User) *ClubCreate {
	return cc.SetUserID(u.ID)
}

// SetClubtypeID sets the clubtype edge to ClubType by id.
func (cc *ClubCreate) SetClubtypeID(id int) *ClubCreate {
	cc.mutation.SetClubtypeID(id)
	return cc
}

// SetNillableClubtypeID sets the clubtype edge to ClubType by id if the given value is not nil.
func (cc *ClubCreate) SetNillableClubtypeID(id *int) *ClubCreate {
	if id != nil {
		cc = cc.SetClubtypeID(*id)
	}
	return cc
}

// SetClubtype sets the clubtype edge to ClubType.
func (cc *ClubCreate) SetClubtype(c *ClubType) *ClubCreate {
	return cc.SetClubtypeID(c.ID)
}

// SetClubbranchID sets the clubbranch edge to ClubBranch by id.
func (cc *ClubCreate) SetClubbranchID(id int) *ClubCreate {
	cc.mutation.SetClubbranchID(id)
	return cc
}

// SetNillableClubbranchID sets the clubbranch edge to ClubBranch by id if the given value is not nil.
func (cc *ClubCreate) SetNillableClubbranchID(id *int) *ClubCreate {
	if id != nil {
		cc = cc.SetClubbranchID(*id)
	}
	return cc
}

// SetClubbranch sets the clubbranch edge to ClubBranch.
func (cc *ClubCreate) SetClubbranch(c *ClubBranch) *ClubCreate {
	return cc.SetClubbranchID(c.ID)
}

// AddClubapplicationIDs adds the clubapplication edge to Clubapplication by ids.
func (cc *ClubCreate) AddClubapplicationIDs(ids ...int) *ClubCreate {
	cc.mutation.AddClubapplicationIDs(ids...)
	return cc
}

// AddClubapplication adds the clubapplication edges to Clubapplication.
func (cc *ClubCreate) AddClubapplication(c ...*Clubapplication) *ClubCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClubapplicationIDs(ids...)
}

// AddClubToComplaintIDs adds the ClubToComplaint edge to Complaint by ids.
func (cc *ClubCreate) AddClubToComplaintIDs(ids ...int) *ClubCreate {
	cc.mutation.AddClubToComplaintIDs(ids...)
	return cc
}

// AddClubToComplaint adds the ClubToComplaint edges to Complaint.
func (cc *ClubCreate) AddClubToComplaint(c ...*Complaint) *ClubCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClubToComplaintIDs(ids...)
}

// AddActivityIDs adds the activities edge to Activities by ids.
func (cc *ClubCreate) AddActivityIDs(ids ...int) *ClubCreate {
	cc.mutation.AddActivityIDs(ids...)
	return cc
}

// AddActivities adds the activities edges to Activities.
func (cc *ClubCreate) AddActivities(a ...*Activities) *ClubCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddActivityIDs(ids...)
}

// AddUserclubIDs adds the userclub edge to User by ids.
func (cc *ClubCreate) AddUserclubIDs(ids ...int) *ClubCreate {
	cc.mutation.AddUserclubIDs(ids...)
	return cc
}

// AddUserclub adds the userclub edges to User.
func (cc *ClubCreate) AddUserclub(u ...*User) *ClubCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddUserclubIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cc *ClubCreate) Mutation() *ClubMutation {
	return cc.mutation
}

// Save creates the Club in the database.
func (cc *ClubCreate) Save(ctx context.Context) (*Club, error) {
	if _, ok := cc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := club.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Purpose(); !ok {
		return nil, &ValidationError{Name: "purpose", err: errors.New("ent: missing required field \"purpose\"")}
	}
	if v, ok := cc.mutation.Purpose(); ok {
		if err := club.PurposeValidator(v); err != nil {
			return nil, &ValidationError{Name: "purpose", err: fmt.Errorf("ent: validator failed for field \"purpose\": %w", err)}
		}
	}
	var (
		err  error
		node *Club
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClubCreate) SaveX(ctx context.Context) *Club {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *ClubCreate) sqlSave(ctx context.Context) (*Club, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *ClubCreate) createSpec() (*Club, *sqlgraph.CreateSpec) {
	var (
		c     = &Club{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: club.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldName,
		})
		c.Name = value
	}
	if value, ok := cc.mutation.Purpose(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldPurpose,
		})
		c.Purpose = value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.UserTable,
			Columns: []string{club.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClubtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubtypeTable,
			Columns: []string{club.ClubtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClubbranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubbranchTable,
			Columns: []string{club.ClubbranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubbranch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClubapplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ClubapplicationTable,
			Columns: []string{club.ClubapplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubapplication.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClubToComplaintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ClubToComplaintTable,
			Columns: []string{club.ClubToComplaintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: complaint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ActivitiesTable,
			Columns: []string{club.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.UserclubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.UserclubTable,
			Columns: []string{club.UserclubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
