// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/OMENX/app/ent/club"
	"github.com/OMENX/app/ent/clubbranch"
	"github.com/OMENX/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ClubBranchUpdate is the builder for updating ClubBranch entities.
type ClubBranchUpdate struct {
	config
	hooks      []Hook
	mutation   *ClubBranchMutation
	predicates []predicate.ClubBranch
}

// Where adds a new predicate for the builder.
func (cbu *ClubBranchUpdate) Where(ps ...predicate.ClubBranch) *ClubBranchUpdate {
	cbu.predicates = append(cbu.predicates, ps...)
	return cbu
}

// SetName sets the name field.
func (cbu *ClubBranchUpdate) SetName(s string) *ClubBranchUpdate {
	cbu.mutation.SetName(s)
	return cbu
}

// AddClubIDs adds the club edge to Club by ids.
func (cbu *ClubBranchUpdate) AddClubIDs(ids ...int) *ClubBranchUpdate {
	cbu.mutation.AddClubIDs(ids...)
	return cbu
}

// AddClub adds the club edges to Club.
func (cbu *ClubBranchUpdate) AddClub(c ...*Club) *ClubBranchUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbu.AddClubIDs(ids...)
}

// Mutation returns the ClubBranchMutation object of the builder.
func (cbu *ClubBranchUpdate) Mutation() *ClubBranchMutation {
	return cbu.mutation
}

// RemoveClubIDs removes the club edge to Club by ids.
func (cbu *ClubBranchUpdate) RemoveClubIDs(ids ...int) *ClubBranchUpdate {
	cbu.mutation.RemoveClubIDs(ids...)
	return cbu
}

// RemoveClub removes club edges to Club.
func (cbu *ClubBranchUpdate) RemoveClub(c ...*Club) *ClubBranchUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbu.RemoveClubIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cbu *ClubBranchUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := cbu.mutation.Name(); ok {
		if err := clubbranch.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(cbu.hooks) == 0 {
		affected, err = cbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubBranchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cbu.mutation = mutation
			affected, err = cbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cbu.hooks) - 1; i >= 0; i-- {
			mut = cbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cbu *ClubBranchUpdate) SaveX(ctx context.Context) int {
	affected, err := cbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cbu *ClubBranchUpdate) Exec(ctx context.Context) error {
	_, err := cbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbu *ClubBranchUpdate) ExecX(ctx context.Context) {
	if err := cbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cbu *ClubBranchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   clubbranch.Table,
			Columns: clubbranch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: clubbranch.FieldID,
			},
		},
	}
	if ps := cbu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cbu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubbranch.FieldName,
		})
	}
	if nodes := cbu.mutation.RemovedClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clubbranch.ClubTable,
			Columns: []string{clubbranch.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clubbranch.ClubTable,
			Columns: []string{clubbranch.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clubbranch.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClubBranchUpdateOne is the builder for updating a single ClubBranch entity.
type ClubBranchUpdateOne struct {
	config
	hooks    []Hook
	mutation *ClubBranchMutation
}

// SetName sets the name field.
func (cbuo *ClubBranchUpdateOne) SetName(s string) *ClubBranchUpdateOne {
	cbuo.mutation.SetName(s)
	return cbuo
}

// AddClubIDs adds the club edge to Club by ids.
func (cbuo *ClubBranchUpdateOne) AddClubIDs(ids ...int) *ClubBranchUpdateOne {
	cbuo.mutation.AddClubIDs(ids...)
	return cbuo
}

// AddClub adds the club edges to Club.
func (cbuo *ClubBranchUpdateOne) AddClub(c ...*Club) *ClubBranchUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbuo.AddClubIDs(ids...)
}

// Mutation returns the ClubBranchMutation object of the builder.
func (cbuo *ClubBranchUpdateOne) Mutation() *ClubBranchMutation {
	return cbuo.mutation
}

// RemoveClubIDs removes the club edge to Club by ids.
func (cbuo *ClubBranchUpdateOne) RemoveClubIDs(ids ...int) *ClubBranchUpdateOne {
	cbuo.mutation.RemoveClubIDs(ids...)
	return cbuo
}

// RemoveClub removes club edges to Club.
func (cbuo *ClubBranchUpdateOne) RemoveClub(c ...*Club) *ClubBranchUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cbuo.RemoveClubIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cbuo *ClubBranchUpdateOne) Save(ctx context.Context) (*ClubBranch, error) {
	if v, ok := cbuo.mutation.Name(); ok {
		if err := clubbranch.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}

	var (
		err  error
		node *ClubBranch
	)
	if len(cbuo.hooks) == 0 {
		node, err = cbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubBranchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cbuo.mutation = mutation
			node, err = cbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cbuo.hooks) - 1; i >= 0; i-- {
			mut = cbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cbuo *ClubBranchUpdateOne) SaveX(ctx context.Context) *ClubBranch {
	cb, err := cbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return cb
}

// Exec executes the query on the entity.
func (cbuo *ClubBranchUpdateOne) Exec(ctx context.Context) error {
	_, err := cbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbuo *ClubBranchUpdateOne) ExecX(ctx context.Context) {
	if err := cbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cbuo *ClubBranchUpdateOne) sqlSave(ctx context.Context) (cb *ClubBranch, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   clubbranch.Table,
			Columns: clubbranch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: clubbranch.FieldID,
			},
		},
	}
	id, ok := cbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ClubBranch.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cbuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubbranch.FieldName,
		})
	}
	if nodes := cbuo.mutation.RemovedClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clubbranch.ClubTable,
			Columns: []string{clubbranch.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cbuo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clubbranch.ClubTable,
			Columns: []string{clubbranch.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	cb = &ClubBranch{config: cbuo.config}
	_spec.Assign = cb.assignValues
	_spec.ScanValues = cb.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clubbranch.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return cb, nil
}
