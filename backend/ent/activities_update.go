// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/OMENX/app/ent/academicyear"
	"github.com/OMENX/app/ent/activities"
	"github.com/OMENX/app/ent/activitytype"
	"github.com/OMENX/app/ent/club"
	"github.com/OMENX/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ActivitiesUpdate is the builder for updating Activities entities.
type ActivitiesUpdate struct {
	config
	hooks      []Hook
	mutation   *ActivitiesMutation
	predicates []predicate.Activities
}

// Where adds a new predicate for the builder.
func (au *ActivitiesUpdate) Where(ps ...predicate.Activities) *ActivitiesUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetName sets the name field.
func (au *ActivitiesUpdate) SetName(s string) *ActivitiesUpdate {
	au.mutation.SetName(s)
	return au
}

// SetDetail sets the detail field.
func (au *ActivitiesUpdate) SetDetail(s string) *ActivitiesUpdate {
	au.mutation.SetDetail(s)
	return au
}

// SetLocation sets the location field.
func (au *ActivitiesUpdate) SetLocation(s string) *ActivitiesUpdate {
	au.mutation.SetLocation(s)
	return au
}

// SetStarttime sets the starttime field.
func (au *ActivitiesUpdate) SetStarttime(t time.Time) *ActivitiesUpdate {
	au.mutation.SetStarttime(t)
	return au
}

// SetEndtime sets the endtime field.
func (au *ActivitiesUpdate) SetEndtime(t time.Time) *ActivitiesUpdate {
	au.mutation.SetEndtime(t)
	return au
}

// SetActivitytypeID sets the activitytype edge to ActivityType by id.
func (au *ActivitiesUpdate) SetActivitytypeID(id int) *ActivitiesUpdate {
	au.mutation.SetActivitytypeID(id)
	return au
}

// SetNillableActivitytypeID sets the activitytype edge to ActivityType by id if the given value is not nil.
func (au *ActivitiesUpdate) SetNillableActivitytypeID(id *int) *ActivitiesUpdate {
	if id != nil {
		au = au.SetActivitytypeID(*id)
	}
	return au
}

// SetActivitytype sets the activitytype edge to ActivityType.
func (au *ActivitiesUpdate) SetActivitytype(a *ActivityType) *ActivitiesUpdate {
	return au.SetActivitytypeID(a.ID)
}

// SetAcademicyearID sets the academicyear edge to AcademicYear by id.
func (au *ActivitiesUpdate) SetAcademicyearID(id int) *ActivitiesUpdate {
	au.mutation.SetAcademicyearID(id)
	return au
}

// SetNillableAcademicyearID sets the academicyear edge to AcademicYear by id if the given value is not nil.
func (au *ActivitiesUpdate) SetNillableAcademicyearID(id *int) *ActivitiesUpdate {
	if id != nil {
		au = au.SetAcademicyearID(*id)
	}
	return au
}

// SetAcademicyear sets the academicyear edge to AcademicYear.
func (au *ActivitiesUpdate) SetAcademicyear(a *AcademicYear) *ActivitiesUpdate {
	return au.SetAcademicyearID(a.ID)
}

// SetClubID sets the club edge to Club by id.
func (au *ActivitiesUpdate) SetClubID(id int) *ActivitiesUpdate {
	au.mutation.SetClubID(id)
	return au
}

// SetNillableClubID sets the club edge to Club by id if the given value is not nil.
func (au *ActivitiesUpdate) SetNillableClubID(id *int) *ActivitiesUpdate {
	if id != nil {
		au = au.SetClubID(*id)
	}
	return au
}

// SetClub sets the club edge to Club.
func (au *ActivitiesUpdate) SetClub(c *Club) *ActivitiesUpdate {
	return au.SetClubID(c.ID)
}

// Mutation returns the ActivitiesMutation object of the builder.
func (au *ActivitiesUpdate) Mutation() *ActivitiesMutation {
	return au.mutation
}

// ClearActivitytype clears the activitytype edge to ActivityType.
func (au *ActivitiesUpdate) ClearActivitytype() *ActivitiesUpdate {
	au.mutation.ClearActivitytype()
	return au
}

// ClearAcademicyear clears the academicyear edge to AcademicYear.
func (au *ActivitiesUpdate) ClearAcademicyear() *ActivitiesUpdate {
	au.mutation.ClearAcademicyear()
	return au
}

// ClearClub clears the club edge to Club.
func (au *ActivitiesUpdate) ClearClub() *ActivitiesUpdate {
	au.mutation.ClearClub()
	return au
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *ActivitiesUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := au.mutation.Name(); ok {
		if err := activities.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := au.mutation.Detail(); ok {
		if err := activities.DetailValidator(v); err != nil {
			return 0, &ValidationError{Name: "detail", err: fmt.Errorf("ent: validator failed for field \"detail\": %w", err)}
		}
	}
	if v, ok := au.mutation.Location(); ok {
		if err := activities.LocationValidator(v); err != nil {
			return 0, &ValidationError{Name: "location", err: fmt.Errorf("ent: validator failed for field \"location\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivitiesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivitiesUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivitiesUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivitiesUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ActivitiesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activities.Table,
			Columns: activities.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activities.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activities.FieldName,
		})
	}
	if value, ok := au.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activities.FieldDetail,
		})
	}
	if value, ok := au.mutation.Location(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activities.FieldLocation,
		})
	}
	if value, ok := au.mutation.Starttime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activities.FieldStarttime,
		})
	}
	if value, ok := au.mutation.Endtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activities.FieldEndtime,
		})
	}
	if au.mutation.ActivitytypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.ActivitytypeTable,
			Columns: []string{activities.ActivitytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activitytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActivitytypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.ActivitytypeTable,
			Columns: []string{activities.ActivitytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AcademicyearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.AcademicyearTable,
			Columns: []string{activities.AcademicyearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: academicyear.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AcademicyearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.AcademicyearTable,
			Columns: []string{activities.AcademicyearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: academicyear.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.ClubTable,
			Columns: []string{activities.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.ClubTable,
			Columns: []string{activities.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activities.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActivitiesUpdateOne is the builder for updating a single Activities entity.
type ActivitiesUpdateOne struct {
	config
	hooks    []Hook
	mutation *ActivitiesMutation
}

// SetName sets the name field.
func (auo *ActivitiesUpdateOne) SetName(s string) *ActivitiesUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetDetail sets the detail field.
func (auo *ActivitiesUpdateOne) SetDetail(s string) *ActivitiesUpdateOne {
	auo.mutation.SetDetail(s)
	return auo
}

// SetLocation sets the location field.
func (auo *ActivitiesUpdateOne) SetLocation(s string) *ActivitiesUpdateOne {
	auo.mutation.SetLocation(s)
	return auo
}

// SetStarttime sets the starttime field.
func (auo *ActivitiesUpdateOne) SetStarttime(t time.Time) *ActivitiesUpdateOne {
	auo.mutation.SetStarttime(t)
	return auo
}

// SetEndtime sets the endtime field.
func (auo *ActivitiesUpdateOne) SetEndtime(t time.Time) *ActivitiesUpdateOne {
	auo.mutation.SetEndtime(t)
	return auo
}

// SetActivitytypeID sets the activitytype edge to ActivityType by id.
func (auo *ActivitiesUpdateOne) SetActivitytypeID(id int) *ActivitiesUpdateOne {
	auo.mutation.SetActivitytypeID(id)
	return auo
}

// SetNillableActivitytypeID sets the activitytype edge to ActivityType by id if the given value is not nil.
func (auo *ActivitiesUpdateOne) SetNillableActivitytypeID(id *int) *ActivitiesUpdateOne {
	if id != nil {
		auo = auo.SetActivitytypeID(*id)
	}
	return auo
}

// SetActivitytype sets the activitytype edge to ActivityType.
func (auo *ActivitiesUpdateOne) SetActivitytype(a *ActivityType) *ActivitiesUpdateOne {
	return auo.SetActivitytypeID(a.ID)
}

// SetAcademicyearID sets the academicyear edge to AcademicYear by id.
func (auo *ActivitiesUpdateOne) SetAcademicyearID(id int) *ActivitiesUpdateOne {
	auo.mutation.SetAcademicyearID(id)
	return auo
}

// SetNillableAcademicyearID sets the academicyear edge to AcademicYear by id if the given value is not nil.
func (auo *ActivitiesUpdateOne) SetNillableAcademicyearID(id *int) *ActivitiesUpdateOne {
	if id != nil {
		auo = auo.SetAcademicyearID(*id)
	}
	return auo
}

// SetAcademicyear sets the academicyear edge to AcademicYear.
func (auo *ActivitiesUpdateOne) SetAcademicyear(a *AcademicYear) *ActivitiesUpdateOne {
	return auo.SetAcademicyearID(a.ID)
}

// SetClubID sets the club edge to Club by id.
func (auo *ActivitiesUpdateOne) SetClubID(id int) *ActivitiesUpdateOne {
	auo.mutation.SetClubID(id)
	return auo
}

// SetNillableClubID sets the club edge to Club by id if the given value is not nil.
func (auo *ActivitiesUpdateOne) SetNillableClubID(id *int) *ActivitiesUpdateOne {
	if id != nil {
		auo = auo.SetClubID(*id)
	}
	return auo
}

// SetClub sets the club edge to Club.
func (auo *ActivitiesUpdateOne) SetClub(c *Club) *ActivitiesUpdateOne {
	return auo.SetClubID(c.ID)
}

// Mutation returns the ActivitiesMutation object of the builder.
func (auo *ActivitiesUpdateOne) Mutation() *ActivitiesMutation {
	return auo.mutation
}

// ClearActivitytype clears the activitytype edge to ActivityType.
func (auo *ActivitiesUpdateOne) ClearActivitytype() *ActivitiesUpdateOne {
	auo.mutation.ClearActivitytype()
	return auo
}

// ClearAcademicyear clears the academicyear edge to AcademicYear.
func (auo *ActivitiesUpdateOne) ClearAcademicyear() *ActivitiesUpdateOne {
	auo.mutation.ClearAcademicyear()
	return auo
}

// ClearClub clears the club edge to Club.
func (auo *ActivitiesUpdateOne) ClearClub() *ActivitiesUpdateOne {
	auo.mutation.ClearClub()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *ActivitiesUpdateOne) Save(ctx context.Context) (*Activities, error) {
	if v, ok := auo.mutation.Name(); ok {
		if err := activities.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := auo.mutation.Detail(); ok {
		if err := activities.DetailValidator(v); err != nil {
			return nil, &ValidationError{Name: "detail", err: fmt.Errorf("ent: validator failed for field \"detail\": %w", err)}
		}
	}
	if v, ok := auo.mutation.Location(); ok {
		if err := activities.LocationValidator(v); err != nil {
			return nil, &ValidationError{Name: "location", err: fmt.Errorf("ent: validator failed for field \"location\": %w", err)}
		}
	}

	var (
		err  error
		node *Activities
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivitiesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivitiesUpdateOne) SaveX(ctx context.Context) *Activities {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *ActivitiesUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivitiesUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ActivitiesUpdateOne) sqlSave(ctx context.Context) (a *Activities, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activities.Table,
			Columns: activities.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activities.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Activities.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activities.FieldName,
		})
	}
	if value, ok := auo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activities.FieldDetail,
		})
	}
	if value, ok := auo.mutation.Location(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activities.FieldLocation,
		})
	}
	if value, ok := auo.mutation.Starttime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activities.FieldStarttime,
		})
	}
	if value, ok := auo.mutation.Endtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activities.FieldEndtime,
		})
	}
	if auo.mutation.ActivitytypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.ActivitytypeTable,
			Columns: []string{activities.ActivitytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activitytype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActivitytypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.ActivitytypeTable,
			Columns: []string{activities.ActivitytypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activitytype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AcademicyearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.AcademicyearTable,
			Columns: []string{activities.AcademicyearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: academicyear.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AcademicyearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.AcademicyearTable,
			Columns: []string{activities.AcademicyearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: academicyear.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.ClubTable,
			Columns: []string{activities.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activities.ClubTable,
			Columns: []string{activities.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &Activities{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activities.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
