// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/OMENX/app/ent/roompurpose"
	"github.com/OMENX/app/ent/roomuse"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RoompurposeCreate is the builder for creating a Roompurpose entity.
type RoompurposeCreate struct {
	config
	mutation *RoompurposeMutation
	hooks    []Hook
}

// SetPurpose sets the purpose field.
func (rc *RoompurposeCreate) SetPurpose(s string) *RoompurposeCreate {
	rc.mutation.SetPurpose(s)
	return rc
}

// AddRoompurposeIDs adds the roompurpose edge to Roomuse by ids.
func (rc *RoompurposeCreate) AddRoompurposeIDs(ids ...int) *RoompurposeCreate {
	rc.mutation.AddRoompurposeIDs(ids...)
	return rc
}

// AddRoompurpose adds the roompurpose edges to Roomuse.
func (rc *RoompurposeCreate) AddRoompurpose(r ...*Roomuse) *RoompurposeCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRoompurposeIDs(ids...)
}

// Mutation returns the RoompurposeMutation object of the builder.
func (rc *RoompurposeCreate) Mutation() *RoompurposeMutation {
	return rc.mutation
}

// Save creates the Roompurpose in the database.
func (rc *RoompurposeCreate) Save(ctx context.Context) (*Roompurpose, error) {
	if _, ok := rc.mutation.Purpose(); !ok {
		return nil, &ValidationError{Name: "purpose", err: errors.New("ent: missing required field \"purpose\"")}
	}
	if v, ok := rc.mutation.Purpose(); ok {
		if err := roompurpose.PurposeValidator(v); err != nil {
			return nil, &ValidationError{Name: "purpose", err: fmt.Errorf("ent: validator failed for field \"purpose\": %w", err)}
		}
	}
	var (
		err  error
		node *Roompurpose
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoompurposeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoompurposeCreate) SaveX(ctx context.Context) *Roompurpose {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RoompurposeCreate) sqlSave(ctx context.Context) (*Roompurpose, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RoompurposeCreate) createSpec() (*Roompurpose, *sqlgraph.CreateSpec) {
	var (
		r     = &Roompurpose{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: roompurpose.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roompurpose.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Purpose(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roompurpose.FieldPurpose,
		})
		r.Purpose = value
	}
	if nodes := rc.mutation.RoompurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roompurpose.RoompurposeTable,
			Columns: []string{roompurpose.RoompurposeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomuse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
