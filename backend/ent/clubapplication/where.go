// Code generated by entc, DO NOT EDIT.

package clubapplication

import (
	"time"

	"github.com/OMENX/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Contact applies equality check predicate on the "contact" field. It's identical to ContactEQ.
func Contact(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContact), v))
	})
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// Addeddatetime applies equality check predicate on the "addeddatetime" field. It's identical to AddeddatetimeEQ.
func Addeddatetime(v time.Time) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddeddatetime), v))
	})
}

// Addername applies equality check predicate on the "addername" field. It's identical to AddernameEQ.
func Addername(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddername), v))
	})
}

// Discipline applies equality check predicate on the "discipline" field. It's identical to DisciplineEQ.
func Discipline(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscipline), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// Yaer applies equality check predicate on the "yaer" field. It's identical to YaerEQ.
func Yaer(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYaer), v))
	})
}

// ContactEQ applies the EQ predicate on the "contact" field.
func ContactEQ(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContact), v))
	})
}

// ContactNEQ applies the NEQ predicate on the "contact" field.
func ContactNEQ(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContact), v))
	})
}

// ContactIn applies the In predicate on the "contact" field.
func ContactIn(vs ...string) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContact), v...))
	})
}

// ContactNotIn applies the NotIn predicate on the "contact" field.
func ContactNotIn(vs ...string) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContact), v...))
	})
}

// ContactGT applies the GT predicate on the "contact" field.
func ContactGT(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContact), v))
	})
}

// ContactGTE applies the GTE predicate on the "contact" field.
func ContactGTE(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContact), v))
	})
}

// ContactLT applies the LT predicate on the "contact" field.
func ContactLT(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContact), v))
	})
}

// ContactLTE applies the LTE predicate on the "contact" field.
func ContactLTE(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContact), v))
	})
}

// ContactContains applies the Contains predicate on the "contact" field.
func ContactContains(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContact), v))
	})
}

// ContactHasPrefix applies the HasPrefix predicate on the "contact" field.
func ContactHasPrefix(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContact), v))
	})
}

// ContactHasSuffix applies the HasSuffix predicate on the "contact" field.
func ContactHasSuffix(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContact), v))
	})
}

// ContactEqualFold applies the EqualFold predicate on the "contact" field.
func ContactEqualFold(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContact), v))
	})
}

// ContactContainsFold applies the ContainsFold predicate on the "contact" field.
func ContactContainsFold(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContact), v))
	})
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReason), v))
	})
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReason), v...))
	})
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReason), v...))
	})
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReason), v))
	})
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReason), v))
	})
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReason), v))
	})
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReason), v))
	})
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReason), v))
	})
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReason), v))
	})
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReason), v))
	})
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReason), v))
	})
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReason), v))
	})
}

// AddeddatetimeEQ applies the EQ predicate on the "addeddatetime" field.
func AddeddatetimeEQ(v time.Time) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddeddatetime), v))
	})
}

// AddeddatetimeNEQ applies the NEQ predicate on the "addeddatetime" field.
func AddeddatetimeNEQ(v time.Time) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddeddatetime), v))
	})
}

// AddeddatetimeIn applies the In predicate on the "addeddatetime" field.
func AddeddatetimeIn(vs ...time.Time) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddeddatetime), v...))
	})
}

// AddeddatetimeNotIn applies the NotIn predicate on the "addeddatetime" field.
func AddeddatetimeNotIn(vs ...time.Time) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddeddatetime), v...))
	})
}

// AddeddatetimeGT applies the GT predicate on the "addeddatetime" field.
func AddeddatetimeGT(v time.Time) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddeddatetime), v))
	})
}

// AddeddatetimeGTE applies the GTE predicate on the "addeddatetime" field.
func AddeddatetimeGTE(v time.Time) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddeddatetime), v))
	})
}

// AddeddatetimeLT applies the LT predicate on the "addeddatetime" field.
func AddeddatetimeLT(v time.Time) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddeddatetime), v))
	})
}

// AddeddatetimeLTE applies the LTE predicate on the "addeddatetime" field.
func AddeddatetimeLTE(v time.Time) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddeddatetime), v))
	})
}

// AddernameEQ applies the EQ predicate on the "addername" field.
func AddernameEQ(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddername), v))
	})
}

// AddernameNEQ applies the NEQ predicate on the "addername" field.
func AddernameNEQ(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddername), v))
	})
}

// AddernameIn applies the In predicate on the "addername" field.
func AddernameIn(vs ...string) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddername), v...))
	})
}

// AddernameNotIn applies the NotIn predicate on the "addername" field.
func AddernameNotIn(vs ...string) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddername), v...))
	})
}

// AddernameGT applies the GT predicate on the "addername" field.
func AddernameGT(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddername), v))
	})
}

// AddernameGTE applies the GTE predicate on the "addername" field.
func AddernameGTE(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddername), v))
	})
}

// AddernameLT applies the LT predicate on the "addername" field.
func AddernameLT(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddername), v))
	})
}

// AddernameLTE applies the LTE predicate on the "addername" field.
func AddernameLTE(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddername), v))
	})
}

// AddernameContains applies the Contains predicate on the "addername" field.
func AddernameContains(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddername), v))
	})
}

// AddernameHasPrefix applies the HasPrefix predicate on the "addername" field.
func AddernameHasPrefix(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddername), v))
	})
}

// AddernameHasSuffix applies the HasSuffix predicate on the "addername" field.
func AddernameHasSuffix(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddername), v))
	})
}

// AddernameEqualFold applies the EqualFold predicate on the "addername" field.
func AddernameEqualFold(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddername), v))
	})
}

// AddernameContainsFold applies the ContainsFold predicate on the "addername" field.
func AddernameContainsFold(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddername), v))
	})
}

// DisciplineEQ applies the EQ predicate on the "discipline" field.
func DisciplineEQ(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscipline), v))
	})
}

// DisciplineNEQ applies the NEQ predicate on the "discipline" field.
func DisciplineNEQ(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscipline), v))
	})
}

// DisciplineIn applies the In predicate on the "discipline" field.
func DisciplineIn(vs ...string) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDiscipline), v...))
	})
}

// DisciplineNotIn applies the NotIn predicate on the "discipline" field.
func DisciplineNotIn(vs ...string) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDiscipline), v...))
	})
}

// DisciplineGT applies the GT predicate on the "discipline" field.
func DisciplineGT(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscipline), v))
	})
}

// DisciplineGTE applies the GTE predicate on the "discipline" field.
func DisciplineGTE(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscipline), v))
	})
}

// DisciplineLT applies the LT predicate on the "discipline" field.
func DisciplineLT(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscipline), v))
	})
}

// DisciplineLTE applies the LTE predicate on the "discipline" field.
func DisciplineLTE(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscipline), v))
	})
}

// DisciplineContains applies the Contains predicate on the "discipline" field.
func DisciplineContains(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDiscipline), v))
	})
}

// DisciplineHasPrefix applies the HasPrefix predicate on the "discipline" field.
func DisciplineHasPrefix(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDiscipline), v))
	})
}

// DisciplineHasSuffix applies the HasSuffix predicate on the "discipline" field.
func DisciplineHasSuffix(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDiscipline), v))
	})
}

// DisciplineEqualFold applies the EqualFold predicate on the "discipline" field.
func DisciplineEqualFold(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDiscipline), v))
	})
}

// DisciplineContainsFold applies the ContainsFold predicate on the "discipline" field.
func DisciplineContainsFold(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDiscipline), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), v))
	})
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), v))
	})
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), v))
	})
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), v))
	})
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGender), v))
	})
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGender), v))
	})
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGender), v))
	})
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGender), v))
	})
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGender), v))
	})
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAge), v))
	})
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAge), v...))
	})
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAge), v...))
	})
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAge), v))
	})
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAge), v))
	})
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAge), v))
	})
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAge), v))
	})
}

// YaerEQ applies the EQ predicate on the "yaer" field.
func YaerEQ(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYaer), v))
	})
}

// YaerNEQ applies the NEQ predicate on the "yaer" field.
func YaerNEQ(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYaer), v))
	})
}

// YaerIn applies the In predicate on the "yaer" field.
func YaerIn(vs ...int) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYaer), v...))
	})
}

// YaerNotIn applies the NotIn predicate on the "yaer" field.
func YaerNotIn(vs ...int) predicate.Clubapplication {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Clubapplication(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYaer), v...))
	})
}

// YaerGT applies the GT predicate on the "yaer" field.
func YaerGT(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYaer), v))
	})
}

// YaerGTE applies the GTE predicate on the "yaer" field.
func YaerGTE(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYaer), v))
	})
}

// YaerLT applies the LT predicate on the "yaer" field.
func YaerLT(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYaer), v))
	})
}

// YaerLTE applies the LTE predicate on the "yaer" field.
func YaerLTE(v int) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYaer), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClubappstatus applies the HasEdge predicate on the "clubappstatus" edge.
func HasClubappstatus() predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClubappstatusTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClubappstatusTable, ClubappstatusColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClubappstatusWith applies the HasEdge predicate on the "clubappstatus" edge with a given conditions (other predicates).
func HasClubappstatusWith(preds ...predicate.ClubappStatus) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClubappstatusInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClubappstatusTable, ClubappstatusColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClub applies the HasEdge predicate on the "club" edge.
func HasClub() predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClubTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClubTable, ClubColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClubWith applies the HasEdge predicate on the "club" edge with a given conditions (other predicates).
func HasClubWith(preds ...predicate.Club) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClubInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClubTable, ClubColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Clubapplication) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Clubapplication) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Clubapplication) predicate.Clubapplication {
	return predicate.Clubapplication(func(s *sql.Selector) {
		p(s.Not())
	})
}
