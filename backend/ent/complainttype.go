// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/OMENX/app/ent/complainttype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// ComplaintType is the model entity for the ComplaintType schema.
type ComplaintType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ComplaintTypeQuery when eager-loading is set.
	Edges ComplaintTypeEdges `json:"edges"`
}

// ComplaintTypeEdges holds the relations/edges for other nodes in the graph.
type ComplaintTypeEdges struct {
	// ComplaintTypeToComplaint holds the value of the ComplaintTypeToComplaint edge.
	ComplaintTypeToComplaint []*Complaint
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ComplaintTypeToComplaintOrErr returns the ComplaintTypeToComplaint value or an error if the edge
// was not loaded in eager-loading.
func (e ComplaintTypeEdges) ComplaintTypeToComplaintOrErr() ([]*Complaint, error) {
	if e.loadedTypes[0] {
		return e.ComplaintTypeToComplaint, nil
	}
	return nil, &NotLoadedError{edge: "ComplaintTypeToComplaint"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ComplaintType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // description
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ComplaintType fields.
func (ct *ComplaintType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(complainttype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ct.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[0])
	} else if value.Valid {
		ct.Description = value.String
	}
	return nil
}

// QueryComplaintTypeToComplaint queries the ComplaintTypeToComplaint edge of the ComplaintType.
func (ct *ComplaintType) QueryComplaintTypeToComplaint() *ComplaintQuery {
	return (&ComplaintTypeClient{config: ct.config}).QueryComplaintTypeToComplaint(ct)
}

// Update returns a builder for updating this ComplaintType.
// Note that, you need to call ComplaintType.Unwrap() before calling this method, if this ComplaintType
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *ComplaintType) Update() *ComplaintTypeUpdateOne {
	return (&ComplaintTypeClient{config: ct.config}).UpdateOne(ct)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ct *ComplaintType) Unwrap() *ComplaintType {
	tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: ComplaintType is not a transactional entity")
	}
	ct.config.driver = tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *ComplaintType) String() string {
	var builder strings.Builder
	builder.WriteString("ComplaintType(")
	builder.WriteString(fmt.Sprintf("id=%v", ct.ID))
	builder.WriteString(", description=")
	builder.WriteString(ct.Description)
	builder.WriteByte(')')
	return builder.String()
}

// ComplaintTypes is a parsable slice of ComplaintType.
type ComplaintTypes []*ComplaintType

func (ct ComplaintTypes) config(cfg config) {
	for _i := range ct {
		ct[_i].config = cfg
	}
}
