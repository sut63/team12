// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/OMENX/app/ent/activities"
	"github.com/OMENX/app/ent/club"
	"github.com/OMENX/app/ent/clubapplication"
	"github.com/OMENX/app/ent/clubbranch"
	"github.com/OMENX/app/ent/clubtype"
	"github.com/OMENX/app/ent/complaint"
	"github.com/OMENX/app/ent/predicate"
	"github.com/OMENX/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ClubUpdate is the builder for updating Club entities.
type ClubUpdate struct {
	config
	hooks      []Hook
	mutation   *ClubMutation
	predicates []predicate.Club
}

// Where adds a new predicate for the builder.
func (cu *ClubUpdate) Where(ps ...predicate.Club) *ClubUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *ClubUpdate) SetName(s string) *ClubUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetPurpose sets the purpose field.
func (cu *ClubUpdate) SetPurpose(s string) *ClubUpdate {
	cu.mutation.SetPurpose(s)
	return cu
}

// SetPhone sets the phone field.
func (cu *ClubUpdate) SetPhone(s string) *ClubUpdate {
	cu.mutation.SetPhone(s)
	return cu
}

// SetUserID sets the user edge to User by id.
func (cu *ClubUpdate) SetUserID(id int) *ClubUpdate {
	cu.mutation.SetUserID(id)
	return cu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (cu *ClubUpdate) SetNillableUserID(id *int) *ClubUpdate {
	if id != nil {
		cu = cu.SetUserID(*id)
	}
	return cu
}

// SetUser sets the user edge to User.
func (cu *ClubUpdate) SetUser(u *User) *ClubUpdate {
	return cu.SetUserID(u.ID)
}

// SetClubtypeID sets the clubtype edge to ClubType by id.
func (cu *ClubUpdate) SetClubtypeID(id int) *ClubUpdate {
	cu.mutation.SetClubtypeID(id)
	return cu
}

// SetNillableClubtypeID sets the clubtype edge to ClubType by id if the given value is not nil.
func (cu *ClubUpdate) SetNillableClubtypeID(id *int) *ClubUpdate {
	if id != nil {
		cu = cu.SetClubtypeID(*id)
	}
	return cu
}

// SetClubtype sets the clubtype edge to ClubType.
func (cu *ClubUpdate) SetClubtype(c *ClubType) *ClubUpdate {
	return cu.SetClubtypeID(c.ID)
}

// SetClubbranchID sets the clubbranch edge to ClubBranch by id.
func (cu *ClubUpdate) SetClubbranchID(id int) *ClubUpdate {
	cu.mutation.SetClubbranchID(id)
	return cu
}

// SetNillableClubbranchID sets the clubbranch edge to ClubBranch by id if the given value is not nil.
func (cu *ClubUpdate) SetNillableClubbranchID(id *int) *ClubUpdate {
	if id != nil {
		cu = cu.SetClubbranchID(*id)
	}
	return cu
}

// SetClubbranch sets the clubbranch edge to ClubBranch.
func (cu *ClubUpdate) SetClubbranch(c *ClubBranch) *ClubUpdate {
	return cu.SetClubbranchID(c.ID)
}

// AddClubapplicationIDs adds the clubapplication edge to Clubapplication by ids.
func (cu *ClubUpdate) AddClubapplicationIDs(ids ...int) *ClubUpdate {
	cu.mutation.AddClubapplicationIDs(ids...)
	return cu
}

// AddClubapplication adds the clubapplication edges to Clubapplication.
func (cu *ClubUpdate) AddClubapplication(c ...*Clubapplication) *ClubUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClubapplicationIDs(ids...)
}

// AddClubToComplaintIDs adds the ClubToComplaint edge to Complaint by ids.
func (cu *ClubUpdate) AddClubToComplaintIDs(ids ...int) *ClubUpdate {
	cu.mutation.AddClubToComplaintIDs(ids...)
	return cu
}

// AddClubToComplaint adds the ClubToComplaint edges to Complaint.
func (cu *ClubUpdate) AddClubToComplaint(c ...*Complaint) *ClubUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddClubToComplaintIDs(ids...)
}

// AddActivityIDs adds the activities edge to Activities by ids.
func (cu *ClubUpdate) AddActivityIDs(ids ...int) *ClubUpdate {
	cu.mutation.AddActivityIDs(ids...)
	return cu
}

// AddActivities adds the activities edges to Activities.
func (cu *ClubUpdate) AddActivities(a ...*Activities) *ClubUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddActivityIDs(ids...)
}

// AddUserclubIDs adds the userclub edge to User by ids.
func (cu *ClubUpdate) AddUserclubIDs(ids ...int) *ClubUpdate {
	cu.mutation.AddUserclubIDs(ids...)
	return cu
}

// AddUserclub adds the userclub edges to User.
func (cu *ClubUpdate) AddUserclub(u ...*User) *ClubUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddUserclubIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cu *ClubUpdate) Mutation() *ClubMutation {
	return cu.mutation
}

// ClearUser clears the user edge to User.
func (cu *ClubUpdate) ClearUser() *ClubUpdate {
	cu.mutation.ClearUser()
	return cu
}

// ClearClubtype clears the clubtype edge to ClubType.
func (cu *ClubUpdate) ClearClubtype() *ClubUpdate {
	cu.mutation.ClearClubtype()
	return cu
}

// ClearClubbranch clears the clubbranch edge to ClubBranch.
func (cu *ClubUpdate) ClearClubbranch() *ClubUpdate {
	cu.mutation.ClearClubbranch()
	return cu
}

// RemoveClubapplicationIDs removes the clubapplication edge to Clubapplication by ids.
func (cu *ClubUpdate) RemoveClubapplicationIDs(ids ...int) *ClubUpdate {
	cu.mutation.RemoveClubapplicationIDs(ids...)
	return cu
}

// RemoveClubapplication removes clubapplication edges to Clubapplication.
func (cu *ClubUpdate) RemoveClubapplication(c ...*Clubapplication) *ClubUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClubapplicationIDs(ids...)
}

// RemoveClubToComplaintIDs removes the ClubToComplaint edge to Complaint by ids.
func (cu *ClubUpdate) RemoveClubToComplaintIDs(ids ...int) *ClubUpdate {
	cu.mutation.RemoveClubToComplaintIDs(ids...)
	return cu
}

// RemoveClubToComplaint removes ClubToComplaint edges to Complaint.
func (cu *ClubUpdate) RemoveClubToComplaint(c ...*Complaint) *ClubUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveClubToComplaintIDs(ids...)
}

// RemoveActivityIDs removes the activities edge to Activities by ids.
func (cu *ClubUpdate) RemoveActivityIDs(ids ...int) *ClubUpdate {
	cu.mutation.RemoveActivityIDs(ids...)
	return cu
}

// RemoveActivities removes activities edges to Activities.
func (cu *ClubUpdate) RemoveActivities(a ...*Activities) *ClubUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveActivityIDs(ids...)
}

// RemoveUserclubIDs removes the userclub edge to User by ids.
func (cu *ClubUpdate) RemoveUserclubIDs(ids ...int) *ClubUpdate {
	cu.mutation.RemoveUserclubIDs(ids...)
	return cu
}

// RemoveUserclub removes userclub edges to User.
func (cu *ClubUpdate) RemoveUserclub(u ...*User) *ClubUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveUserclubIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ClubUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := cu.mutation.Name(); ok {
		if err := club.NameValidator(v); err != nil {
			return 0, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Purpose(); ok {
		if err := club.PurposeValidator(v); err != nil {
			return 0, &ValidationError{Name: "purpose", err: fmt.Errorf("ent: validator failed for field \"purpose\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Phone(); ok {
		if err := club.PhoneValidator(v); err != nil {
			return 0, &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClubUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClubUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClubUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   club.Table,
			Columns: club.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldName,
		})
	}
	if value, ok := cu.mutation.Purpose(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldPurpose,
		})
	}
	if value, ok := cu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldPhone,
		})
	}
	if cu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.UserTable,
			Columns: []string{club.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.UserTable,
			Columns: []string{club.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClubtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubtypeTable,
			Columns: []string{club.ClubtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClubtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubtypeTable,
			Columns: []string{club.ClubtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClubbranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubbranchTable,
			Columns: []string{club.ClubbranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubbranch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClubbranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubbranchTable,
			Columns: []string{club.ClubbranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubbranch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cu.mutation.RemovedClubapplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ClubapplicationTable,
			Columns: []string{club.ClubapplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubapplication.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClubapplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ClubapplicationTable,
			Columns: []string{club.ClubapplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubapplication.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cu.mutation.RemovedClubToComplaintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ClubToComplaintTable,
			Columns: []string{club.ClubToComplaintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: complaint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClubToComplaintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ClubToComplaintTable,
			Columns: []string{club.ClubToComplaintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: complaint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cu.mutation.RemovedActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ActivitiesTable,
			Columns: []string{club.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ActivitiesTable,
			Columns: []string{club.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cu.mutation.RemovedUserclubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.UserclubTable,
			Columns: []string{club.UserclubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.UserclubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.UserclubTable,
			Columns: []string{club.UserclubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{club.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClubUpdateOne is the builder for updating a single Club entity.
type ClubUpdateOne struct {
	config
	hooks    []Hook
	mutation *ClubMutation
}

// SetName sets the name field.
func (cuo *ClubUpdateOne) SetName(s string) *ClubUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetPurpose sets the purpose field.
func (cuo *ClubUpdateOne) SetPurpose(s string) *ClubUpdateOne {
	cuo.mutation.SetPurpose(s)
	return cuo
}

// SetPhone sets the phone field.
func (cuo *ClubUpdateOne) SetPhone(s string) *ClubUpdateOne {
	cuo.mutation.SetPhone(s)
	return cuo
}

// SetUserID sets the user edge to User by id.
func (cuo *ClubUpdateOne) SetUserID(id int) *ClubUpdateOne {
	cuo.mutation.SetUserID(id)
	return cuo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableUserID(id *int) *ClubUpdateOne {
	if id != nil {
		cuo = cuo.SetUserID(*id)
	}
	return cuo
}

// SetUser sets the user edge to User.
func (cuo *ClubUpdateOne) SetUser(u *User) *ClubUpdateOne {
	return cuo.SetUserID(u.ID)
}

// SetClubtypeID sets the clubtype edge to ClubType by id.
func (cuo *ClubUpdateOne) SetClubtypeID(id int) *ClubUpdateOne {
	cuo.mutation.SetClubtypeID(id)
	return cuo
}

// SetNillableClubtypeID sets the clubtype edge to ClubType by id if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableClubtypeID(id *int) *ClubUpdateOne {
	if id != nil {
		cuo = cuo.SetClubtypeID(*id)
	}
	return cuo
}

// SetClubtype sets the clubtype edge to ClubType.
func (cuo *ClubUpdateOne) SetClubtype(c *ClubType) *ClubUpdateOne {
	return cuo.SetClubtypeID(c.ID)
}

// SetClubbranchID sets the clubbranch edge to ClubBranch by id.
func (cuo *ClubUpdateOne) SetClubbranchID(id int) *ClubUpdateOne {
	cuo.mutation.SetClubbranchID(id)
	return cuo
}

// SetNillableClubbranchID sets the clubbranch edge to ClubBranch by id if the given value is not nil.
func (cuo *ClubUpdateOne) SetNillableClubbranchID(id *int) *ClubUpdateOne {
	if id != nil {
		cuo = cuo.SetClubbranchID(*id)
	}
	return cuo
}

// SetClubbranch sets the clubbranch edge to ClubBranch.
func (cuo *ClubUpdateOne) SetClubbranch(c *ClubBranch) *ClubUpdateOne {
	return cuo.SetClubbranchID(c.ID)
}

// AddClubapplicationIDs adds the clubapplication edge to Clubapplication by ids.
func (cuo *ClubUpdateOne) AddClubapplicationIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.AddClubapplicationIDs(ids...)
	return cuo
}

// AddClubapplication adds the clubapplication edges to Clubapplication.
func (cuo *ClubUpdateOne) AddClubapplication(c ...*Clubapplication) *ClubUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClubapplicationIDs(ids...)
}

// AddClubToComplaintIDs adds the ClubToComplaint edge to Complaint by ids.
func (cuo *ClubUpdateOne) AddClubToComplaintIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.AddClubToComplaintIDs(ids...)
	return cuo
}

// AddClubToComplaint adds the ClubToComplaint edges to Complaint.
func (cuo *ClubUpdateOne) AddClubToComplaint(c ...*Complaint) *ClubUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddClubToComplaintIDs(ids...)
}

// AddActivityIDs adds the activities edge to Activities by ids.
func (cuo *ClubUpdateOne) AddActivityIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.AddActivityIDs(ids...)
	return cuo
}

// AddActivities adds the activities edges to Activities.
func (cuo *ClubUpdateOne) AddActivities(a ...*Activities) *ClubUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddActivityIDs(ids...)
}

// AddUserclubIDs adds the userclub edge to User by ids.
func (cuo *ClubUpdateOne) AddUserclubIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.AddUserclubIDs(ids...)
	return cuo
}

// AddUserclub adds the userclub edges to User.
func (cuo *ClubUpdateOne) AddUserclub(u ...*User) *ClubUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddUserclubIDs(ids...)
}

// Mutation returns the ClubMutation object of the builder.
func (cuo *ClubUpdateOne) Mutation() *ClubMutation {
	return cuo.mutation
}

// ClearUser clears the user edge to User.
func (cuo *ClubUpdateOne) ClearUser() *ClubUpdateOne {
	cuo.mutation.ClearUser()
	return cuo
}

// ClearClubtype clears the clubtype edge to ClubType.
func (cuo *ClubUpdateOne) ClearClubtype() *ClubUpdateOne {
	cuo.mutation.ClearClubtype()
	return cuo
}

// ClearClubbranch clears the clubbranch edge to ClubBranch.
func (cuo *ClubUpdateOne) ClearClubbranch() *ClubUpdateOne {
	cuo.mutation.ClearClubbranch()
	return cuo
}

// RemoveClubapplicationIDs removes the clubapplication edge to Clubapplication by ids.
func (cuo *ClubUpdateOne) RemoveClubapplicationIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.RemoveClubapplicationIDs(ids...)
	return cuo
}

// RemoveClubapplication removes clubapplication edges to Clubapplication.
func (cuo *ClubUpdateOne) RemoveClubapplication(c ...*Clubapplication) *ClubUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClubapplicationIDs(ids...)
}

// RemoveClubToComplaintIDs removes the ClubToComplaint edge to Complaint by ids.
func (cuo *ClubUpdateOne) RemoveClubToComplaintIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.RemoveClubToComplaintIDs(ids...)
	return cuo
}

// RemoveClubToComplaint removes ClubToComplaint edges to Complaint.
func (cuo *ClubUpdateOne) RemoveClubToComplaint(c ...*Complaint) *ClubUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveClubToComplaintIDs(ids...)
}

// RemoveActivityIDs removes the activities edge to Activities by ids.
func (cuo *ClubUpdateOne) RemoveActivityIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.RemoveActivityIDs(ids...)
	return cuo
}

// RemoveActivities removes activities edges to Activities.
func (cuo *ClubUpdateOne) RemoveActivities(a ...*Activities) *ClubUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveActivityIDs(ids...)
}

// RemoveUserclubIDs removes the userclub edge to User by ids.
func (cuo *ClubUpdateOne) RemoveUserclubIDs(ids ...int) *ClubUpdateOne {
	cuo.mutation.RemoveUserclubIDs(ids...)
	return cuo
}

// RemoveUserclub removes userclub edges to User.
func (cuo *ClubUpdateOne) RemoveUserclub(u ...*User) *ClubUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveUserclubIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *ClubUpdateOne) Save(ctx context.Context) (*Club, error) {
	if v, ok := cuo.mutation.Name(); ok {
		if err := club.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Purpose(); ok {
		if err := club.PurposeValidator(v); err != nil {
			return nil, &ValidationError{Name: "purpose", err: fmt.Errorf("ent: validator failed for field \"purpose\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Phone(); ok {
		if err := club.PhoneValidator(v); err != nil {
			return nil, &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}

	var (
		err  error
		node *Club
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClubUpdateOne) SaveX(ctx context.Context) *Club {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ClubUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClubUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClubUpdateOne) sqlSave(ctx context.Context) (c *Club, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   club.Table,
			Columns: club.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: club.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Club.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldName,
		})
	}
	if value, ok := cuo.mutation.Purpose(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldPurpose,
		})
	}
	if value, ok := cuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: club.FieldPhone,
		})
	}
	if cuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.UserTable,
			Columns: []string{club.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.UserTable,
			Columns: []string{club.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClubtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubtypeTable,
			Columns: []string{club.ClubtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClubtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubtypeTable,
			Columns: []string{club.ClubtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClubbranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubbranchTable,
			Columns: []string{club.ClubbranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubbranch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClubbranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   club.ClubbranchTable,
			Columns: []string{club.ClubbranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubbranch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cuo.mutation.RemovedClubapplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ClubapplicationTable,
			Columns: []string{club.ClubapplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubapplication.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClubapplicationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ClubapplicationTable,
			Columns: []string{club.ClubapplicationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubapplication.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cuo.mutation.RemovedClubToComplaintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ClubToComplaintTable,
			Columns: []string{club.ClubToComplaintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: complaint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClubToComplaintIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ClubToComplaintTable,
			Columns: []string{club.ClubToComplaintColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: complaint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cuo.mutation.RemovedActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ActivitiesTable,
			Columns: []string{club.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ActivitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.ActivitiesTable,
			Columns: []string{club.ActivitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activities.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := cuo.mutation.RemovedUserclubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.UserclubTable,
			Columns: []string{club.UserclubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.UserclubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   club.UserclubTable,
			Columns: []string{club.UserclubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Club{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{club.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
