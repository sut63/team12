// Code generated by entc, DO NOT EDIT.

package room

import (
	"github.com/OMENX/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RoomName applies equality check predicate on the "room_name" field. It's identical to RoomNameEQ.
func RoomName(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomName), v))
	})
}

// RoomLocation applies equality check predicate on the "room_location" field. It's identical to RoomLocationEQ.
func RoomLocation(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomLocation), v))
	})
}

// RoomFloor applies equality check predicate on the "room_floor" field. It's identical to RoomFloorEQ.
func RoomFloor(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomFloor), v))
	})
}

// MaxContain applies equality check predicate on the "max_contain" field. It's identical to MaxContainEQ.
func MaxContain(v int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxContain), v))
	})
}

// RoomNameEQ applies the EQ predicate on the "room_name" field.
func RoomNameEQ(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomName), v))
	})
}

// RoomNameNEQ applies the NEQ predicate on the "room_name" field.
func RoomNameNEQ(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomName), v))
	})
}

// RoomNameIn applies the In predicate on the "room_name" field.
func RoomNameIn(vs ...string) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomName), v...))
	})
}

// RoomNameNotIn applies the NotIn predicate on the "room_name" field.
func RoomNameNotIn(vs ...string) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomName), v...))
	})
}

// RoomNameGT applies the GT predicate on the "room_name" field.
func RoomNameGT(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomName), v))
	})
}

// RoomNameGTE applies the GTE predicate on the "room_name" field.
func RoomNameGTE(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomName), v))
	})
}

// RoomNameLT applies the LT predicate on the "room_name" field.
func RoomNameLT(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomName), v))
	})
}

// RoomNameLTE applies the LTE predicate on the "room_name" field.
func RoomNameLTE(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomName), v))
	})
}

// RoomNameContains applies the Contains predicate on the "room_name" field.
func RoomNameContains(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomName), v))
	})
}

// RoomNameHasPrefix applies the HasPrefix predicate on the "room_name" field.
func RoomNameHasPrefix(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomName), v))
	})
}

// RoomNameHasSuffix applies the HasSuffix predicate on the "room_name" field.
func RoomNameHasSuffix(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomName), v))
	})
}

// RoomNameEqualFold applies the EqualFold predicate on the "room_name" field.
func RoomNameEqualFold(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomName), v))
	})
}

// RoomNameContainsFold applies the ContainsFold predicate on the "room_name" field.
func RoomNameContainsFold(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomName), v))
	})
}

// RoomLocationEQ applies the EQ predicate on the "room_location" field.
func RoomLocationEQ(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomLocation), v))
	})
}

// RoomLocationNEQ applies the NEQ predicate on the "room_location" field.
func RoomLocationNEQ(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomLocation), v))
	})
}

// RoomLocationIn applies the In predicate on the "room_location" field.
func RoomLocationIn(vs ...string) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomLocation), v...))
	})
}

// RoomLocationNotIn applies the NotIn predicate on the "room_location" field.
func RoomLocationNotIn(vs ...string) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomLocation), v...))
	})
}

// RoomLocationGT applies the GT predicate on the "room_location" field.
func RoomLocationGT(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomLocation), v))
	})
}

// RoomLocationGTE applies the GTE predicate on the "room_location" field.
func RoomLocationGTE(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomLocation), v))
	})
}

// RoomLocationLT applies the LT predicate on the "room_location" field.
func RoomLocationLT(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomLocation), v))
	})
}

// RoomLocationLTE applies the LTE predicate on the "room_location" field.
func RoomLocationLTE(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomLocation), v))
	})
}

// RoomLocationContains applies the Contains predicate on the "room_location" field.
func RoomLocationContains(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomLocation), v))
	})
}

// RoomLocationHasPrefix applies the HasPrefix predicate on the "room_location" field.
func RoomLocationHasPrefix(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomLocation), v))
	})
}

// RoomLocationHasSuffix applies the HasSuffix predicate on the "room_location" field.
func RoomLocationHasSuffix(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomLocation), v))
	})
}

// RoomLocationEqualFold applies the EqualFold predicate on the "room_location" field.
func RoomLocationEqualFold(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomLocation), v))
	})
}

// RoomLocationContainsFold applies the ContainsFold predicate on the "room_location" field.
func RoomLocationContainsFold(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomLocation), v))
	})
}

// RoomFloorEQ applies the EQ predicate on the "room_floor" field.
func RoomFloorEQ(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRoomFloor), v))
	})
}

// RoomFloorNEQ applies the NEQ predicate on the "room_floor" field.
func RoomFloorNEQ(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRoomFloor), v))
	})
}

// RoomFloorIn applies the In predicate on the "room_floor" field.
func RoomFloorIn(vs ...string) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRoomFloor), v...))
	})
}

// RoomFloorNotIn applies the NotIn predicate on the "room_floor" field.
func RoomFloorNotIn(vs ...string) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRoomFloor), v...))
	})
}

// RoomFloorGT applies the GT predicate on the "room_floor" field.
func RoomFloorGT(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRoomFloor), v))
	})
}

// RoomFloorGTE applies the GTE predicate on the "room_floor" field.
func RoomFloorGTE(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRoomFloor), v))
	})
}

// RoomFloorLT applies the LT predicate on the "room_floor" field.
func RoomFloorLT(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRoomFloor), v))
	})
}

// RoomFloorLTE applies the LTE predicate on the "room_floor" field.
func RoomFloorLTE(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRoomFloor), v))
	})
}

// RoomFloorContains applies the Contains predicate on the "room_floor" field.
func RoomFloorContains(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRoomFloor), v))
	})
}

// RoomFloorHasPrefix applies the HasPrefix predicate on the "room_floor" field.
func RoomFloorHasPrefix(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRoomFloor), v))
	})
}

// RoomFloorHasSuffix applies the HasSuffix predicate on the "room_floor" field.
func RoomFloorHasSuffix(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRoomFloor), v))
	})
}

// RoomFloorEqualFold applies the EqualFold predicate on the "room_floor" field.
func RoomFloorEqualFold(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRoomFloor), v))
	})
}

// RoomFloorContainsFold applies the ContainsFold predicate on the "room_floor" field.
func RoomFloorContainsFold(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRoomFloor), v))
	})
}

// MaxContainEQ applies the EQ predicate on the "max_contain" field.
func MaxContainEQ(v int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaxContain), v))
	})
}

// MaxContainNEQ applies the NEQ predicate on the "max_contain" field.
func MaxContainNEQ(v int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaxContain), v))
	})
}

// MaxContainIn applies the In predicate on the "max_contain" field.
func MaxContainIn(vs ...int) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaxContain), v...))
	})
}

// MaxContainNotIn applies the NotIn predicate on the "max_contain" field.
func MaxContainNotIn(vs ...int) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaxContain), v...))
	})
}

// MaxContainGT applies the GT predicate on the "max_contain" field.
func MaxContainGT(v int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMaxContain), v))
	})
}

// MaxContainGTE applies the GTE predicate on the "max_contain" field.
func MaxContainGTE(v int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMaxContain), v))
	})
}

// MaxContainLT applies the LT predicate on the "max_contain" field.
func MaxContainLT(v int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMaxContain), v))
	})
}

// MaxContainLTE applies the LTE predicate on the "max_contain" field.
func MaxContainLTE(v int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMaxContain), v))
	})
}

// HasRoomuses applies the HasEdge predicate on the "roomuses" edge.
func HasRoomuses() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoomusesTable, RoomusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomusesWith applies the HasEdge predicate on the "roomuses" edge with a given conditions (other predicates).
func HasRoomusesWith(preds ...predicate.Roomuse) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RoomusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RoomusesTable, RoomusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		p(s.Not())
	})
}
