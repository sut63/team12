// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/OMENX/app/ent/user"
	"github.com/OMENX/app/ent/usertype"
	"github.com/facebookincubator/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password int `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges      UserEdges `json:"edges"`
	UserTypeID *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Usertype holds the value of the usertype edge.
	Usertype *Usertype
	// Club holds the value of the club edge.
	Club []*Club
	// Activities holds the value of the activities edge.
	Activities []*Activities
	// Clubapplication holds the value of the clubapplication edge.
	Clubapplication []*Clubapplication
	// UserToComplaint holds the value of the UserToComplaint edge.
	UserToComplaint []*Complaint
	// Roomuse holds the value of the Roomuse edge.
	Roomuse []*Roomuse
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// UsertypeOrErr returns the Usertype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) UsertypeOrErr() (*Usertype, error) {
	if e.loadedTypes[0] {
		if e.Usertype == nil {
			// The edge usertype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: usertype.Label}
		}
		return e.Usertype, nil
	}
	return nil, &NotLoadedError{edge: "usertype"}
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ClubOrErr() ([]*Club, error) {
	if e.loadedTypes[1] {
		return e.Club, nil
	}
	return nil, &NotLoadedError{edge: "club"}
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ActivitiesOrErr() ([]*Activities, error) {
	if e.loadedTypes[2] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// ClubapplicationOrErr returns the Clubapplication value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ClubapplicationOrErr() ([]*Clubapplication, error) {
	if e.loadedTypes[3] {
		return e.Clubapplication, nil
	}
	return nil, &NotLoadedError{edge: "clubapplication"}
}

// UserToComplaintOrErr returns the UserToComplaint value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserToComplaintOrErr() ([]*Complaint, error) {
	if e.loadedTypes[4] {
		return e.UserToComplaint, nil
	}
	return nil, &NotLoadedError{edge: "UserToComplaint"}
}

// RoomuseOrErr returns the Roomuse value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RoomuseOrErr() ([]*Roomuse, error) {
	if e.loadedTypes[5] {
		return e.Roomuse, nil
	}
	return nil, &NotLoadedError{edge: "Roomuse"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // email
		&sql.NullInt64{},  // password
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*User) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // UserTypeID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		u.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[1])
	} else if value.Valid {
		u.Email = value.String
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field password", values[2])
	} else if value.Valid {
		u.Password = int(value.Int64)
	}
	values = values[3:]
	if len(values) == len(user.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field UserTypeID", value)
		} else if value.Valid {
			u.UserTypeID = new(int)
			*u.UserTypeID = int(value.Int64)
		}
	}
	return nil
}

// QueryUsertype queries the usertype edge of the User.
func (u *User) QueryUsertype() *UsertypeQuery {
	return (&UserClient{config: u.config}).QueryUsertype(u)
}

// QueryClub queries the club edge of the User.
func (u *User) QueryClub() *ClubQuery {
	return (&UserClient{config: u.config}).QueryClub(u)
}

// QueryActivities queries the activities edge of the User.
func (u *User) QueryActivities() *ActivitiesQuery {
	return (&UserClient{config: u.config}).QueryActivities(u)
}

// QueryClubapplication queries the clubapplication edge of the User.
func (u *User) QueryClubapplication() *ClubapplicationQuery {
	return (&UserClient{config: u.config}).QueryClubapplication(u)
}

// QueryUserToComplaint queries the UserToComplaint edge of the User.
func (u *User) QueryUserToComplaint() *ComplaintQuery {
	return (&UserClient{config: u.config}).QueryUserToComplaint(u)
}

// QueryRoomuse queries the Roomuse edge of the User.
func (u *User) QueryRoomuse() *RoomuseQuery {
	return (&UserClient{config: u.config}).QueryRoomuse(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", password=")
	builder.WriteString(fmt.Sprintf("%v", u.Password))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
