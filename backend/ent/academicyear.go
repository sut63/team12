// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/OMENX/app/ent/academicyear"
	"github.com/facebookincubator/ent/dialect/sql"
)

// AcademicYear is the model entity for the AcademicYear schema.
type AcademicYear struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Semester holds the value of the "semester" field.
	Semester string `json:"semester,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AcademicYearQuery when eager-loading is set.
	Edges AcademicYearEdges `json:"edges"`
}

// AcademicYearEdges holds the relations/edges for other nodes in the graph.
type AcademicYearEdges struct {
	// Activities holds the value of the activities edge.
	Activities []*Activities
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e AcademicYearEdges) ActivitiesOrErr() ([]*Activities, error) {
	if e.loadedTypes[0] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AcademicYear) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // semester
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AcademicYear fields.
func (ay *AcademicYear) assignValues(values ...interface{}) error {
	if m, n := len(values), len(academicyear.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ay.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field semester", values[0])
	} else if value.Valid {
		ay.Semester = value.String
	}
	return nil
}

// QueryActivities queries the activities edge of the AcademicYear.
func (ay *AcademicYear) QueryActivities() *ActivitiesQuery {
	return (&AcademicYearClient{config: ay.config}).QueryActivities(ay)
}

// Update returns a builder for updating this AcademicYear.
// Note that, you need to call AcademicYear.Unwrap() before calling this method, if this AcademicYear
// was returned from a transaction, and the transaction was committed or rolled back.
func (ay *AcademicYear) Update() *AcademicYearUpdateOne {
	return (&AcademicYearClient{config: ay.config}).UpdateOne(ay)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ay *AcademicYear) Unwrap() *AcademicYear {
	tx, ok := ay.config.driver.(*txDriver)
	if !ok {
		panic("ent: AcademicYear is not a transactional entity")
	}
	ay.config.driver = tx.drv
	return ay
}

// String implements the fmt.Stringer.
func (ay *AcademicYear) String() string {
	var builder strings.Builder
	builder.WriteString("AcademicYear(")
	builder.WriteString(fmt.Sprintf("id=%v", ay.ID))
	builder.WriteString(", semester=")
	builder.WriteString(ay.Semester)
	builder.WriteByte(')')
	return builder.String()
}

// AcademicYears is a parsable slice of AcademicYear.
type AcademicYears []*AcademicYear

func (ay AcademicYears) config(cfg config) {
	for _i := range ay {
		ay[_i].config = cfg
	}
}
