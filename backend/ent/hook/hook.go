// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/OMENX/app/ent"
)

// The AcademicYearFunc type is an adapter to allow the use of ordinary
// function as AcademicYear mutator.
type AcademicYearFunc func(context.Context, *ent.AcademicYearMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AcademicYearFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AcademicYearMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AcademicYearMutation", m)
	}
	return f(ctx, mv)
}

// The ActivitiesFunc type is an adapter to allow the use of ordinary
// function as Activities mutator.
type ActivitiesFunc func(context.Context, *ent.ActivitiesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivitiesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ActivitiesMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivitiesMutation", m)
	}
	return f(ctx, mv)
}

// The ActivityTypeFunc type is an adapter to allow the use of ordinary
// function as ActivityType mutator.
type ActivityTypeFunc func(context.Context, *ent.ActivityTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ActivityTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ClubFunc type is an adapter to allow the use of ordinary
// function as Club mutator.
type ClubFunc func(context.Context, *ent.ClubMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ClubFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ClubMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ClubMutation", m)
	}
	return f(ctx, mv)
}

// The ClubBranchFunc type is an adapter to allow the use of ordinary
// function as ClubBranch mutator.
type ClubBranchFunc func(context.Context, *ent.ClubBranchMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ClubBranchFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ClubBranchMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ClubBranchMutation", m)
	}
	return f(ctx, mv)
}

// The ClubTypeFunc type is an adapter to allow the use of ordinary
// function as ClubType mutator.
type ClubTypeFunc func(context.Context, *ent.ClubTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ClubTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ClubTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ClubTypeMutation", m)
	}
	return f(ctx, mv)
}

// The ClubappStatusFunc type is an adapter to allow the use of ordinary
// function as ClubappStatus mutator.
type ClubappStatusFunc func(context.Context, *ent.ClubappStatusMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ClubappStatusFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ClubappStatusMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ClubappStatusMutation", m)
	}
	return f(ctx, mv)
}

// The ClubapplicationFunc type is an adapter to allow the use of ordinary
// function as Clubapplication mutator.
type ClubapplicationFunc func(context.Context, *ent.ClubapplicationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ClubapplicationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ClubapplicationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ClubapplicationMutation", m)
	}
	return f(ctx, mv)
}

// The ComplaintFunc type is an adapter to allow the use of ordinary
// function as Complaint mutator.
type ComplaintFunc func(context.Context, *ent.ComplaintMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ComplaintFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ComplaintMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ComplaintMutation", m)
	}
	return f(ctx, mv)
}

// The ComplaintTypeFunc type is an adapter to allow the use of ordinary
// function as ComplaintType mutator.
type ComplaintTypeFunc func(context.Context, *ent.ComplaintTypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ComplaintTypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ComplaintTypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ComplaintTypeMutation", m)
	}
	return f(ctx, mv)
}

// The DisciplineFunc type is an adapter to allow the use of ordinary
// function as Discipline mutator.
type DisciplineFunc func(context.Context, *ent.DisciplineMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DisciplineFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DisciplineMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DisciplineMutation", m)
	}
	return f(ctx, mv)
}

// The GenderFunc type is an adapter to allow the use of ordinary
// function as Gender mutator.
type GenderFunc func(context.Context, *ent.GenderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f GenderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.GenderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.GenderMutation", m)
	}
	return f(ctx, mv)
}

// The PositionFunc type is an adapter to allow the use of ordinary
// function as Position mutator.
type PositionFunc func(context.Context, *ent.PositionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PositionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PositionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PositionMutation", m)
	}
	return f(ctx, mv)
}

// The PurposeFunc type is an adapter to allow the use of ordinary
// function as Purpose mutator.
type PurposeFunc func(context.Context, *ent.PurposeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PurposeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PurposeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PurposeMutation", m)
	}
	return f(ctx, mv)
}

// The RoomFunc type is an adapter to allow the use of ordinary
// function as Room mutator.
type RoomFunc func(context.Context, *ent.RoomMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoomFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RoomMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoomMutation", m)
	}
	return f(ctx, mv)
}

// The RoomuseFunc type is an adapter to allow the use of ordinary
// function as Roomuse mutator.
type RoomuseFunc func(context.Context, *ent.RoomuseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoomuseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RoomuseMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoomuseMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
	}
	return f(ctx, mv)
}

// The UserStatusFunc type is an adapter to allow the use of ordinary
// function as UserStatus mutator.
type UserStatusFunc func(context.Context, *ent.UserStatusMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserStatusFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserStatusMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserStatusMutation", m)
	}
	return f(ctx, mv)
}

// The UsertypeFunc type is an adapter to allow the use of ordinary
// function as Usertype mutator.
type UsertypeFunc func(context.Context, *ent.UsertypeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UsertypeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UsertypeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UsertypeMutation", m)
	}
	return f(ctx, mv)
}

// The YearFunc type is an adapter to allow the use of ordinary
// function as Year mutator.
type YearFunc func(context.Context, *ent.YearMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f YearFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.YearMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.YearMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	Hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(_ context.Context, m ent.Mutation) (ent.Value, error) {
			return nil, fmt.Errorf("%s operation is not allowed", m.Op())
		})
	}
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
