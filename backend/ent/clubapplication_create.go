// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/OMENX/app/ent/club"
	"github.com/OMENX/app/ent/clubapplication"
	"github.com/OMENX/app/ent/clubappstatus"
	"github.com/OMENX/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ClubapplicationCreate is the builder for creating a Clubapplication entity.
type ClubapplicationCreate struct {
	config
	mutation *ClubapplicationMutation
	hooks    []Hook
}

// SetContact sets the contact field.
func (cc *ClubapplicationCreate) SetContact(s string) *ClubapplicationCreate {
	cc.mutation.SetContact(s)
	return cc
}

// SetReason sets the reason field.
func (cc *ClubapplicationCreate) SetReason(s string) *ClubapplicationCreate {
	cc.mutation.SetReason(s)
	return cc
}

// SetAddeddatetime sets the addeddatetime field.
func (cc *ClubapplicationCreate) SetAddeddatetime(t time.Time) *ClubapplicationCreate {
	cc.mutation.SetAddeddatetime(t)
	return cc
}

// SetAddername sets the addername field.
func (cc *ClubapplicationCreate) SetAddername(s string) *ClubapplicationCreate {
	cc.mutation.SetAddername(s)
	return cc
}

// SetDiscipline sets the discipline field.
func (cc *ClubapplicationCreate) SetDiscipline(s string) *ClubapplicationCreate {
	cc.mutation.SetDiscipline(s)
	return cc
}

// SetGender sets the gender field.
func (cc *ClubapplicationCreate) SetGender(s string) *ClubapplicationCreate {
	cc.mutation.SetGender(s)
	return cc
}

// SetAge sets the age field.
func (cc *ClubapplicationCreate) SetAge(i int) *ClubapplicationCreate {
	cc.mutation.SetAge(i)
	return cc
}

// SetYaer sets the yaer field.
func (cc *ClubapplicationCreate) SetYaer(i int) *ClubapplicationCreate {
	cc.mutation.SetYaer(i)
	return cc
}

// SetOwnerID sets the owner edge to User by id.
func (cc *ClubapplicationCreate) SetOwnerID(id int) *ClubapplicationCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (cc *ClubapplicationCreate) SetNillableOwnerID(id *int) *ClubapplicationCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the owner edge to User.
func (cc *ClubapplicationCreate) SetOwner(u *User) *ClubapplicationCreate {
	return cc.SetOwnerID(u.ID)
}

// SetClubappstatusID sets the clubappstatus edge to ClubappStatus by id.
func (cc *ClubapplicationCreate) SetClubappstatusID(id int) *ClubapplicationCreate {
	cc.mutation.SetClubappstatusID(id)
	return cc
}

// SetNillableClubappstatusID sets the clubappstatus edge to ClubappStatus by id if the given value is not nil.
func (cc *ClubapplicationCreate) SetNillableClubappstatusID(id *int) *ClubapplicationCreate {
	if id != nil {
		cc = cc.SetClubappstatusID(*id)
	}
	return cc
}

// SetClubappstatus sets the clubappstatus edge to ClubappStatus.
func (cc *ClubapplicationCreate) SetClubappstatus(c *ClubappStatus) *ClubapplicationCreate {
	return cc.SetClubappstatusID(c.ID)
}

// SetClubID sets the club edge to Club by id.
func (cc *ClubapplicationCreate) SetClubID(id int) *ClubapplicationCreate {
	cc.mutation.SetClubID(id)
	return cc
}

// SetNillableClubID sets the club edge to Club by id if the given value is not nil.
func (cc *ClubapplicationCreate) SetNillableClubID(id *int) *ClubapplicationCreate {
	if id != nil {
		cc = cc.SetClubID(*id)
	}
	return cc
}

// SetClub sets the club edge to Club.
func (cc *ClubapplicationCreate) SetClub(c *Club) *ClubapplicationCreate {
	return cc.SetClubID(c.ID)
}

// Mutation returns the ClubapplicationMutation object of the builder.
func (cc *ClubapplicationCreate) Mutation() *ClubapplicationMutation {
	return cc.mutation
}

// Save creates the Clubapplication in the database.
func (cc *ClubapplicationCreate) Save(ctx context.Context) (*Clubapplication, error) {
	if _, ok := cc.mutation.Contact(); !ok {
		return nil, &ValidationError{Name: "contact", err: errors.New("ent: missing required field \"contact\"")}
	}
	if v, ok := cc.mutation.Contact(); ok {
		if err := clubapplication.ContactValidator(v); err != nil {
			return nil, &ValidationError{Name: "contact", err: fmt.Errorf("ent: validator failed for field \"contact\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Reason(); !ok {
		return nil, &ValidationError{Name: "reason", err: errors.New("ent: missing required field \"reason\"")}
	}
	if _, ok := cc.mutation.Addeddatetime(); !ok {
		return nil, &ValidationError{Name: "addeddatetime", err: errors.New("ent: missing required field \"addeddatetime\"")}
	}
	if _, ok := cc.mutation.Addername(); !ok {
		return nil, &ValidationError{Name: "addername", err: errors.New("ent: missing required field \"addername\"")}
	}
	if v, ok := cc.mutation.Addername(); ok {
		if err := clubapplication.AddernameValidator(v); err != nil {
			return nil, &ValidationError{Name: "addername", err: fmt.Errorf("ent: validator failed for field \"addername\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Discipline(); !ok {
		return nil, &ValidationError{Name: "discipline", err: errors.New("ent: missing required field \"discipline\"")}
	}
	if v, ok := cc.mutation.Discipline(); ok {
		if err := clubapplication.DisciplineValidator(v); err != nil {
			return nil, &ValidationError{Name: "discipline", err: fmt.Errorf("ent: validator failed for field \"discipline\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Gender(); !ok {
		return nil, &ValidationError{Name: "gender", err: errors.New("ent: missing required field \"gender\"")}
	}
	if v, ok := cc.mutation.Gender(); ok {
		if err := clubapplication.GenderValidator(v); err != nil {
			return nil, &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Age(); !ok {
		return nil, &ValidationError{Name: "age", err: errors.New("ent: missing required field \"age\"")}
	}
	if v, ok := cc.mutation.Age(); ok {
		if err := clubapplication.AgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if _, ok := cc.mutation.Yaer(); !ok {
		return nil, &ValidationError{Name: "yaer", err: errors.New("ent: missing required field \"yaer\"")}
	}
	if v, ok := cc.mutation.Yaer(); ok {
		if err := clubapplication.YaerValidator(v); err != nil {
			return nil, &ValidationError{Name: "yaer", err: fmt.Errorf("ent: validator failed for field \"yaer\": %w", err)}
		}
	}
	var (
		err  error
		node *Clubapplication
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubapplicationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClubapplicationCreate) SaveX(ctx context.Context) *Clubapplication {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *ClubapplicationCreate) sqlSave(ctx context.Context) (*Clubapplication, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *ClubapplicationCreate) createSpec() (*Clubapplication, *sqlgraph.CreateSpec) {
	var (
		c     = &Clubapplication{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: clubapplication.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: clubapplication.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Contact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldContact,
		})
		c.Contact = value
	}
	if value, ok := cc.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldReason,
		})
		c.Reason = value
	}
	if value, ok := cc.mutation.Addeddatetime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: clubapplication.FieldAddeddatetime,
		})
		c.Addeddatetime = value
	}
	if value, ok := cc.mutation.Addername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldAddername,
		})
		c.Addername = value
	}
	if value, ok := cc.mutation.Discipline(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldDiscipline,
		})
		c.Discipline = value
	}
	if value, ok := cc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldGender,
		})
		c.Gender = value
	}
	if value, ok := cc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: clubapplication.FieldAge,
		})
		c.Age = value
	}
	if value, ok := cc.mutation.Yaer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: clubapplication.FieldYaer,
		})
		c.Yaer = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.OwnerTable,
			Columns: []string{clubapplication.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClubappstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.ClubappstatusTable,
			Columns: []string{clubapplication.ClubappstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubappstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.ClubTable,
			Columns: []string{clubapplication.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
