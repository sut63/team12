// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/OMENX/app/ent/predicate"
	"github.com/OMENX/app/ent/purpose"
	"github.com/OMENX/app/ent/room"
	"github.com/OMENX/app/ent/roomuse"
	"github.com/OMENX/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RoomuseUpdate is the builder for updating Roomuse entities.
type RoomuseUpdate struct {
	config
	hooks      []Hook
	mutation   *RoomuseMutation
	predicates []predicate.Roomuse
}

// Where adds a new predicate for the builder.
func (ru *RoomuseUpdate) Where(ps ...predicate.Roomuse) *RoomuseUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetAge sets the age field.
func (ru *RoomuseUpdate) SetAge(i int) *RoomuseUpdate {
	ru.mutation.ResetAge()
	ru.mutation.SetAge(i)
	return ru
}

// AddAge adds i to age.
func (ru *RoomuseUpdate) AddAge(i int) *RoomuseUpdate {
	ru.mutation.AddAge(i)
	return ru
}

// SetNote sets the note field.
func (ru *RoomuseUpdate) SetNote(s string) *RoomuseUpdate {
	ru.mutation.SetNote(s)
	return ru
}

// SetContact sets the contact field.
func (ru *RoomuseUpdate) SetContact(s string) *RoomuseUpdate {
	ru.mutation.SetContact(s)
	return ru
}

// SetInTime sets the in_time field.
func (ru *RoomuseUpdate) SetInTime(t time.Time) *RoomuseUpdate {
	ru.mutation.SetInTime(t)
	return ru
}

// SetOutTime sets the out_time field.
func (ru *RoomuseUpdate) SetOutTime(t time.Time) *RoomuseUpdate {
	ru.mutation.SetOutTime(t)
	return ru
}

// SetRoomsID sets the rooms edge to Room by id.
func (ru *RoomuseUpdate) SetRoomsID(id int) *RoomuseUpdate {
	ru.mutation.SetRoomsID(id)
	return ru
}

// SetNillableRoomsID sets the rooms edge to Room by id if the given value is not nil.
func (ru *RoomuseUpdate) SetNillableRoomsID(id *int) *RoomuseUpdate {
	if id != nil {
		ru = ru.SetRoomsID(*id)
	}
	return ru
}

// SetRooms sets the rooms edge to Room.
func (ru *RoomuseUpdate) SetRooms(r *Room) *RoomuseUpdate {
	return ru.SetRoomsID(r.ID)
}

// SetPurposesID sets the purposes edge to Purpose by id.
func (ru *RoomuseUpdate) SetPurposesID(id int) *RoomuseUpdate {
	ru.mutation.SetPurposesID(id)
	return ru
}

// SetNillablePurposesID sets the purposes edge to Purpose by id if the given value is not nil.
func (ru *RoomuseUpdate) SetNillablePurposesID(id *int) *RoomuseUpdate {
	if id != nil {
		ru = ru.SetPurposesID(*id)
	}
	return ru
}

// SetPurposes sets the purposes edge to Purpose.
func (ru *RoomuseUpdate) SetPurposes(p *Purpose) *RoomuseUpdate {
	return ru.SetPurposesID(p.ID)
}

// SetUsersID sets the users edge to User by id.
func (ru *RoomuseUpdate) SetUsersID(id int) *RoomuseUpdate {
	ru.mutation.SetUsersID(id)
	return ru
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (ru *RoomuseUpdate) SetNillableUsersID(id *int) *RoomuseUpdate {
	if id != nil {
		ru = ru.SetUsersID(*id)
	}
	return ru
}

// SetUsers sets the users edge to User.
func (ru *RoomuseUpdate) SetUsers(u *User) *RoomuseUpdate {
	return ru.SetUsersID(u.ID)
}

// Mutation returns the RoomuseMutation object of the builder.
func (ru *RoomuseUpdate) Mutation() *RoomuseMutation {
	return ru.mutation
}

// ClearRooms clears the rooms edge to Room.
func (ru *RoomuseUpdate) ClearRooms() *RoomuseUpdate {
	ru.mutation.ClearRooms()
	return ru
}

// ClearPurposes clears the purposes edge to Purpose.
func (ru *RoomuseUpdate) ClearPurposes() *RoomuseUpdate {
	ru.mutation.ClearPurposes()
	return ru
}

// ClearUsers clears the users edge to User.
func (ru *RoomuseUpdate) ClearUsers() *RoomuseUpdate {
	ru.mutation.ClearUsers()
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RoomuseUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ru.mutation.Age(); ok {
		if err := roomuse.AgeValidator(v); err != nil {
			return 0, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Note(); ok {
		if err := roomuse.NoteValidator(v); err != nil {
			return 0, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Contact(); ok {
		if err := roomuse.ContactValidator(v); err != nil {
			return 0, &ValidationError{Name: "contact", err: fmt.Errorf("ent: validator failed for field \"contact\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomuseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomuseUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomuseUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomuseUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoomuseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roomuse.Table,
			Columns: roomuse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomuse.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomuse.FieldAge,
		})
	}
	if value, ok := ru.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomuse.FieldAge,
		})
	}
	if value, ok := ru.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomuse.FieldNote,
		})
	}
	if value, ok := ru.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomuse.FieldContact,
		})
	}
	if value, ok := ru.mutation.InTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: roomuse.FieldInTime,
		})
	}
	if value, ok := ru.mutation.OutTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: roomuse.FieldOutTime,
		})
	}
	if ru.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.RoomsTable,
			Columns: []string{roomuse.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.RoomsTable,
			Columns: []string{roomuse.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PurposesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.PurposesTable,
			Columns: []string{roomuse.PurposesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: purpose.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PurposesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.PurposesTable,
			Columns: []string{roomuse.PurposesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: purpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.UsersTable,
			Columns: []string{roomuse.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.UsersTable,
			Columns: []string{roomuse.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomuse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoomuseUpdateOne is the builder for updating a single Roomuse entity.
type RoomuseUpdateOne struct {
	config
	hooks    []Hook
	mutation *RoomuseMutation
}

// SetAge sets the age field.
func (ruo *RoomuseUpdateOne) SetAge(i int) *RoomuseUpdateOne {
	ruo.mutation.ResetAge()
	ruo.mutation.SetAge(i)
	return ruo
}

// AddAge adds i to age.
func (ruo *RoomuseUpdateOne) AddAge(i int) *RoomuseUpdateOne {
	ruo.mutation.AddAge(i)
	return ruo
}

// SetNote sets the note field.
func (ruo *RoomuseUpdateOne) SetNote(s string) *RoomuseUpdateOne {
	ruo.mutation.SetNote(s)
	return ruo
}

// SetContact sets the contact field.
func (ruo *RoomuseUpdateOne) SetContact(s string) *RoomuseUpdateOne {
	ruo.mutation.SetContact(s)
	return ruo
}

// SetInTime sets the in_time field.
func (ruo *RoomuseUpdateOne) SetInTime(t time.Time) *RoomuseUpdateOne {
	ruo.mutation.SetInTime(t)
	return ruo
}

// SetOutTime sets the out_time field.
func (ruo *RoomuseUpdateOne) SetOutTime(t time.Time) *RoomuseUpdateOne {
	ruo.mutation.SetOutTime(t)
	return ruo
}

// SetRoomsID sets the rooms edge to Room by id.
func (ruo *RoomuseUpdateOne) SetRoomsID(id int) *RoomuseUpdateOne {
	ruo.mutation.SetRoomsID(id)
	return ruo
}

// SetNillableRoomsID sets the rooms edge to Room by id if the given value is not nil.
func (ruo *RoomuseUpdateOne) SetNillableRoomsID(id *int) *RoomuseUpdateOne {
	if id != nil {
		ruo = ruo.SetRoomsID(*id)
	}
	return ruo
}

// SetRooms sets the rooms edge to Room.
func (ruo *RoomuseUpdateOne) SetRooms(r *Room) *RoomuseUpdateOne {
	return ruo.SetRoomsID(r.ID)
}

// SetPurposesID sets the purposes edge to Purpose by id.
func (ruo *RoomuseUpdateOne) SetPurposesID(id int) *RoomuseUpdateOne {
	ruo.mutation.SetPurposesID(id)
	return ruo
}

// SetNillablePurposesID sets the purposes edge to Purpose by id if the given value is not nil.
func (ruo *RoomuseUpdateOne) SetNillablePurposesID(id *int) *RoomuseUpdateOne {
	if id != nil {
		ruo = ruo.SetPurposesID(*id)
	}
	return ruo
}

// SetPurposes sets the purposes edge to Purpose.
func (ruo *RoomuseUpdateOne) SetPurposes(p *Purpose) *RoomuseUpdateOne {
	return ruo.SetPurposesID(p.ID)
}

// SetUsersID sets the users edge to User by id.
func (ruo *RoomuseUpdateOne) SetUsersID(id int) *RoomuseUpdateOne {
	ruo.mutation.SetUsersID(id)
	return ruo
}

// SetNillableUsersID sets the users edge to User by id if the given value is not nil.
func (ruo *RoomuseUpdateOne) SetNillableUsersID(id *int) *RoomuseUpdateOne {
	if id != nil {
		ruo = ruo.SetUsersID(*id)
	}
	return ruo
}

// SetUsers sets the users edge to User.
func (ruo *RoomuseUpdateOne) SetUsers(u *User) *RoomuseUpdateOne {
	return ruo.SetUsersID(u.ID)
}

// Mutation returns the RoomuseMutation object of the builder.
func (ruo *RoomuseUpdateOne) Mutation() *RoomuseMutation {
	return ruo.mutation
}

// ClearRooms clears the rooms edge to Room.
func (ruo *RoomuseUpdateOne) ClearRooms() *RoomuseUpdateOne {
	ruo.mutation.ClearRooms()
	return ruo
}

// ClearPurposes clears the purposes edge to Purpose.
func (ruo *RoomuseUpdateOne) ClearPurposes() *RoomuseUpdateOne {
	ruo.mutation.ClearPurposes()
	return ruo
}

// ClearUsers clears the users edge to User.
func (ruo *RoomuseUpdateOne) ClearUsers() *RoomuseUpdateOne {
	ruo.mutation.ClearUsers()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RoomuseUpdateOne) Save(ctx context.Context) (*Roomuse, error) {
	if v, ok := ruo.mutation.Age(); ok {
		if err := roomuse.AgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Note(); ok {
		if err := roomuse.NoteValidator(v); err != nil {
			return nil, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Contact(); ok {
		if err := roomuse.ContactValidator(v); err != nil {
			return nil, &ValidationError{Name: "contact", err: fmt.Errorf("ent: validator failed for field \"contact\": %w", err)}
		}
	}

	var (
		err  error
		node *Roomuse
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomuseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomuseUpdateOne) SaveX(ctx context.Context) *Roomuse {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RoomuseUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomuseUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoomuseUpdateOne) sqlSave(ctx context.Context) (r *Roomuse, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   roomuse.Table,
			Columns: roomuse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roomuse.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Roomuse.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomuse.FieldAge,
		})
	}
	if value, ok := ruo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roomuse.FieldAge,
		})
	}
	if value, ok := ruo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomuse.FieldNote,
		})
	}
	if value, ok := ruo.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roomuse.FieldContact,
		})
	}
	if value, ok := ruo.mutation.InTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: roomuse.FieldInTime,
		})
	}
	if value, ok := ruo.mutation.OutTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: roomuse.FieldOutTime,
		})
	}
	if ruo.mutation.RoomsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.RoomsTable,
			Columns: []string{roomuse.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RoomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.RoomsTable,
			Columns: []string{roomuse.RoomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PurposesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.PurposesTable,
			Columns: []string{roomuse.PurposesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: purpose.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PurposesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.PurposesTable,
			Columns: []string{roomuse.PurposesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: purpose.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.UsersTable,
			Columns: []string{roomuse.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roomuse.UsersTable,
			Columns: []string{roomuse.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Roomuse{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{roomuse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
