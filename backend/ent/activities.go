// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/OMENX/app/ent/academicyear"
	"github.com/OMENX/app/ent/activities"
	"github.com/OMENX/app/ent/activitytype"
	"github.com/OMENX/app/ent/club"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Activities is the model entity for the Activities schema.
type Activities struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail string `json:"detail,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Starttime holds the value of the "starttime" field.
	Starttime time.Time `json:"starttime,omitempty"`
	// Endtime holds the value of the "endtime" field.
	Endtime time.Time `json:"endtime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ActivitiesQuery when eager-loading is set.
	Edges          ActivitiesEdges `json:"edges"`
	AcademicYearID *int
	ActivityTypeID *int
	ClubID         *int
}

// ActivitiesEdges holds the relations/edges for other nodes in the graph.
type ActivitiesEdges struct {
	// Activitytype holds the value of the activitytype edge.
	Activitytype *ActivityType
	// Academicyear holds the value of the academicyear edge.
	Academicyear *AcademicYear
	// Club holds the value of the club edge.
	Club *Club
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ActivitytypeOrErr returns the Activitytype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivitiesEdges) ActivitytypeOrErr() (*ActivityType, error) {
	if e.loadedTypes[0] {
		if e.Activitytype == nil {
			// The edge activitytype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: activitytype.Label}
		}
		return e.Activitytype, nil
	}
	return nil, &NotLoadedError{edge: "activitytype"}
}

// AcademicyearOrErr returns the Academicyear value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivitiesEdges) AcademicyearOrErr() (*AcademicYear, error) {
	if e.loadedTypes[1] {
		if e.Academicyear == nil {
			// The edge academicyear was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: academicyear.Label}
		}
		return e.Academicyear, nil
	}
	return nil, &NotLoadedError{edge: "academicyear"}
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ActivitiesEdges) ClubOrErr() (*Club, error) {
	if e.loadedTypes[2] {
		if e.Club == nil {
			// The edge club was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: club.Label}
		}
		return e.Club, nil
	}
	return nil, &NotLoadedError{edge: "club"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activities) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // detail
		&sql.NullString{}, // location
		&sql.NullTime{},   // starttime
		&sql.NullTime{},   // endtime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Activities) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // AcademicYearID
		&sql.NullInt64{}, // ActivityTypeID
		&sql.NullInt64{}, // ClubID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activities fields.
func (a *Activities) assignValues(values ...interface{}) error {
	if m, n := len(values), len(activities.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		a.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field detail", values[1])
	} else if value.Valid {
		a.Detail = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field location", values[2])
	} else if value.Valid {
		a.Location = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field starttime", values[3])
	} else if value.Valid {
		a.Starttime = value.Time
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field endtime", values[4])
	} else if value.Valid {
		a.Endtime = value.Time
	}
	values = values[5:]
	if len(values) == len(activities.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field AcademicYearID", value)
		} else if value.Valid {
			a.AcademicYearID = new(int)
			*a.AcademicYearID = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field ActivityTypeID", value)
		} else if value.Valid {
			a.ActivityTypeID = new(int)
			*a.ActivityTypeID = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field ClubID", value)
		} else if value.Valid {
			a.ClubID = new(int)
			*a.ClubID = int(value.Int64)
		}
	}
	return nil
}

// QueryActivitytype queries the activitytype edge of the Activities.
func (a *Activities) QueryActivitytype() *ActivityTypeQuery {
	return (&ActivitiesClient{config: a.config}).QueryActivitytype(a)
}

// QueryAcademicyear queries the academicyear edge of the Activities.
func (a *Activities) QueryAcademicyear() *AcademicYearQuery {
	return (&ActivitiesClient{config: a.config}).QueryAcademicyear(a)
}

// QueryClub queries the club edge of the Activities.
func (a *Activities) QueryClub() *ClubQuery {
	return (&ActivitiesClient{config: a.config}).QueryClub(a)
}

// Update returns a builder for updating this Activities.
// Note that, you need to call Activities.Unwrap() before calling this method, if this Activities
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Activities) Update() *ActivitiesUpdateOne {
	return (&ActivitiesClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Activities) Unwrap() *Activities {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Activities is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Activities) String() string {
	var builder strings.Builder
	builder.WriteString("Activities(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", detail=")
	builder.WriteString(a.Detail)
	builder.WriteString(", location=")
	builder.WriteString(a.Location)
	builder.WriteString(", starttime=")
	builder.WriteString(a.Starttime.Format(time.ANSIC))
	builder.WriteString(", endtime=")
	builder.WriteString(a.Endtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ActivitiesSlice is a parsable slice of Activities.
type ActivitiesSlice []*Activities

func (a ActivitiesSlice) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
