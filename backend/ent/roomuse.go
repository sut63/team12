// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/OMENX/app/ent/room"
	"github.com/OMENX/app/ent/roompurpose"
	"github.com/OMENX/app/ent/roomuse"
	"github.com/OMENX/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Roomuse is the model entity for the Roomuse schema.
type Roomuse struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AddedTime holds the value of the "added_time" field.
	AddedTime time.Time `json:"added_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomuseQuery when eager-loading is set.
	Edges      RoomuseEdges `json:"edges"`
	room_id    *int
	purpose_id *int
	UserID     *int
}

// RoomuseEdges holds the relations/edges for other nodes in the graph.
type RoomuseEdges struct {
	// Rooms holds the value of the rooms edge.
	Rooms *Room
	// Purposes holds the value of the purposes edge.
	Purposes *Roompurpose
	// Users holds the value of the users edge.
	Users *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoomsOrErr returns the Rooms value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomuseEdges) RoomsOrErr() (*Room, error) {
	if e.loadedTypes[0] {
		if e.Rooms == nil {
			// The edge rooms was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.Rooms, nil
	}
	return nil, &NotLoadedError{edge: "rooms"}
}

// PurposesOrErr returns the Purposes value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomuseEdges) PurposesOrErr() (*Roompurpose, error) {
	if e.loadedTypes[1] {
		if e.Purposes == nil {
			// The edge purposes was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roompurpose.Label}
		}
		return e.Purposes, nil
	}
	return nil, &NotLoadedError{edge: "purposes"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomuseEdges) UsersOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Users == nil {
			// The edge users was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Roomuse) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // added_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Roomuse) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // room_id
		&sql.NullInt64{}, // purpose_id
		&sql.NullInt64{}, // UserID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Roomuse fields.
func (r *Roomuse) assignValues(values ...interface{}) error {
	if m, n := len(values), len(roomuse.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field added_time", values[0])
	} else if value.Valid {
		r.AddedTime = value.Time
	}
	values = values[1:]
	if len(values) == len(roomuse.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_id", value)
		} else if value.Valid {
			r.room_id = new(int)
			*r.room_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field purpose_id", value)
		} else if value.Valid {
			r.purpose_id = new(int)
			*r.purpose_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field UserID", value)
		} else if value.Valid {
			r.UserID = new(int)
			*r.UserID = int(value.Int64)
		}
	}
	return nil
}

// QueryRooms queries the rooms edge of the Roomuse.
func (r *Roomuse) QueryRooms() *RoomQuery {
	return (&RoomuseClient{config: r.config}).QueryRooms(r)
}

// QueryPurposes queries the purposes edge of the Roomuse.
func (r *Roomuse) QueryPurposes() *RoompurposeQuery {
	return (&RoomuseClient{config: r.config}).QueryPurposes(r)
}

// QueryUsers queries the users edge of the Roomuse.
func (r *Roomuse) QueryUsers() *UserQuery {
	return (&RoomuseClient{config: r.config}).QueryUsers(r)
}

// Update returns a builder for updating this Roomuse.
// Note that, you need to call Roomuse.Unwrap() before calling this method, if this Roomuse
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Roomuse) Update() *RoomuseUpdateOne {
	return (&RoomuseClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Roomuse) Unwrap() *Roomuse {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Roomuse is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Roomuse) String() string {
	var builder strings.Builder
	builder.WriteString("Roomuse(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", added_time=")
	builder.WriteString(r.AddedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Roomuses is a parsable slice of Roomuse.
type Roomuses []*Roomuse

func (r Roomuses) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
