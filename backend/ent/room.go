// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/OMENX/app/ent/room"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Room is the model entity for the Room schema.
type Room struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoomName holds the value of the "room_name" field.
	RoomName string `json:"room_name,omitempty"`
	// RoomLocation holds the value of the "room_location" field.
	RoomLocation string `json:"room_location,omitempty"`
	// RoomFloor holds the value of the "room_floor" field.
	RoomFloor string `json:"room_floor,omitempty"`
	// MaxContain holds the value of the "max_contain" field.
	MaxContain int `json:"max_contain,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges RoomEdges `json:"edges"`
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// Roomuses holds the value of the roomuses edge.
	Roomuses []*Roomuse
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoomusesOrErr returns the Roomuses value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) RoomusesOrErr() ([]*Roomuse, error) {
	if e.loadedTypes[0] {
		return e.Roomuses, nil
	}
	return nil, &NotLoadedError{edge: "roomuses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // room_name
		&sql.NullString{}, // room_location
		&sql.NullString{}, // room_floor
		&sql.NullInt64{},  // max_contain
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(values ...interface{}) error {
	if m, n := len(values), len(room.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field room_name", values[0])
	} else if value.Valid {
		r.RoomName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field room_location", values[1])
	} else if value.Valid {
		r.RoomLocation = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field room_floor", values[2])
	} else if value.Valid {
		r.RoomFloor = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field max_contain", values[3])
	} else if value.Valid {
		r.MaxContain = int(value.Int64)
	}
	return nil
}

// QueryRoomuses queries the roomuses edge of the Room.
func (r *Room) QueryRoomuses() *RoomuseQuery {
	return (&RoomClient{config: r.config}).QueryRoomuses(r)
}

// Update returns a builder for updating this Room.
// Note that, you need to call Room.Unwrap() before calling this method, if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return (&RoomClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", room_name=")
	builder.WriteString(r.RoomName)
	builder.WriteString(", room_location=")
	builder.WriteString(r.RoomLocation)
	builder.WriteString(", room_floor=")
	builder.WriteString(r.RoomFloor)
	builder.WriteString(", max_contain=")
	builder.WriteString(fmt.Sprintf("%v", r.MaxContain))
	builder.WriteByte(')')
	return builder.String()
}

// Rooms is a parsable slice of Room.
type Rooms []*Room

func (r Rooms) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
