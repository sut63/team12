// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/OMENX/app/ent/migrate"

	"github.com/OMENX/app/ent/academicyear"
	"github.com/OMENX/app/ent/activities"
	"github.com/OMENX/app/ent/activitytype"
	"github.com/OMENX/app/ent/club"
	"github.com/OMENX/app/ent/clubapplication"
	"github.com/OMENX/app/ent/clubappstatus"
	"github.com/OMENX/app/ent/clubbranch"
	"github.com/OMENX/app/ent/clubtype"
	"github.com/OMENX/app/ent/complaint"
	"github.com/OMENX/app/ent/complainttype"
	"github.com/OMENX/app/ent/room"
	"github.com/OMENX/app/ent/roompurpose"
	"github.com/OMENX/app/ent/roomuse"
	"github.com/OMENX/app/ent/user"
	"github.com/OMENX/app/ent/usertype"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AcademicYear is the client for interacting with the AcademicYear builders.
	AcademicYear *AcademicYearClient
	// Activities is the client for interacting with the Activities builders.
	Activities *ActivitiesClient
	// ActivityType is the client for interacting with the ActivityType builders.
	ActivityType *ActivityTypeClient
	// Club is the client for interacting with the Club builders.
	Club *ClubClient
	// ClubBranch is the client for interacting with the ClubBranch builders.
	ClubBranch *ClubBranchClient
	// ClubType is the client for interacting with the ClubType builders.
	ClubType *ClubTypeClient
	// ClubappStatus is the client for interacting with the ClubappStatus builders.
	ClubappStatus *ClubappStatusClient
	// Clubapplication is the client for interacting with the Clubapplication builders.
	Clubapplication *ClubapplicationClient
	// Complaint is the client for interacting with the Complaint builders.
	Complaint *ComplaintClient
	// ComplaintType is the client for interacting with the ComplaintType builders.
	ComplaintType *ComplaintTypeClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// Roompurpose is the client for interacting with the Roompurpose builders.
	Roompurpose *RoompurposeClient
	// Roomuse is the client for interacting with the Roomuse builders.
	Roomuse *RoomuseClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Usertype is the client for interacting with the Usertype builders.
	Usertype *UsertypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AcademicYear = NewAcademicYearClient(c.config)
	c.Activities = NewActivitiesClient(c.config)
	c.ActivityType = NewActivityTypeClient(c.config)
	c.Club = NewClubClient(c.config)
	c.ClubBranch = NewClubBranchClient(c.config)
	c.ClubType = NewClubTypeClient(c.config)
	c.ClubappStatus = NewClubappStatusClient(c.config)
	c.Clubapplication = NewClubapplicationClient(c.config)
	c.Complaint = NewComplaintClient(c.config)
	c.ComplaintType = NewComplaintTypeClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.Roompurpose = NewRoompurposeClient(c.config)
	c.Roomuse = NewRoomuseClient(c.config)
	c.User = NewUserClient(c.config)
	c.Usertype = NewUsertypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		AcademicYear:    NewAcademicYearClient(cfg),
		Activities:      NewActivitiesClient(cfg),
		ActivityType:    NewActivityTypeClient(cfg),
		Club:            NewClubClient(cfg),
		ClubBranch:      NewClubBranchClient(cfg),
		ClubType:        NewClubTypeClient(cfg),
		ClubappStatus:   NewClubappStatusClient(cfg),
		Clubapplication: NewClubapplicationClient(cfg),
		Complaint:       NewComplaintClient(cfg),
		ComplaintType:   NewComplaintTypeClient(cfg),
		Room:            NewRoomClient(cfg),
		Roompurpose:     NewRoompurposeClient(cfg),
		Roomuse:         NewRoomuseClient(cfg),
		User:            NewUserClient(cfg),
		Usertype:        NewUsertypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:          cfg,
		AcademicYear:    NewAcademicYearClient(cfg),
		Activities:      NewActivitiesClient(cfg),
		ActivityType:    NewActivityTypeClient(cfg),
		Club:            NewClubClient(cfg),
		ClubBranch:      NewClubBranchClient(cfg),
		ClubType:        NewClubTypeClient(cfg),
		ClubappStatus:   NewClubappStatusClient(cfg),
		Clubapplication: NewClubapplicationClient(cfg),
		Complaint:       NewComplaintClient(cfg),
		ComplaintType:   NewComplaintTypeClient(cfg),
		Room:            NewRoomClient(cfg),
		Roompurpose:     NewRoompurposeClient(cfg),
		Roomuse:         NewRoomuseClient(cfg),
		User:            NewUserClient(cfg),
		Usertype:        NewUsertypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AcademicYear.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AcademicYear.Use(hooks...)
	c.Activities.Use(hooks...)
	c.ActivityType.Use(hooks...)
	c.Club.Use(hooks...)
	c.ClubBranch.Use(hooks...)
	c.ClubType.Use(hooks...)
	c.ClubappStatus.Use(hooks...)
	c.Clubapplication.Use(hooks...)
	c.Complaint.Use(hooks...)
	c.ComplaintType.Use(hooks...)
	c.Room.Use(hooks...)
	c.Roompurpose.Use(hooks...)
	c.Roomuse.Use(hooks...)
	c.User.Use(hooks...)
	c.Usertype.Use(hooks...)
}

// AcademicYearClient is a client for the AcademicYear schema.
type AcademicYearClient struct {
	config
}

// NewAcademicYearClient returns a client for the AcademicYear from the given config.
func NewAcademicYearClient(c config) *AcademicYearClient {
	return &AcademicYearClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `academicyear.Hooks(f(g(h())))`.
func (c *AcademicYearClient) Use(hooks ...Hook) {
	c.hooks.AcademicYear = append(c.hooks.AcademicYear, hooks...)
}

// Create returns a create builder for AcademicYear.
func (c *AcademicYearClient) Create() *AcademicYearCreate {
	mutation := newAcademicYearMutation(c.config, OpCreate)
	return &AcademicYearCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for AcademicYear.
func (c *AcademicYearClient) Update() *AcademicYearUpdate {
	mutation := newAcademicYearMutation(c.config, OpUpdate)
	return &AcademicYearUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AcademicYearClient) UpdateOne(ay *AcademicYear) *AcademicYearUpdateOne {
	mutation := newAcademicYearMutation(c.config, OpUpdateOne, withAcademicYear(ay))
	return &AcademicYearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AcademicYearClient) UpdateOneID(id int) *AcademicYearUpdateOne {
	mutation := newAcademicYearMutation(c.config, OpUpdateOne, withAcademicYearID(id))
	return &AcademicYearUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AcademicYear.
func (c *AcademicYearClient) Delete() *AcademicYearDelete {
	mutation := newAcademicYearMutation(c.config, OpDelete)
	return &AcademicYearDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AcademicYearClient) DeleteOne(ay *AcademicYear) *AcademicYearDeleteOne {
	return c.DeleteOneID(ay.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AcademicYearClient) DeleteOneID(id int) *AcademicYearDeleteOne {
	builder := c.Delete().Where(academicyear.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AcademicYearDeleteOne{builder}
}

// Create returns a query builder for AcademicYear.
func (c *AcademicYearClient) Query() *AcademicYearQuery {
	return &AcademicYearQuery{config: c.config}
}

// Get returns a AcademicYear entity by its id.
func (c *AcademicYearClient) Get(ctx context.Context, id int) (*AcademicYear, error) {
	return c.Query().Where(academicyear.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AcademicYearClient) GetX(ctx context.Context, id int) *AcademicYear {
	ay, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ay
}

// QueryActivities queries the activities edge of a AcademicYear.
func (c *AcademicYearClient) QueryActivities(ay *AcademicYear) *ActivitiesQuery {
	query := &ActivitiesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ay.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(academicyear.Table, academicyear.FieldID, id),
			sqlgraph.To(activities.Table, activities.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, academicyear.ActivitiesTable, academicyear.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(ay.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AcademicYearClient) Hooks() []Hook {
	return c.hooks.AcademicYear
}

// ActivitiesClient is a client for the Activities schema.
type ActivitiesClient struct {
	config
}

// NewActivitiesClient returns a client for the Activities from the given config.
func NewActivitiesClient(c config) *ActivitiesClient {
	return &ActivitiesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activities.Hooks(f(g(h())))`.
func (c *ActivitiesClient) Use(hooks ...Hook) {
	c.hooks.Activities = append(c.hooks.Activities, hooks...)
}

// Create returns a create builder for Activities.
func (c *ActivitiesClient) Create() *ActivitiesCreate {
	mutation := newActivitiesMutation(c.config, OpCreate)
	return &ActivitiesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Activities.
func (c *ActivitiesClient) Update() *ActivitiesUpdate {
	mutation := newActivitiesMutation(c.config, OpUpdate)
	return &ActivitiesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivitiesClient) UpdateOne(a *Activities) *ActivitiesUpdateOne {
	mutation := newActivitiesMutation(c.config, OpUpdateOne, withActivities(a))
	return &ActivitiesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivitiesClient) UpdateOneID(id int) *ActivitiesUpdateOne {
	mutation := newActivitiesMutation(c.config, OpUpdateOne, withActivitiesID(id))
	return &ActivitiesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activities.
func (c *ActivitiesClient) Delete() *ActivitiesDelete {
	mutation := newActivitiesMutation(c.config, OpDelete)
	return &ActivitiesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivitiesClient) DeleteOne(a *Activities) *ActivitiesDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivitiesClient) DeleteOneID(id int) *ActivitiesDeleteOne {
	builder := c.Delete().Where(activities.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivitiesDeleteOne{builder}
}

// Create returns a query builder for Activities.
func (c *ActivitiesClient) Query() *ActivitiesQuery {
	return &ActivitiesQuery{config: c.config}
}

// Get returns a Activities entity by its id.
func (c *ActivitiesClient) Get(ctx context.Context, id int) (*Activities, error) {
	return c.Query().Where(activities.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivitiesClient) GetX(ctx context.Context, id int) *Activities {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryActivitytype queries the activitytype edge of a Activities.
func (c *ActivitiesClient) QueryActivitytype(a *Activities) *ActivityTypeQuery {
	query := &ActivityTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activities.Table, activities.FieldID, id),
			sqlgraph.To(activitytype.Table, activitytype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activities.ActivitytypeTable, activities.ActivitytypeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAcademicyear queries the academicyear edge of a Activities.
func (c *ActivitiesClient) QueryAcademicyear(a *Activities) *AcademicYearQuery {
	query := &AcademicYearQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activities.Table, activities.FieldID, id),
			sqlgraph.To(academicyear.Table, academicyear.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activities.AcademicyearTable, activities.AcademicyearColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Activities.
func (c *ActivitiesClient) QueryUser(a *Activities) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activities.Table, activities.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, activities.UserTable, activities.UserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivitiesClient) Hooks() []Hook {
	return c.hooks.Activities
}

// ActivityTypeClient is a client for the ActivityType schema.
type ActivityTypeClient struct {
	config
}

// NewActivityTypeClient returns a client for the ActivityType from the given config.
func NewActivityTypeClient(c config) *ActivityTypeClient {
	return &ActivityTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activitytype.Hooks(f(g(h())))`.
func (c *ActivityTypeClient) Use(hooks ...Hook) {
	c.hooks.ActivityType = append(c.hooks.ActivityType, hooks...)
}

// Create returns a create builder for ActivityType.
func (c *ActivityTypeClient) Create() *ActivityTypeCreate {
	mutation := newActivityTypeMutation(c.config, OpCreate)
	return &ActivityTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for ActivityType.
func (c *ActivityTypeClient) Update() *ActivityTypeUpdate {
	mutation := newActivityTypeMutation(c.config, OpUpdate)
	return &ActivityTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityTypeClient) UpdateOne(at *ActivityType) *ActivityTypeUpdateOne {
	mutation := newActivityTypeMutation(c.config, OpUpdateOne, withActivityType(at))
	return &ActivityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityTypeClient) UpdateOneID(id int) *ActivityTypeUpdateOne {
	mutation := newActivityTypeMutation(c.config, OpUpdateOne, withActivityTypeID(id))
	return &ActivityTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActivityType.
func (c *ActivityTypeClient) Delete() *ActivityTypeDelete {
	mutation := newActivityTypeMutation(c.config, OpDelete)
	return &ActivityTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ActivityTypeClient) DeleteOne(at *ActivityType) *ActivityTypeDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ActivityTypeClient) DeleteOneID(id int) *ActivityTypeDeleteOne {
	builder := c.Delete().Where(activitytype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityTypeDeleteOne{builder}
}

// Create returns a query builder for ActivityType.
func (c *ActivityTypeClient) Query() *ActivityTypeQuery {
	return &ActivityTypeQuery{config: c.config}
}

// Get returns a ActivityType entity by its id.
func (c *ActivityTypeClient) Get(ctx context.Context, id int) (*ActivityType, error) {
	return c.Query().Where(activitytype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityTypeClient) GetX(ctx context.Context, id int) *ActivityType {
	at, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return at
}

// QueryActivities queries the activities edge of a ActivityType.
func (c *ActivityTypeClient) QueryActivities(at *ActivityType) *ActivitiesQuery {
	query := &ActivitiesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activitytype.Table, activitytype.FieldID, id),
			sqlgraph.To(activities.Table, activities.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activitytype.ActivitiesTable, activitytype.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActivityTypeClient) Hooks() []Hook {
	return c.hooks.ActivityType
}

// ClubClient is a client for the Club schema.
type ClubClient struct {
	config
}

// NewClubClient returns a client for the Club from the given config.
func NewClubClient(c config) *ClubClient {
	return &ClubClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `club.Hooks(f(g(h())))`.
func (c *ClubClient) Use(hooks ...Hook) {
	c.hooks.Club = append(c.hooks.Club, hooks...)
}

// Create returns a create builder for Club.
func (c *ClubClient) Create() *ClubCreate {
	mutation := newClubMutation(c.config, OpCreate)
	return &ClubCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Club.
func (c *ClubClient) Update() *ClubUpdate {
	mutation := newClubMutation(c.config, OpUpdate)
	return &ClubUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClubClient) UpdateOne(cl *Club) *ClubUpdateOne {
	mutation := newClubMutation(c.config, OpUpdateOne, withClub(cl))
	return &ClubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClubClient) UpdateOneID(id int) *ClubUpdateOne {
	mutation := newClubMutation(c.config, OpUpdateOne, withClubID(id))
	return &ClubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Club.
func (c *ClubClient) Delete() *ClubDelete {
	mutation := newClubMutation(c.config, OpDelete)
	return &ClubDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClubClient) DeleteOne(cl *Club) *ClubDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClubClient) DeleteOneID(id int) *ClubDeleteOne {
	builder := c.Delete().Where(club.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClubDeleteOne{builder}
}

// Create returns a query builder for Club.
func (c *ClubClient) Query() *ClubQuery {
	return &ClubQuery{config: c.config}
}

// Get returns a Club entity by its id.
func (c *ClubClient) Get(ctx context.Context, id int) (*Club, error) {
	return c.Query().Where(club.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClubClient) GetX(ctx context.Context, id int) *Club {
	cl, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cl
}

// QueryUser queries the user edge of a Club.
func (c *ClubClient) QueryUser(cl *Club) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, club.UserTable, club.UserColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubtype queries the clubtype edge of a Club.
func (c *ClubClient) QueryClubtype(cl *Club) *ClubTypeQuery {
	query := &ClubTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(clubtype.Table, clubtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, club.ClubtypeTable, club.ClubtypeColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubbranch queries the clubbranch edge of a Club.
func (c *ClubClient) QueryClubbranch(cl *Club) *ClubBranchQuery {
	query := &ClubBranchQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(clubbranch.Table, clubbranch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, club.ClubbranchTable, club.ClubbranchColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubapplication queries the clubapplication edge of a Club.
func (c *ClubClient) QueryClubapplication(cl *Club) *ClubapplicationQuery {
	query := &ClubapplicationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(clubapplication.Table, clubapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, club.ClubapplicationTable, club.ClubapplicationColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubToComplaint queries the ClubToComplaint edge of a Club.
func (c *ClubClient) QueryClubToComplaint(cl *Club) *ComplaintQuery {
	query := &ComplaintQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(club.Table, club.FieldID, id),
			sqlgraph.To(complaint.Table, complaint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, club.ClubToComplaintTable, club.ClubToComplaintColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClubClient) Hooks() []Hook {
	return c.hooks.Club
}

// ClubBranchClient is a client for the ClubBranch schema.
type ClubBranchClient struct {
	config
}

// NewClubBranchClient returns a client for the ClubBranch from the given config.
func NewClubBranchClient(c config) *ClubBranchClient {
	return &ClubBranchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clubbranch.Hooks(f(g(h())))`.
func (c *ClubBranchClient) Use(hooks ...Hook) {
	c.hooks.ClubBranch = append(c.hooks.ClubBranch, hooks...)
}

// Create returns a create builder for ClubBranch.
func (c *ClubBranchClient) Create() *ClubBranchCreate {
	mutation := newClubBranchMutation(c.config, OpCreate)
	return &ClubBranchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for ClubBranch.
func (c *ClubBranchClient) Update() *ClubBranchUpdate {
	mutation := newClubBranchMutation(c.config, OpUpdate)
	return &ClubBranchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClubBranchClient) UpdateOne(cb *ClubBranch) *ClubBranchUpdateOne {
	mutation := newClubBranchMutation(c.config, OpUpdateOne, withClubBranch(cb))
	return &ClubBranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClubBranchClient) UpdateOneID(id int) *ClubBranchUpdateOne {
	mutation := newClubBranchMutation(c.config, OpUpdateOne, withClubBranchID(id))
	return &ClubBranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClubBranch.
func (c *ClubBranchClient) Delete() *ClubBranchDelete {
	mutation := newClubBranchMutation(c.config, OpDelete)
	return &ClubBranchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClubBranchClient) DeleteOne(cb *ClubBranch) *ClubBranchDeleteOne {
	return c.DeleteOneID(cb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClubBranchClient) DeleteOneID(id int) *ClubBranchDeleteOne {
	builder := c.Delete().Where(clubbranch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClubBranchDeleteOne{builder}
}

// Create returns a query builder for ClubBranch.
func (c *ClubBranchClient) Query() *ClubBranchQuery {
	return &ClubBranchQuery{config: c.config}
}

// Get returns a ClubBranch entity by its id.
func (c *ClubBranchClient) Get(ctx context.Context, id int) (*ClubBranch, error) {
	return c.Query().Where(clubbranch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClubBranchClient) GetX(ctx context.Context, id int) *ClubBranch {
	cb, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cb
}

// QueryClub queries the club edge of a ClubBranch.
func (c *ClubBranchClient) QueryClub(cb *ClubBranch) *ClubQuery {
	query := &ClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clubbranch.Table, clubbranch.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clubbranch.ClubTable, clubbranch.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(cb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClubBranchClient) Hooks() []Hook {
	return c.hooks.ClubBranch
}

// ClubTypeClient is a client for the ClubType schema.
type ClubTypeClient struct {
	config
}

// NewClubTypeClient returns a client for the ClubType from the given config.
func NewClubTypeClient(c config) *ClubTypeClient {
	return &ClubTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clubtype.Hooks(f(g(h())))`.
func (c *ClubTypeClient) Use(hooks ...Hook) {
	c.hooks.ClubType = append(c.hooks.ClubType, hooks...)
}

// Create returns a create builder for ClubType.
func (c *ClubTypeClient) Create() *ClubTypeCreate {
	mutation := newClubTypeMutation(c.config, OpCreate)
	return &ClubTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for ClubType.
func (c *ClubTypeClient) Update() *ClubTypeUpdate {
	mutation := newClubTypeMutation(c.config, OpUpdate)
	return &ClubTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClubTypeClient) UpdateOne(ct *ClubType) *ClubTypeUpdateOne {
	mutation := newClubTypeMutation(c.config, OpUpdateOne, withClubType(ct))
	return &ClubTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClubTypeClient) UpdateOneID(id int) *ClubTypeUpdateOne {
	mutation := newClubTypeMutation(c.config, OpUpdateOne, withClubTypeID(id))
	return &ClubTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClubType.
func (c *ClubTypeClient) Delete() *ClubTypeDelete {
	mutation := newClubTypeMutation(c.config, OpDelete)
	return &ClubTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClubTypeClient) DeleteOne(ct *ClubType) *ClubTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClubTypeClient) DeleteOneID(id int) *ClubTypeDeleteOne {
	builder := c.Delete().Where(clubtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClubTypeDeleteOne{builder}
}

// Create returns a query builder for ClubType.
func (c *ClubTypeClient) Query() *ClubTypeQuery {
	return &ClubTypeQuery{config: c.config}
}

// Get returns a ClubType entity by its id.
func (c *ClubTypeClient) Get(ctx context.Context, id int) (*ClubType, error) {
	return c.Query().Where(clubtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClubTypeClient) GetX(ctx context.Context, id int) *ClubType {
	ct, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ct
}

// QueryClub queries the club edge of a ClubType.
func (c *ClubTypeClient) QueryClub(ct *ClubType) *ClubQuery {
	query := &ClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clubtype.Table, clubtype.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clubtype.ClubTable, clubtype.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClubTypeClient) Hooks() []Hook {
	return c.hooks.ClubType
}

// ClubappStatusClient is a client for the ClubappStatus schema.
type ClubappStatusClient struct {
	config
}

// NewClubappStatusClient returns a client for the ClubappStatus from the given config.
func NewClubappStatusClient(c config) *ClubappStatusClient {
	return &ClubappStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clubappstatus.Hooks(f(g(h())))`.
func (c *ClubappStatusClient) Use(hooks ...Hook) {
	c.hooks.ClubappStatus = append(c.hooks.ClubappStatus, hooks...)
}

// Create returns a create builder for ClubappStatus.
func (c *ClubappStatusClient) Create() *ClubappStatusCreate {
	mutation := newClubappStatusMutation(c.config, OpCreate)
	return &ClubappStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for ClubappStatus.
func (c *ClubappStatusClient) Update() *ClubappStatusUpdate {
	mutation := newClubappStatusMutation(c.config, OpUpdate)
	return &ClubappStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClubappStatusClient) UpdateOne(cs *ClubappStatus) *ClubappStatusUpdateOne {
	mutation := newClubappStatusMutation(c.config, OpUpdateOne, withClubappStatus(cs))
	return &ClubappStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClubappStatusClient) UpdateOneID(id int) *ClubappStatusUpdateOne {
	mutation := newClubappStatusMutation(c.config, OpUpdateOne, withClubappStatusID(id))
	return &ClubappStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClubappStatus.
func (c *ClubappStatusClient) Delete() *ClubappStatusDelete {
	mutation := newClubappStatusMutation(c.config, OpDelete)
	return &ClubappStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClubappStatusClient) DeleteOne(cs *ClubappStatus) *ClubappStatusDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClubappStatusClient) DeleteOneID(id int) *ClubappStatusDeleteOne {
	builder := c.Delete().Where(clubappstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClubappStatusDeleteOne{builder}
}

// Create returns a query builder for ClubappStatus.
func (c *ClubappStatusClient) Query() *ClubappStatusQuery {
	return &ClubappStatusQuery{config: c.config}
}

// Get returns a ClubappStatus entity by its id.
func (c *ClubappStatusClient) Get(ctx context.Context, id int) (*ClubappStatus, error) {
	return c.Query().Where(clubappstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClubappStatusClient) GetX(ctx context.Context, id int) *ClubappStatus {
	cs, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cs
}

// QueryClubapplication queries the clubapplication edge of a ClubappStatus.
func (c *ClubappStatusClient) QueryClubapplication(cs *ClubappStatus) *ClubapplicationQuery {
	query := &ClubapplicationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clubappstatus.Table, clubappstatus.FieldID, id),
			sqlgraph.To(clubapplication.Table, clubapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clubappstatus.ClubapplicationTable, clubappstatus.ClubapplicationColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClubappStatusClient) Hooks() []Hook {
	return c.hooks.ClubappStatus
}

// ClubapplicationClient is a client for the Clubapplication schema.
type ClubapplicationClient struct {
	config
}

// NewClubapplicationClient returns a client for the Clubapplication from the given config.
func NewClubapplicationClient(c config) *ClubapplicationClient {
	return &ClubapplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clubapplication.Hooks(f(g(h())))`.
func (c *ClubapplicationClient) Use(hooks ...Hook) {
	c.hooks.Clubapplication = append(c.hooks.Clubapplication, hooks...)
}

// Create returns a create builder for Clubapplication.
func (c *ClubapplicationClient) Create() *ClubapplicationCreate {
	mutation := newClubapplicationMutation(c.config, OpCreate)
	return &ClubapplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Clubapplication.
func (c *ClubapplicationClient) Update() *ClubapplicationUpdate {
	mutation := newClubapplicationMutation(c.config, OpUpdate)
	return &ClubapplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClubapplicationClient) UpdateOne(cl *Clubapplication) *ClubapplicationUpdateOne {
	mutation := newClubapplicationMutation(c.config, OpUpdateOne, withClubapplication(cl))
	return &ClubapplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClubapplicationClient) UpdateOneID(id int) *ClubapplicationUpdateOne {
	mutation := newClubapplicationMutation(c.config, OpUpdateOne, withClubapplicationID(id))
	return &ClubapplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Clubapplication.
func (c *ClubapplicationClient) Delete() *ClubapplicationDelete {
	mutation := newClubapplicationMutation(c.config, OpDelete)
	return &ClubapplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClubapplicationClient) DeleteOne(cl *Clubapplication) *ClubapplicationDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClubapplicationClient) DeleteOneID(id int) *ClubapplicationDeleteOne {
	builder := c.Delete().Where(clubapplication.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClubapplicationDeleteOne{builder}
}

// Create returns a query builder for Clubapplication.
func (c *ClubapplicationClient) Query() *ClubapplicationQuery {
	return &ClubapplicationQuery{config: c.config}
}

// Get returns a Clubapplication entity by its id.
func (c *ClubapplicationClient) Get(ctx context.Context, id int) (*Clubapplication, error) {
	return c.Query().Where(clubapplication.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClubapplicationClient) GetX(ctx context.Context, id int) *Clubapplication {
	cl, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cl
}

// QueryOwner queries the owner edge of a Clubapplication.
func (c *ClubapplicationClient) QueryOwner(cl *Clubapplication) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clubapplication.Table, clubapplication.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clubapplication.OwnerTable, clubapplication.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubappstatus queries the clubappstatus edge of a Clubapplication.
func (c *ClubapplicationClient) QueryClubappstatus(cl *Clubapplication) *ClubappStatusQuery {
	query := &ClubappStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clubapplication.Table, clubapplication.FieldID, id),
			sqlgraph.To(clubappstatus.Table, clubappstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clubapplication.ClubappstatusTable, clubapplication.ClubappstatusColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClub queries the club edge of a Clubapplication.
func (c *ClubapplicationClient) QueryClub(cl *Clubapplication) *ClubQuery {
	query := &ClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clubapplication.Table, clubapplication.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clubapplication.ClubTable, clubapplication.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClubapplicationClient) Hooks() []Hook {
	return c.hooks.Clubapplication
}

// ComplaintClient is a client for the Complaint schema.
type ComplaintClient struct {
	config
}

// NewComplaintClient returns a client for the Complaint from the given config.
func NewComplaintClient(c config) *ComplaintClient {
	return &ComplaintClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `complaint.Hooks(f(g(h())))`.
func (c *ComplaintClient) Use(hooks ...Hook) {
	c.hooks.Complaint = append(c.hooks.Complaint, hooks...)
}

// Create returns a create builder for Complaint.
func (c *ComplaintClient) Create() *ComplaintCreate {
	mutation := newComplaintMutation(c.config, OpCreate)
	return &ComplaintCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Complaint.
func (c *ComplaintClient) Update() *ComplaintUpdate {
	mutation := newComplaintMutation(c.config, OpUpdate)
	return &ComplaintUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComplaintClient) UpdateOne(co *Complaint) *ComplaintUpdateOne {
	mutation := newComplaintMutation(c.config, OpUpdateOne, withComplaint(co))
	return &ComplaintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComplaintClient) UpdateOneID(id int) *ComplaintUpdateOne {
	mutation := newComplaintMutation(c.config, OpUpdateOne, withComplaintID(id))
	return &ComplaintUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Complaint.
func (c *ComplaintClient) Delete() *ComplaintDelete {
	mutation := newComplaintMutation(c.config, OpDelete)
	return &ComplaintDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ComplaintClient) DeleteOne(co *Complaint) *ComplaintDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ComplaintClient) DeleteOneID(id int) *ComplaintDeleteOne {
	builder := c.Delete().Where(complaint.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComplaintDeleteOne{builder}
}

// Create returns a query builder for Complaint.
func (c *ComplaintClient) Query() *ComplaintQuery {
	return &ComplaintQuery{config: c.config}
}

// Get returns a Complaint entity by its id.
func (c *ComplaintClient) Get(ctx context.Context, id int) (*Complaint, error) {
	return c.Query().Where(complaint.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComplaintClient) GetX(ctx context.Context, id int) *Complaint {
	co, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return co
}

// QueryComplaintToUser queries the ComplaintToUser edge of a Complaint.
func (c *ComplaintClient) QueryComplaintToUser(co *Complaint) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(complaint.Table, complaint.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, complaint.ComplaintToUserTable, complaint.ComplaintToUserColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComplaintToComplaintType queries the ComplaintToComplaintType edge of a Complaint.
func (c *ComplaintClient) QueryComplaintToComplaintType(co *Complaint) *ComplaintTypeQuery {
	query := &ComplaintTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(complaint.Table, complaint.FieldID, id),
			sqlgraph.To(complainttype.Table, complainttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, complaint.ComplaintToComplaintTypeTable, complaint.ComplaintToComplaintTypeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComplaintToClub queries the ComplaintToClub edge of a Complaint.
func (c *ComplaintClient) QueryComplaintToClub(co *Complaint) *ClubQuery {
	query := &ClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(complaint.Table, complaint.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, complaint.ComplaintToClubTable, complaint.ComplaintToClubColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ComplaintClient) Hooks() []Hook {
	return c.hooks.Complaint
}

// ComplaintTypeClient is a client for the ComplaintType schema.
type ComplaintTypeClient struct {
	config
}

// NewComplaintTypeClient returns a client for the ComplaintType from the given config.
func NewComplaintTypeClient(c config) *ComplaintTypeClient {
	return &ComplaintTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `complainttype.Hooks(f(g(h())))`.
func (c *ComplaintTypeClient) Use(hooks ...Hook) {
	c.hooks.ComplaintType = append(c.hooks.ComplaintType, hooks...)
}

// Create returns a create builder for ComplaintType.
func (c *ComplaintTypeClient) Create() *ComplaintTypeCreate {
	mutation := newComplaintTypeMutation(c.config, OpCreate)
	return &ComplaintTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for ComplaintType.
func (c *ComplaintTypeClient) Update() *ComplaintTypeUpdate {
	mutation := newComplaintTypeMutation(c.config, OpUpdate)
	return &ComplaintTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComplaintTypeClient) UpdateOne(ct *ComplaintType) *ComplaintTypeUpdateOne {
	mutation := newComplaintTypeMutation(c.config, OpUpdateOne, withComplaintType(ct))
	return &ComplaintTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComplaintTypeClient) UpdateOneID(id int) *ComplaintTypeUpdateOne {
	mutation := newComplaintTypeMutation(c.config, OpUpdateOne, withComplaintTypeID(id))
	return &ComplaintTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ComplaintType.
func (c *ComplaintTypeClient) Delete() *ComplaintTypeDelete {
	mutation := newComplaintTypeMutation(c.config, OpDelete)
	return &ComplaintTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ComplaintTypeClient) DeleteOne(ct *ComplaintType) *ComplaintTypeDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ComplaintTypeClient) DeleteOneID(id int) *ComplaintTypeDeleteOne {
	builder := c.Delete().Where(complainttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComplaintTypeDeleteOne{builder}
}

// Create returns a query builder for ComplaintType.
func (c *ComplaintTypeClient) Query() *ComplaintTypeQuery {
	return &ComplaintTypeQuery{config: c.config}
}

// Get returns a ComplaintType entity by its id.
func (c *ComplaintTypeClient) Get(ctx context.Context, id int) (*ComplaintType, error) {
	return c.Query().Where(complainttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComplaintTypeClient) GetX(ctx context.Context, id int) *ComplaintType {
	ct, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ct
}

// QueryComplaintTypeToComplaint queries the ComplaintTypeToComplaint edge of a ComplaintType.
func (c *ComplaintTypeClient) QueryComplaintTypeToComplaint(ct *ComplaintType) *ComplaintQuery {
	query := &ComplaintQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(complainttype.Table, complainttype.FieldID, id),
			sqlgraph.To(complaint.Table, complaint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, complainttype.ComplaintTypeToComplaintTable, complainttype.ComplaintTypeToComplaintColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ComplaintTypeClient) Hooks() []Hook {
	return c.hooks.ComplaintType
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Create returns a create builder for Room.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id int) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomClient) DeleteOneID(id int) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Create returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{config: c.config}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id int) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id int) *Room {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRoomuses queries the roomuses edge of a Room.
func (c *RoomClient) QueryRoomuses(r *Room) *RoomuseQuery {
	query := &RoomuseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roomuse.Table, roomuse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.RoomusesTable, room.RoomusesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// RoompurposeClient is a client for the Roompurpose schema.
type RoompurposeClient struct {
	config
}

// NewRoompurposeClient returns a client for the Roompurpose from the given config.
func NewRoompurposeClient(c config) *RoompurposeClient {
	return &RoompurposeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roompurpose.Hooks(f(g(h())))`.
func (c *RoompurposeClient) Use(hooks ...Hook) {
	c.hooks.Roompurpose = append(c.hooks.Roompurpose, hooks...)
}

// Create returns a create builder for Roompurpose.
func (c *RoompurposeClient) Create() *RoompurposeCreate {
	mutation := newRoompurposeMutation(c.config, OpCreate)
	return &RoompurposeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Roompurpose.
func (c *RoompurposeClient) Update() *RoompurposeUpdate {
	mutation := newRoompurposeMutation(c.config, OpUpdate)
	return &RoompurposeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoompurposeClient) UpdateOne(r *Roompurpose) *RoompurposeUpdateOne {
	mutation := newRoompurposeMutation(c.config, OpUpdateOne, withRoompurpose(r))
	return &RoompurposeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoompurposeClient) UpdateOneID(id int) *RoompurposeUpdateOne {
	mutation := newRoompurposeMutation(c.config, OpUpdateOne, withRoompurposeID(id))
	return &RoompurposeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Roompurpose.
func (c *RoompurposeClient) Delete() *RoompurposeDelete {
	mutation := newRoompurposeMutation(c.config, OpDelete)
	return &RoompurposeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoompurposeClient) DeleteOne(r *Roompurpose) *RoompurposeDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoompurposeClient) DeleteOneID(id int) *RoompurposeDeleteOne {
	builder := c.Delete().Where(roompurpose.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoompurposeDeleteOne{builder}
}

// Create returns a query builder for Roompurpose.
func (c *RoompurposeClient) Query() *RoompurposeQuery {
	return &RoompurposeQuery{config: c.config}
}

// Get returns a Roompurpose entity by its id.
func (c *RoompurposeClient) Get(ctx context.Context, id int) (*Roompurpose, error) {
	return c.Query().Where(roompurpose.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoompurposeClient) GetX(ctx context.Context, id int) *Roompurpose {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRoompurpose queries the roompurpose edge of a Roompurpose.
func (c *RoompurposeClient) QueryRoompurpose(r *Roompurpose) *RoomuseQuery {
	query := &RoomuseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roompurpose.Table, roompurpose.FieldID, id),
			sqlgraph.To(roomuse.Table, roomuse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roompurpose.RoompurposeTable, roompurpose.RoompurposeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoompurposeClient) Hooks() []Hook {
	return c.hooks.Roompurpose
}

// RoomuseClient is a client for the Roomuse schema.
type RoomuseClient struct {
	config
}

// NewRoomuseClient returns a client for the Roomuse from the given config.
func NewRoomuseClient(c config) *RoomuseClient {
	return &RoomuseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomuse.Hooks(f(g(h())))`.
func (c *RoomuseClient) Use(hooks ...Hook) {
	c.hooks.Roomuse = append(c.hooks.Roomuse, hooks...)
}

// Create returns a create builder for Roomuse.
func (c *RoomuseClient) Create() *RoomuseCreate {
	mutation := newRoomuseMutation(c.config, OpCreate)
	return &RoomuseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Roomuse.
func (c *RoomuseClient) Update() *RoomuseUpdate {
	mutation := newRoomuseMutation(c.config, OpUpdate)
	return &RoomuseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomuseClient) UpdateOne(r *Roomuse) *RoomuseUpdateOne {
	mutation := newRoomuseMutation(c.config, OpUpdateOne, withRoomuse(r))
	return &RoomuseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomuseClient) UpdateOneID(id int) *RoomuseUpdateOne {
	mutation := newRoomuseMutation(c.config, OpUpdateOne, withRoomuseID(id))
	return &RoomuseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Roomuse.
func (c *RoomuseClient) Delete() *RoomuseDelete {
	mutation := newRoomuseMutation(c.config, OpDelete)
	return &RoomuseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomuseClient) DeleteOne(r *Roomuse) *RoomuseDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomuseClient) DeleteOneID(id int) *RoomuseDeleteOne {
	builder := c.Delete().Where(roomuse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomuseDeleteOne{builder}
}

// Create returns a query builder for Roomuse.
func (c *RoomuseClient) Query() *RoomuseQuery {
	return &RoomuseQuery{config: c.config}
}

// Get returns a Roomuse entity by its id.
func (c *RoomuseClient) Get(ctx context.Context, id int) (*Roomuse, error) {
	return c.Query().Where(roomuse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomuseClient) GetX(ctx context.Context, id int) *Roomuse {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRooms queries the rooms edge of a Roomuse.
func (c *RoomuseClient) QueryRooms(r *Roomuse) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomuse.Table, roomuse.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roomuse.RoomsTable, roomuse.RoomsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPurposes queries the purposes edge of a Roomuse.
func (c *RoomuseClient) QueryPurposes(r *Roomuse) *RoompurposeQuery {
	query := &RoompurposeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomuse.Table, roomuse.FieldID, id),
			sqlgraph.To(roompurpose.Table, roompurpose.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roomuse.PurposesTable, roomuse.PurposesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a Roomuse.
func (c *RoomuseClient) QueryUsers(r *Roomuse) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomuse.Table, roomuse.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, roomuse.UsersTable, roomuse.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomuseClient) Hooks() []Hook {
	return c.hooks.Roomuse
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryUsertype queries the usertype edge of a User.
func (c *UserClient) QueryUsertype(u *User) *UsertypeQuery {
	query := &UsertypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usertype.Table, usertype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.UsertypeTable, user.UsertypeColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClub queries the club edge of a User.
func (c *UserClient) QueryClub(u *User) *ClubQuery {
	query := &ClubQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(club.Table, club.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ClubTable, user.ClubColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActivities queries the activities edge of a User.
func (c *UserClient) QueryActivities(u *User) *ActivitiesQuery {
	query := &ActivitiesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(activities.Table, activities.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ActivitiesTable, user.ActivitiesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryClubapplication queries the clubapplication edge of a User.
func (c *UserClient) QueryClubapplication(u *User) *ClubapplicationQuery {
	query := &ClubapplicationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(clubapplication.Table, clubapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ClubapplicationTable, user.ClubapplicationColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserToComplaint queries the UserToComplaint edge of a User.
func (c *UserClient) QueryUserToComplaint(u *User) *ComplaintQuery {
	query := &ComplaintQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(complaint.Table, complaint.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserToComplaintTable, user.UserToComplaintColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomuse queries the Roomuse edge of a User.
func (c *UserClient) QueryRoomuse(u *User) *RoomuseQuery {
	query := &RoomuseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(roomuse.Table, roomuse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RoomuseTable, user.RoomuseColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UsertypeClient is a client for the Usertype schema.
type UsertypeClient struct {
	config
}

// NewUsertypeClient returns a client for the Usertype from the given config.
func NewUsertypeClient(c config) *UsertypeClient {
	return &UsertypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usertype.Hooks(f(g(h())))`.
func (c *UsertypeClient) Use(hooks ...Hook) {
	c.hooks.Usertype = append(c.hooks.Usertype, hooks...)
}

// Create returns a create builder for Usertype.
func (c *UsertypeClient) Create() *UsertypeCreate {
	mutation := newUsertypeMutation(c.config, OpCreate)
	return &UsertypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Usertype.
func (c *UsertypeClient) Update() *UsertypeUpdate {
	mutation := newUsertypeMutation(c.config, OpUpdate)
	return &UsertypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UsertypeClient) UpdateOne(u *Usertype) *UsertypeUpdateOne {
	mutation := newUsertypeMutation(c.config, OpUpdateOne, withUsertype(u))
	return &UsertypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UsertypeClient) UpdateOneID(id int) *UsertypeUpdateOne {
	mutation := newUsertypeMutation(c.config, OpUpdateOne, withUsertypeID(id))
	return &UsertypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Usertype.
func (c *UsertypeClient) Delete() *UsertypeDelete {
	mutation := newUsertypeMutation(c.config, OpDelete)
	return &UsertypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UsertypeClient) DeleteOne(u *Usertype) *UsertypeDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UsertypeClient) DeleteOneID(id int) *UsertypeDeleteOne {
	builder := c.Delete().Where(usertype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UsertypeDeleteOne{builder}
}

// Create returns a query builder for Usertype.
func (c *UsertypeClient) Query() *UsertypeQuery {
	return &UsertypeQuery{config: c.config}
}

// Get returns a Usertype entity by its id.
func (c *UsertypeClient) Get(ctx context.Context, id int) (*Usertype, error) {
	return c.Query().Where(usertype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UsertypeClient) GetX(ctx context.Context, id int) *Usertype {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryUser queries the user edge of a Usertype.
func (c *UsertypeClient) QueryUser(u *Usertype) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usertype.Table, usertype.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, usertype.UserTable, usertype.UserColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UsertypeClient) Hooks() []Hook {
	return c.hooks.Usertype
}
