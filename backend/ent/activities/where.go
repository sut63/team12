// Code generated by entc, DO NOT EDIT.

package activities

import (
	"time"

	"github.com/OMENX/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// Starttime applies equality check predicate on the "starttime" field. It's identical to StarttimeEQ.
func Starttime(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStarttime), v))
	})
}

// Endtime applies equality check predicate on the "endtime" field. It's identical to EndtimeEQ.
func Endtime(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndtime), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Activities {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activities(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Activities {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activities(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetail), v))
	})
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Activities {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activities(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDetail), v...))
	})
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Activities {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activities(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDetail), v...))
	})
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetail), v))
	})
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetail), v))
	})
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetail), v))
	})
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetail), v))
	})
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetail), v))
	})
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetail), v))
	})
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetail), v))
	})
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetail), v))
	})
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetail), v))
	})
}

// StarttimeEQ applies the EQ predicate on the "starttime" field.
func StarttimeEQ(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStarttime), v))
	})
}

// StarttimeNEQ applies the NEQ predicate on the "starttime" field.
func StarttimeNEQ(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStarttime), v))
	})
}

// StarttimeIn applies the In predicate on the "starttime" field.
func StarttimeIn(vs ...time.Time) predicate.Activities {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activities(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStarttime), v...))
	})
}

// StarttimeNotIn applies the NotIn predicate on the "starttime" field.
func StarttimeNotIn(vs ...time.Time) predicate.Activities {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activities(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStarttime), v...))
	})
}

// StarttimeGT applies the GT predicate on the "starttime" field.
func StarttimeGT(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStarttime), v))
	})
}

// StarttimeGTE applies the GTE predicate on the "starttime" field.
func StarttimeGTE(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStarttime), v))
	})
}

// StarttimeLT applies the LT predicate on the "starttime" field.
func StarttimeLT(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStarttime), v))
	})
}

// StarttimeLTE applies the LTE predicate on the "starttime" field.
func StarttimeLTE(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStarttime), v))
	})
}

// EndtimeEQ applies the EQ predicate on the "endtime" field.
func EndtimeEQ(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndtime), v))
	})
}

// EndtimeNEQ applies the NEQ predicate on the "endtime" field.
func EndtimeNEQ(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndtime), v))
	})
}

// EndtimeIn applies the In predicate on the "endtime" field.
func EndtimeIn(vs ...time.Time) predicate.Activities {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activities(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndtime), v...))
	})
}

// EndtimeNotIn applies the NotIn predicate on the "endtime" field.
func EndtimeNotIn(vs ...time.Time) predicate.Activities {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Activities(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndtime), v...))
	})
}

// EndtimeGT applies the GT predicate on the "endtime" field.
func EndtimeGT(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndtime), v))
	})
}

// EndtimeGTE applies the GTE predicate on the "endtime" field.
func EndtimeGTE(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndtime), v))
	})
}

// EndtimeLT applies the LT predicate on the "endtime" field.
func EndtimeLT(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndtime), v))
	})
}

// EndtimeLTE applies the LTE predicate on the "endtime" field.
func EndtimeLTE(v time.Time) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndtime), v))
	})
}

// HasActivitytype applies the HasEdge predicate on the "activitytype" edge.
func HasActivitytype() predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActivitytypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActivitytypeTable, ActivitytypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActivitytypeWith applies the HasEdge predicate on the "activitytype" edge with a given conditions (other predicates).
func HasActivitytypeWith(preds ...predicate.ActivityType) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ActivitytypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActivitytypeTable, ActivitytypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAcademicyear applies the HasEdge predicate on the "academicyear" edge.
func HasAcademicyear() predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AcademicyearTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AcademicyearTable, AcademicyearColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAcademicyearWith applies the HasEdge predicate on the "academicyear" edge with a given conditions (other predicates).
func HasAcademicyearWith(preds ...predicate.AcademicYear) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AcademicyearInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AcademicyearTable, AcademicyearColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClub applies the HasEdge predicate on the "club" edge.
func HasClub() predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClubTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClubTable, ClubColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClubWith applies the HasEdge predicate on the "club" edge with a given conditions (other predicates).
func HasClubWith(preds ...predicate.Club) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClubInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClubTable, ClubColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Activities) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Activities) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Activities) predicate.Activities {
	return predicate.Activities(func(s *sql.Selector) {
		p(s.Not())
	})
}
