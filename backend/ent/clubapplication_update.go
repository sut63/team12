// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/OMENX/app/ent/club"
	"github.com/OMENX/app/ent/clubapplication"
	"github.com/OMENX/app/ent/clubappstatus"
	"github.com/OMENX/app/ent/predicate"
	"github.com/OMENX/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ClubapplicationUpdate is the builder for updating Clubapplication entities.
type ClubapplicationUpdate struct {
	config
	hooks      []Hook
	mutation   *ClubapplicationMutation
	predicates []predicate.Clubapplication
}

// Where adds a new predicate for the builder.
func (cu *ClubapplicationUpdate) Where(ps ...predicate.Clubapplication) *ClubapplicationUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetApplyname sets the applyname field.
func (cu *ClubapplicationUpdate) SetApplyname(s string) *ClubapplicationUpdate {
	cu.mutation.SetApplyname(s)
	return cu
}

// SetContact sets the contact field.
func (cu *ClubapplicationUpdate) SetContact(s string) *ClubapplicationUpdate {
	cu.mutation.SetContact(s)
	return cu
}

// SetReason sets the reason field.
func (cu *ClubapplicationUpdate) SetReason(s string) *ClubapplicationUpdate {
	cu.mutation.SetReason(s)
	return cu
}

// SetCreatedAt sets the created_at field.
func (cu *ClubapplicationUpdate) SetCreatedAt(t time.Time) *ClubapplicationUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (cu *ClubapplicationUpdate) SetNillableCreatedAt(t *time.Time) *ClubapplicationUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetOwnerID sets the owner edge to User by id.
func (cu *ClubapplicationUpdate) SetOwnerID(id int) *ClubapplicationUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (cu *ClubapplicationUpdate) SetNillableOwnerID(id *int) *ClubapplicationUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the owner edge to User.
func (cu *ClubapplicationUpdate) SetOwner(u *User) *ClubapplicationUpdate {
	return cu.SetOwnerID(u.ID)
}

// SetClubappstatusID sets the clubappstatus edge to ClubappStatus by id.
func (cu *ClubapplicationUpdate) SetClubappstatusID(id int) *ClubapplicationUpdate {
	cu.mutation.SetClubappstatusID(id)
	return cu
}

// SetNillableClubappstatusID sets the clubappstatus edge to ClubappStatus by id if the given value is not nil.
func (cu *ClubapplicationUpdate) SetNillableClubappstatusID(id *int) *ClubapplicationUpdate {
	if id != nil {
		cu = cu.SetClubappstatusID(*id)
	}
	return cu
}

// SetClubappstatus sets the clubappstatus edge to ClubappStatus.
func (cu *ClubapplicationUpdate) SetClubappstatus(c *ClubappStatus) *ClubapplicationUpdate {
	return cu.SetClubappstatusID(c.ID)
}

// SetClubID sets the club edge to Club by id.
func (cu *ClubapplicationUpdate) SetClubID(id int) *ClubapplicationUpdate {
	cu.mutation.SetClubID(id)
	return cu
}

// SetNillableClubID sets the club edge to Club by id if the given value is not nil.
func (cu *ClubapplicationUpdate) SetNillableClubID(id *int) *ClubapplicationUpdate {
	if id != nil {
		cu = cu.SetClubID(*id)
	}
	return cu
}

// SetClub sets the club edge to Club.
func (cu *ClubapplicationUpdate) SetClub(c *Club) *ClubapplicationUpdate {
	return cu.SetClubID(c.ID)
}

// Mutation returns the ClubapplicationMutation object of the builder.
func (cu *ClubapplicationUpdate) Mutation() *ClubapplicationMutation {
	return cu.mutation
}

// ClearOwner clears the owner edge to User.
func (cu *ClubapplicationUpdate) ClearOwner() *ClubapplicationUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearClubappstatus clears the clubappstatus edge to ClubappStatus.
func (cu *ClubapplicationUpdate) ClearClubappstatus() *ClubapplicationUpdate {
	cu.mutation.ClearClubappstatus()
	return cu
}

// ClearClub clears the club edge to Club.
func (cu *ClubapplicationUpdate) ClearClub() *ClubapplicationUpdate {
	cu.mutation.ClearClub()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ClubapplicationUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := cu.mutation.Applyname(); ok {
		if err := clubapplication.ApplynameValidator(v); err != nil {
			return 0, &ValidationError{Name: "applyname", err: fmt.Errorf("ent: validator failed for field \"applyname\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubapplicationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClubapplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClubapplicationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClubapplicationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClubapplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   clubapplication.Table,
			Columns: clubapplication.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: clubapplication.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Applyname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldApplyname,
		})
	}
	if value, ok := cu.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldContact,
		})
	}
	if value, ok := cu.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldReason,
		})
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: clubapplication.FieldCreatedAt,
		})
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.OwnerTable,
			Columns: []string{clubapplication.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.OwnerTable,
			Columns: []string{clubapplication.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClubappstatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.ClubappstatusTable,
			Columns: []string{clubapplication.ClubappstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubappstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClubappstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.ClubappstatusTable,
			Columns: []string{clubapplication.ClubappstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubappstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.ClubTable,
			Columns: []string{clubapplication.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.ClubTable,
			Columns: []string{clubapplication.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clubapplication.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClubapplicationUpdateOne is the builder for updating a single Clubapplication entity.
type ClubapplicationUpdateOne struct {
	config
	hooks    []Hook
	mutation *ClubapplicationMutation
}

// SetApplyname sets the applyname field.
func (cuo *ClubapplicationUpdateOne) SetApplyname(s string) *ClubapplicationUpdateOne {
	cuo.mutation.SetApplyname(s)
	return cuo
}

// SetContact sets the contact field.
func (cuo *ClubapplicationUpdateOne) SetContact(s string) *ClubapplicationUpdateOne {
	cuo.mutation.SetContact(s)
	return cuo
}

// SetReason sets the reason field.
func (cuo *ClubapplicationUpdateOne) SetReason(s string) *ClubapplicationUpdateOne {
	cuo.mutation.SetReason(s)
	return cuo
}

// SetCreatedAt sets the created_at field.
func (cuo *ClubapplicationUpdateOne) SetCreatedAt(t time.Time) *ClubapplicationUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (cuo *ClubapplicationUpdateOne) SetNillableCreatedAt(t *time.Time) *ClubapplicationUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetOwnerID sets the owner edge to User by id.
func (cuo *ClubapplicationUpdateOne) SetOwnerID(id int) *ClubapplicationUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (cuo *ClubapplicationUpdateOne) SetNillableOwnerID(id *int) *ClubapplicationUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the owner edge to User.
func (cuo *ClubapplicationUpdateOne) SetOwner(u *User) *ClubapplicationUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// SetClubappstatusID sets the clubappstatus edge to ClubappStatus by id.
func (cuo *ClubapplicationUpdateOne) SetClubappstatusID(id int) *ClubapplicationUpdateOne {
	cuo.mutation.SetClubappstatusID(id)
	return cuo
}

// SetNillableClubappstatusID sets the clubappstatus edge to ClubappStatus by id if the given value is not nil.
func (cuo *ClubapplicationUpdateOne) SetNillableClubappstatusID(id *int) *ClubapplicationUpdateOne {
	if id != nil {
		cuo = cuo.SetClubappstatusID(*id)
	}
	return cuo
}

// SetClubappstatus sets the clubappstatus edge to ClubappStatus.
func (cuo *ClubapplicationUpdateOne) SetClubappstatus(c *ClubappStatus) *ClubapplicationUpdateOne {
	return cuo.SetClubappstatusID(c.ID)
}

// SetClubID sets the club edge to Club by id.
func (cuo *ClubapplicationUpdateOne) SetClubID(id int) *ClubapplicationUpdateOne {
	cuo.mutation.SetClubID(id)
	return cuo
}

// SetNillableClubID sets the club edge to Club by id if the given value is not nil.
func (cuo *ClubapplicationUpdateOne) SetNillableClubID(id *int) *ClubapplicationUpdateOne {
	if id != nil {
		cuo = cuo.SetClubID(*id)
	}
	return cuo
}

// SetClub sets the club edge to Club.
func (cuo *ClubapplicationUpdateOne) SetClub(c *Club) *ClubapplicationUpdateOne {
	return cuo.SetClubID(c.ID)
}

// Mutation returns the ClubapplicationMutation object of the builder.
func (cuo *ClubapplicationUpdateOne) Mutation() *ClubapplicationMutation {
	return cuo.mutation
}

// ClearOwner clears the owner edge to User.
func (cuo *ClubapplicationUpdateOne) ClearOwner() *ClubapplicationUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearClubappstatus clears the clubappstatus edge to ClubappStatus.
func (cuo *ClubapplicationUpdateOne) ClearClubappstatus() *ClubapplicationUpdateOne {
	cuo.mutation.ClearClubappstatus()
	return cuo
}

// ClearClub clears the club edge to Club.
func (cuo *ClubapplicationUpdateOne) ClearClub() *ClubapplicationUpdateOne {
	cuo.mutation.ClearClub()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *ClubapplicationUpdateOne) Save(ctx context.Context) (*Clubapplication, error) {
	if v, ok := cuo.mutation.Applyname(); ok {
		if err := clubapplication.ApplynameValidator(v); err != nil {
			return nil, &ValidationError{Name: "applyname", err: fmt.Errorf("ent: validator failed for field \"applyname\": %w", err)}
		}
	}

	var (
		err  error
		node *Clubapplication
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClubapplicationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClubapplicationUpdateOne) SaveX(ctx context.Context) *Clubapplication {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ClubapplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClubapplicationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClubapplicationUpdateOne) sqlSave(ctx context.Context) (c *Clubapplication, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   clubapplication.Table,
			Columns: clubapplication.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: clubapplication.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Clubapplication.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Applyname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldApplyname,
		})
	}
	if value, ok := cuo.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldContact,
		})
	}
	if value, ok := cuo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: clubapplication.FieldReason,
		})
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: clubapplication.FieldCreatedAt,
		})
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.OwnerTable,
			Columns: []string{clubapplication.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.OwnerTable,
			Columns: []string{clubapplication.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClubappstatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.ClubappstatusTable,
			Columns: []string{clubapplication.ClubappstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubappstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClubappstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.ClubappstatusTable,
			Columns: []string{clubapplication.ClubappstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clubappstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.ClubTable,
			Columns: []string{clubapplication.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   clubapplication.ClubTable,
			Columns: []string{clubapplication.ClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Clubapplication{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clubapplication.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
