// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/OMENX/app/ent/roompurpose"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Roompurpose is the model entity for the Roompurpose schema.
type Roompurpose struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Purpose holds the value of the "purpose" field.
	Purpose string `json:"purpose,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoompurposeQuery when eager-loading is set.
	Edges RoompurposeEdges `json:"edges"`
}

// RoompurposeEdges holds the relations/edges for other nodes in the graph.
type RoompurposeEdges struct {
	// Roompurpose holds the value of the roompurpose edge.
	Roompurpose []*Roomuse
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoompurposeOrErr returns the Roompurpose value or an error if the edge
// was not loaded in eager-loading.
func (e RoompurposeEdges) RoompurposeOrErr() ([]*Roomuse, error) {
	if e.loadedTypes[0] {
		return e.Roompurpose, nil
	}
	return nil, &NotLoadedError{edge: "roompurpose"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Roompurpose) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // purpose
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Roompurpose fields.
func (r *Roompurpose) assignValues(values ...interface{}) error {
	if m, n := len(values), len(roompurpose.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field purpose", values[0])
	} else if value.Valid {
		r.Purpose = value.String
	}
	return nil
}

// QueryRoompurpose queries the roompurpose edge of the Roompurpose.
func (r *Roompurpose) QueryRoompurpose() *RoomuseQuery {
	return (&RoompurposeClient{config: r.config}).QueryRoompurpose(r)
}

// Update returns a builder for updating this Roompurpose.
// Note that, you need to call Roompurpose.Unwrap() before calling this method, if this Roompurpose
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Roompurpose) Update() *RoompurposeUpdateOne {
	return (&RoompurposeClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Roompurpose) Unwrap() *Roompurpose {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Roompurpose is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Roompurpose) String() string {
	var builder strings.Builder
	builder.WriteString("Roompurpose(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", purpose=")
	builder.WriteString(r.Purpose)
	builder.WriteByte(')')
	return builder.String()
}

// Roompurposes is a parsable slice of Roompurpose.
type Roompurposes []*Roompurpose

func (r Roompurposes) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
