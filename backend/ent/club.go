// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/OMENX/app/ent/club"
	"github.com/OMENX/app/ent/clubbranch"
	"github.com/OMENX/app/ent/clubtype"
	"github.com/OMENX/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Club is the model entity for the Club schema.
type Club struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Purpose holds the value of the "purpose" field.
	Purpose string `json:"purpose,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClubQuery when eager-loading is set.
	Edges         ClubEdges `json:"edges"`
	ClubBranch_ID *int
	ClubType_ID   *int
	UserID        *int
}

// ClubEdges holds the relations/edges for other nodes in the graph.
type ClubEdges struct {
	// User holds the value of the user edge.
	User *User
	// Clubtype holds the value of the clubtype edge.
	Clubtype *ClubType
	// Clubbranch holds the value of the clubbranch edge.
	Clubbranch *ClubBranch
	// Clubapplication holds the value of the clubapplication edge.
	Clubapplication []*Clubapplication
	// ClubToComplaint holds the value of the ClubToComplaint edge.
	ClubToComplaint []*Complaint
	// Activities holds the value of the activities edge.
	Activities []*Activities
	// Userclub holds the value of the userclub edge.
	Userclub []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClubEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ClubtypeOrErr returns the Clubtype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClubEdges) ClubtypeOrErr() (*ClubType, error) {
	if e.loadedTypes[1] {
		if e.Clubtype == nil {
			// The edge clubtype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: clubtype.Label}
		}
		return e.Clubtype, nil
	}
	return nil, &NotLoadedError{edge: "clubtype"}
}

// ClubbranchOrErr returns the Clubbranch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClubEdges) ClubbranchOrErr() (*ClubBranch, error) {
	if e.loadedTypes[2] {
		if e.Clubbranch == nil {
			// The edge clubbranch was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: clubbranch.Label}
		}
		return e.Clubbranch, nil
	}
	return nil, &NotLoadedError{edge: "clubbranch"}
}

// ClubapplicationOrErr returns the Clubapplication value or an error if the edge
// was not loaded in eager-loading.
func (e ClubEdges) ClubapplicationOrErr() ([]*Clubapplication, error) {
	if e.loadedTypes[3] {
		return e.Clubapplication, nil
	}
	return nil, &NotLoadedError{edge: "clubapplication"}
}

// ClubToComplaintOrErr returns the ClubToComplaint value or an error if the edge
// was not loaded in eager-loading.
func (e ClubEdges) ClubToComplaintOrErr() ([]*Complaint, error) {
	if e.loadedTypes[4] {
		return e.ClubToComplaint, nil
	}
	return nil, &NotLoadedError{edge: "ClubToComplaint"}
}

// ActivitiesOrErr returns the Activities value or an error if the edge
// was not loaded in eager-loading.
func (e ClubEdges) ActivitiesOrErr() ([]*Activities, error) {
	if e.loadedTypes[5] {
		return e.Activities, nil
	}
	return nil, &NotLoadedError{edge: "activities"}
}

// UserclubOrErr returns the Userclub value or an error if the edge
// was not loaded in eager-loading.
func (e ClubEdges) UserclubOrErr() ([]*User, error) {
	if e.loadedTypes[6] {
		return e.Userclub, nil
	}
	return nil, &NotLoadedError{edge: "userclub"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Club) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // purpose
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Club) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // ClubBranch_ID
		&sql.NullInt64{}, // ClubType_ID
		&sql.NullInt64{}, // UserID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Club fields.
func (c *Club) assignValues(values ...interface{}) error {
	if m, n := len(values), len(club.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field purpose", values[1])
	} else if value.Valid {
		c.Purpose = value.String
	}
	values = values[2:]
	if len(values) == len(club.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field ClubBranch_ID", value)
		} else if value.Valid {
			c.ClubBranch_ID = new(int)
			*c.ClubBranch_ID = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field ClubType_ID", value)
		} else if value.Valid {
			c.ClubType_ID = new(int)
			*c.ClubType_ID = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field UserID", value)
		} else if value.Valid {
			c.UserID = new(int)
			*c.UserID = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Club.
func (c *Club) QueryUser() *UserQuery {
	return (&ClubClient{config: c.config}).QueryUser(c)
}

// QueryClubtype queries the clubtype edge of the Club.
func (c *Club) QueryClubtype() *ClubTypeQuery {
	return (&ClubClient{config: c.config}).QueryClubtype(c)
}

// QueryClubbranch queries the clubbranch edge of the Club.
func (c *Club) QueryClubbranch() *ClubBranchQuery {
	return (&ClubClient{config: c.config}).QueryClubbranch(c)
}

// QueryClubapplication queries the clubapplication edge of the Club.
func (c *Club) QueryClubapplication() *ClubapplicationQuery {
	return (&ClubClient{config: c.config}).QueryClubapplication(c)
}

// QueryClubToComplaint queries the ClubToComplaint edge of the Club.
func (c *Club) QueryClubToComplaint() *ComplaintQuery {
	return (&ClubClient{config: c.config}).QueryClubToComplaint(c)
}

// QueryActivities queries the activities edge of the Club.
func (c *Club) QueryActivities() *ActivitiesQuery {
	return (&ClubClient{config: c.config}).QueryActivities(c)
}

// QueryUserclub queries the userclub edge of the Club.
func (c *Club) QueryUserclub() *UserQuery {
	return (&ClubClient{config: c.config}).QueryUserclub(c)
}

// Update returns a builder for updating this Club.
// Note that, you need to call Club.Unwrap() before calling this method, if this Club
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Club) Update() *ClubUpdateOne {
	return (&ClubClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Club) Unwrap() *Club {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Club is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Club) String() string {
	var builder strings.Builder
	builder.WriteString("Club(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", purpose=")
	builder.WriteString(c.Purpose)
	builder.WriteByte(')')
	return builder.String()
}

// Clubs is a parsable slice of Club.
type Clubs []*Club

func (c Clubs) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
