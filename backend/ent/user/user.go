// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"

	// EdgeUsertype holds the string denoting the usertype edge name in mutations.
	EdgeUsertype = "usertype"
	// EdgeFromClub holds the string denoting the fromclub edge name in mutations.
	EdgeFromClub = "FromClub"
	// EdgeGender holds the string denoting the gender edge name in mutations.
	EdgeGender = "gender"
	// EdgeUserstatus holds the string denoting the userstatus edge name in mutations.
	EdgeUserstatus = "userstatus"
	// EdgeDiscipline holds the string denoting the discipline edge name in mutations.
	EdgeDiscipline = "discipline"
	// EdgeYear holds the string denoting the year edge name in mutations.
	EdgeYear = "year"
	// EdgeClub holds the string denoting the club edge name in mutations.
	EdgeClub = "club"
	// EdgeClubapplication holds the string denoting the clubapplication edge name in mutations.
	EdgeClubapplication = "clubapplication"
	// EdgeUserToComplaint holds the string denoting the usertocomplaint edge name in mutations.
	EdgeUserToComplaint = "UserToComplaint"
	// EdgeRoomuse holds the string denoting the roomuse edge name in mutations.
	EdgeRoomuse = "Roomuse"

	// Table holds the table name of the user in the database.
	Table = "users"
	// UsertypeTable is the table the holds the usertype relation/edge.
	UsertypeTable = "users"
	// UsertypeInverseTable is the table name for the Usertype entity.
	// It exists in this package in order to avoid circular dependency with the "usertype" package.
	UsertypeInverseTable = "usertypes"
	// UsertypeColumn is the table column denoting the usertype relation/edge.
	UsertypeColumn = "UserTypeID"
	// FromClubTable is the table the holds the FromClub relation/edge.
	FromClubTable = "users"
	// FromClubInverseTable is the table name for the Club entity.
	// It exists in this package in order to avoid circular dependency with the "club" package.
	FromClubInverseTable = "clubs"
	// FromClubColumn is the table column denoting the FromClub relation/edge.
	FromClubColumn = "ClubID"
	// GenderTable is the table the holds the gender relation/edge.
	GenderTable = "users"
	// GenderInverseTable is the table name for the Gender entity.
	// It exists in this package in order to avoid circular dependency with the "gender" package.
	GenderInverseTable = "genders"
	// GenderColumn is the table column denoting the gender relation/edge.
	GenderColumn = "gender_id"
	// UserstatusTable is the table the holds the userstatus relation/edge.
	UserstatusTable = "users"
	// UserstatusInverseTable is the table name for the UserStatus entity.
	// It exists in this package in order to avoid circular dependency with the "userstatus" package.
	UserstatusInverseTable = "user_status"
	// UserstatusColumn is the table column denoting the userstatus relation/edge.
	UserstatusColumn = "userstatus_id"
	// DisciplineTable is the table the holds the discipline relation/edge.
	DisciplineTable = "users"
	// DisciplineInverseTable is the table name for the Discipline entity.
	// It exists in this package in order to avoid circular dependency with the "discipline" package.
	DisciplineInverseTable = "disciplines"
	// DisciplineColumn is the table column denoting the discipline relation/edge.
	DisciplineColumn = "discipline_id"
	// YearTable is the table the holds the year relation/edge.
	YearTable = "users"
	// YearInverseTable is the table name for the Year entity.
	// It exists in this package in order to avoid circular dependency with the "year" package.
	YearInverseTable = "years"
	// YearColumn is the table column denoting the year relation/edge.
	YearColumn = "year_id"
	// ClubTable is the table the holds the club relation/edge.
	ClubTable = "clubs"
	// ClubInverseTable is the table name for the Club entity.
	// It exists in this package in order to avoid circular dependency with the "club" package.
	ClubInverseTable = "clubs"
	// ClubColumn is the table column denoting the club relation/edge.
	ClubColumn = "UserID"
	// ClubapplicationTable is the table the holds the clubapplication relation/edge.
	ClubapplicationTable = "clubapplications"
	// ClubapplicationInverseTable is the table name for the Clubapplication entity.
	// It exists in this package in order to avoid circular dependency with the "clubapplication" package.
	ClubapplicationInverseTable = "clubapplications"
	// ClubapplicationColumn is the table column denoting the clubapplication relation/edge.
	ClubapplicationColumn = "UserID"
	// UserToComplaintTable is the table the holds the UserToComplaint relation/edge.
	UserToComplaintTable = "complaints"
	// UserToComplaintInverseTable is the table name for the Complaint entity.
	// It exists in this package in order to avoid circular dependency with the "complaint" package.
	UserToComplaintInverseTable = "complaints"
	// UserToComplaintColumn is the table column denoting the UserToComplaint relation/edge.
	UserToComplaintColumn = "UserID"
	// RoomuseTable is the table the holds the Roomuse relation/edge.
	RoomuseTable = "roomuses"
	// RoomuseInverseTable is the table name for the Roomuse entity.
	// It exists in this package in order to avoid circular dependency with the "roomuse" package.
	RoomuseInverseTable = "roomuses"
	// RoomuseColumn is the table column denoting the Roomuse relation/edge.
	RoomuseColumn = "UserID"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAge,
	FieldEmail,
	FieldPassword,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the User type.
var ForeignKeys = []string{
	"ClubID",
	"discipline_id",
	"gender_id",
	"userstatus_id",
	"UserTypeID",
	"year_id",
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// AgeValidator is a validator for the "age" field. It is called by the builders before save.
	AgeValidator func(int) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
)
