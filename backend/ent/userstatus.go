// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/OMENX/app/ent/userstatus"
	"github.com/facebookincubator/ent/dialect/sql"
)

// UserStatus is the model entity for the UserStatus schema.
type UserStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Userstatus holds the value of the "userstatus" field.
	Userstatus string `json:"userstatus,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserStatusQuery when eager-loading is set.
	Edges UserStatusEdges `json:"edges"`
}

// UserStatusEdges holds the relations/edges for other nodes in the graph.
type UserStatusEdges struct {
	// Users holds the value of the users edge.
	Users []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e UserStatusEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserStatus) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // userstatus
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserStatus fields.
func (us *UserStatus) assignValues(values ...interface{}) error {
	if m, n := len(values), len(userstatus.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	us.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field userstatus", values[0])
	} else if value.Valid {
		us.Userstatus = value.String
	}
	return nil
}

// QueryUsers queries the users edge of the UserStatus.
func (us *UserStatus) QueryUsers() *UserQuery {
	return (&UserStatusClient{config: us.config}).QueryUsers(us)
}

// Update returns a builder for updating this UserStatus.
// Note that, you need to call UserStatus.Unwrap() before calling this method, if this UserStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserStatus) Update() *UserStatusUpdateOne {
	return (&UserStatusClient{config: us.config}).UpdateOne(us)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (us *UserStatus) Unwrap() *UserStatus {
	tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserStatus is not a transactional entity")
	}
	us.config.driver = tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserStatus) String() string {
	var builder strings.Builder
	builder.WriteString("UserStatus(")
	builder.WriteString(fmt.Sprintf("id=%v", us.ID))
	builder.WriteString(", userstatus=")
	builder.WriteString(us.Userstatus)
	builder.WriteByte(')')
	return builder.String()
}

// UserStatusSlice is a parsable slice of UserStatus.
type UserStatusSlice []*UserStatus

func (us UserStatusSlice) config(cfg config) {
	for _i := range us {
		us[_i].config = cfg
	}
}
