// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/OMENX/app/ent/user"
	"github.com/OMENX/app/ent/userstatus"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserStatusCreate is the builder for creating a UserStatus entity.
type UserStatusCreate struct {
	config
	mutation *UserStatusMutation
	hooks    []Hook
}

// SetUserstatus sets the userstatus field.
func (usc *UserStatusCreate) SetUserstatus(s string) *UserStatusCreate {
	usc.mutation.SetUserstatus(s)
	return usc
}

// AddUserIDs adds the users edge to User by ids.
func (usc *UserStatusCreate) AddUserIDs(ids ...int) *UserStatusCreate {
	usc.mutation.AddUserIDs(ids...)
	return usc
}

// AddUsers adds the users edges to User.
func (usc *UserStatusCreate) AddUsers(u ...*User) *UserStatusCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return usc.AddUserIDs(ids...)
}

// Mutation returns the UserStatusMutation object of the builder.
func (usc *UserStatusCreate) Mutation() *UserStatusMutation {
	return usc.mutation
}

// Save creates the UserStatus in the database.
func (usc *UserStatusCreate) Save(ctx context.Context) (*UserStatus, error) {
	if _, ok := usc.mutation.Userstatus(); !ok {
		return nil, &ValidationError{Name: "userstatus", err: errors.New("ent: missing required field \"userstatus\"")}
	}
	var (
		err  error
		node *UserStatus
	)
	if len(usc.hooks) == 0 {
		node, err = usc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserStatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			usc.mutation = mutation
			node, err = usc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(usc.hooks) - 1; i >= 0; i-- {
			mut = usc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, usc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserStatusCreate) SaveX(ctx context.Context) *UserStatus {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (usc *UserStatusCreate) sqlSave(ctx context.Context) (*UserStatus, error) {
	us, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	us.ID = int(id)
	return us, nil
}

func (usc *UserStatusCreate) createSpec() (*UserStatus, *sqlgraph.CreateSpec) {
	var (
		us    = &UserStatus{config: usc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userstatus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userstatus.FieldID,
			},
		}
	)
	if value, ok := usc.mutation.Userstatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userstatus.FieldUserstatus,
		})
		us.Userstatus = value
	}
	if nodes := usc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userstatus.UsersTable,
			Columns: []string{userstatus.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return us, _spec
}
