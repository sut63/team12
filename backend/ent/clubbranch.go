// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/OMENX/app/ent/clubbranch"
	"github.com/facebookincubator/ent/dialect/sql"
)

// ClubBranch is the model entity for the ClubBranch schema.
type ClubBranch struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClubBranchQuery when eager-loading is set.
	Edges ClubBranchEdges `json:"edges"`
}

// ClubBranchEdges holds the relations/edges for other nodes in the graph.
type ClubBranchEdges struct {
	// Club holds the value of the club edge.
	Club []*Club
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClubOrErr returns the Club value or an error if the edge
// was not loaded in eager-loading.
func (e ClubBranchEdges) ClubOrErr() ([]*Club, error) {
	if e.loadedTypes[0] {
		return e.Club, nil
	}
	return nil, &NotLoadedError{edge: "club"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ClubBranch) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ClubBranch fields.
func (cb *ClubBranch) assignValues(values ...interface{}) error {
	if m, n := len(values), len(clubbranch.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	cb.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		cb.Name = value.String
	}
	return nil
}

// QueryClub queries the club edge of the ClubBranch.
func (cb *ClubBranch) QueryClub() *ClubQuery {
	return (&ClubBranchClient{config: cb.config}).QueryClub(cb)
}

// Update returns a builder for updating this ClubBranch.
// Note that, you need to call ClubBranch.Unwrap() before calling this method, if this ClubBranch
// was returned from a transaction, and the transaction was committed or rolled back.
func (cb *ClubBranch) Update() *ClubBranchUpdateOne {
	return (&ClubBranchClient{config: cb.config}).UpdateOne(cb)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (cb *ClubBranch) Unwrap() *ClubBranch {
	tx, ok := cb.config.driver.(*txDriver)
	if !ok {
		panic("ent: ClubBranch is not a transactional entity")
	}
	cb.config.driver = tx.drv
	return cb
}

// String implements the fmt.Stringer.
func (cb *ClubBranch) String() string {
	var builder strings.Builder
	builder.WriteString("ClubBranch(")
	builder.WriteString(fmt.Sprintf("id=%v", cb.ID))
	builder.WriteString(", name=")
	builder.WriteString(cb.Name)
	builder.WriteByte(')')
	return builder.String()
}

// ClubBranches is a parsable slice of ClubBranch.
type ClubBranches []*ClubBranch

func (cb ClubBranches) config(cfg config) {
	for _i := range cb {
		cb[_i].config = cfg
	}
}
