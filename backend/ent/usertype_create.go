// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/OMENX/app/ent/user"
	"github.com/OMENX/app/ent/usertype"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UsertypeCreate is the builder for creating a Usertype entity.
type UsertypeCreate struct {
	config
	mutation *UsertypeMutation
	hooks    []Hook
}

// SetName sets the name field.
func (uc *UsertypeCreate) SetName(s string) *UsertypeCreate {
	uc.mutation.SetName(s)
	return uc
}

// AddUserIDs adds the user edge to User by ids.
func (uc *UsertypeCreate) AddUserIDs(ids ...int) *UsertypeCreate {
	uc.mutation.AddUserIDs(ids...)
	return uc
}

// AddUser adds the user edges to User.
func (uc *UsertypeCreate) AddUser(u ...*User) *UsertypeCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uc.AddUserIDs(ids...)
}

// Mutation returns the UsertypeMutation object of the builder.
func (uc *UsertypeCreate) Mutation() *UsertypeMutation {
	return uc.mutation
}

// Save creates the Usertype in the database.
func (uc *UsertypeCreate) Save(ctx context.Context) (*Usertype, error) {
	if _, ok := uc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := uc.mutation.Name(); ok {
		if err := usertype.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	var (
		err  error
		node *Usertype
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UsertypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UsertypeCreate) SaveX(ctx context.Context) *Usertype {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UsertypeCreate) sqlSave(ctx context.Context) (*Usertype, error) {
	u, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}

func (uc *UsertypeCreate) createSpec() (*Usertype, *sqlgraph.CreateSpec) {
	var (
		u     = &Usertype{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usertype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usertype.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertype.FieldName,
		})
		u.Name = value
	}
	if nodes := uc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usertype.UserTable,
			Columns: []string{usertype.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return u, _spec
}
