// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/OMENX/app/ent/club"
	"github.com/OMENX/app/ent/complaint"
	"github.com/OMENX/app/ent/complainttype"
	"github.com/OMENX/app/ent/predicate"
	"github.com/OMENX/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ComplaintUpdate is the builder for updating Complaint entities.
type ComplaintUpdate struct {
	config
	hooks      []Hook
	mutation   *ComplaintMutation
	predicates []predicate.Complaint
}

// Where adds a new predicate for the builder.
func (cu *ComplaintUpdate) Where(ps ...predicate.Complaint) *ComplaintUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetInfo sets the info field.
func (cu *ComplaintUpdate) SetInfo(s string) *ComplaintUpdate {
	cu.mutation.SetInfo(s)
	return cu
}

// SetDate sets the date field.
func (cu *ComplaintUpdate) SetDate(t time.Time) *ComplaintUpdate {
	cu.mutation.SetDate(t)
	return cu
}

// SetComplaintToUserID sets the ComplaintToUser edge to User by id.
func (cu *ComplaintUpdate) SetComplaintToUserID(id int) *ComplaintUpdate {
	cu.mutation.SetComplaintToUserID(id)
	return cu
}

// SetNillableComplaintToUserID sets the ComplaintToUser edge to User by id if the given value is not nil.
func (cu *ComplaintUpdate) SetNillableComplaintToUserID(id *int) *ComplaintUpdate {
	if id != nil {
		cu = cu.SetComplaintToUserID(*id)
	}
	return cu
}

// SetComplaintToUser sets the ComplaintToUser edge to User.
func (cu *ComplaintUpdate) SetComplaintToUser(u *User) *ComplaintUpdate {
	return cu.SetComplaintToUserID(u.ID)
}

// SetComplaintToComplaintTypeID sets the ComplaintToComplaintType edge to ComplaintType by id.
func (cu *ComplaintUpdate) SetComplaintToComplaintTypeID(id int) *ComplaintUpdate {
	cu.mutation.SetComplaintToComplaintTypeID(id)
	return cu
}

// SetNillableComplaintToComplaintTypeID sets the ComplaintToComplaintType edge to ComplaintType by id if the given value is not nil.
func (cu *ComplaintUpdate) SetNillableComplaintToComplaintTypeID(id *int) *ComplaintUpdate {
	if id != nil {
		cu = cu.SetComplaintToComplaintTypeID(*id)
	}
	return cu
}

// SetComplaintToComplaintType sets the ComplaintToComplaintType edge to ComplaintType.
func (cu *ComplaintUpdate) SetComplaintToComplaintType(c *ComplaintType) *ComplaintUpdate {
	return cu.SetComplaintToComplaintTypeID(c.ID)
}

// SetComplaintToClubID sets the ComplaintToClub edge to Club by id.
func (cu *ComplaintUpdate) SetComplaintToClubID(id int) *ComplaintUpdate {
	cu.mutation.SetComplaintToClubID(id)
	return cu
}

// SetNillableComplaintToClubID sets the ComplaintToClub edge to Club by id if the given value is not nil.
func (cu *ComplaintUpdate) SetNillableComplaintToClubID(id *int) *ComplaintUpdate {
	if id != nil {
		cu = cu.SetComplaintToClubID(*id)
	}
	return cu
}

// SetComplaintToClub sets the ComplaintToClub edge to Club.
func (cu *ComplaintUpdate) SetComplaintToClub(c *Club) *ComplaintUpdate {
	return cu.SetComplaintToClubID(c.ID)
}

// Mutation returns the ComplaintMutation object of the builder.
func (cu *ComplaintUpdate) Mutation() *ComplaintMutation {
	return cu.mutation
}

// ClearComplaintToUser clears the ComplaintToUser edge to User.
func (cu *ComplaintUpdate) ClearComplaintToUser() *ComplaintUpdate {
	cu.mutation.ClearComplaintToUser()
	return cu
}

// ClearComplaintToComplaintType clears the ComplaintToComplaintType edge to ComplaintType.
func (cu *ComplaintUpdate) ClearComplaintToComplaintType() *ComplaintUpdate {
	cu.mutation.ClearComplaintToComplaintType()
	return cu
}

// ClearComplaintToClub clears the ComplaintToClub edge to Club.
func (cu *ComplaintUpdate) ClearComplaintToClub() *ComplaintUpdate {
	cu.mutation.ClearComplaintToClub()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ComplaintUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComplaintMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ComplaintUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ComplaintUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ComplaintUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ComplaintUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   complaint.Table,
			Columns: complaint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: complaint.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: complaint.FieldInfo,
		})
	}
	if value, ok := cu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: complaint.FieldDate,
		})
	}
	if cu.mutation.ComplaintToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToUserTable,
			Columns: []string{complaint.ComplaintToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ComplaintToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToUserTable,
			Columns: []string{complaint.ComplaintToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ComplaintToComplaintTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToComplaintTypeTable,
			Columns: []string{complaint.ComplaintToComplaintTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: complainttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ComplaintToComplaintTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToComplaintTypeTable,
			Columns: []string{complaint.ComplaintToComplaintTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: complainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ComplaintToClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToClubTable,
			Columns: []string{complaint.ComplaintToClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ComplaintToClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToClubTable,
			Columns: []string{complaint.ComplaintToClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{complaint.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ComplaintUpdateOne is the builder for updating a single Complaint entity.
type ComplaintUpdateOne struct {
	config
	hooks    []Hook
	mutation *ComplaintMutation
}

// SetInfo sets the info field.
func (cuo *ComplaintUpdateOne) SetInfo(s string) *ComplaintUpdateOne {
	cuo.mutation.SetInfo(s)
	return cuo
}

// SetDate sets the date field.
func (cuo *ComplaintUpdateOne) SetDate(t time.Time) *ComplaintUpdateOne {
	cuo.mutation.SetDate(t)
	return cuo
}

// SetComplaintToUserID sets the ComplaintToUser edge to User by id.
func (cuo *ComplaintUpdateOne) SetComplaintToUserID(id int) *ComplaintUpdateOne {
	cuo.mutation.SetComplaintToUserID(id)
	return cuo
}

// SetNillableComplaintToUserID sets the ComplaintToUser edge to User by id if the given value is not nil.
func (cuo *ComplaintUpdateOne) SetNillableComplaintToUserID(id *int) *ComplaintUpdateOne {
	if id != nil {
		cuo = cuo.SetComplaintToUserID(*id)
	}
	return cuo
}

// SetComplaintToUser sets the ComplaintToUser edge to User.
func (cuo *ComplaintUpdateOne) SetComplaintToUser(u *User) *ComplaintUpdateOne {
	return cuo.SetComplaintToUserID(u.ID)
}

// SetComplaintToComplaintTypeID sets the ComplaintToComplaintType edge to ComplaintType by id.
func (cuo *ComplaintUpdateOne) SetComplaintToComplaintTypeID(id int) *ComplaintUpdateOne {
	cuo.mutation.SetComplaintToComplaintTypeID(id)
	return cuo
}

// SetNillableComplaintToComplaintTypeID sets the ComplaintToComplaintType edge to ComplaintType by id if the given value is not nil.
func (cuo *ComplaintUpdateOne) SetNillableComplaintToComplaintTypeID(id *int) *ComplaintUpdateOne {
	if id != nil {
		cuo = cuo.SetComplaintToComplaintTypeID(*id)
	}
	return cuo
}

// SetComplaintToComplaintType sets the ComplaintToComplaintType edge to ComplaintType.
func (cuo *ComplaintUpdateOne) SetComplaintToComplaintType(c *ComplaintType) *ComplaintUpdateOne {
	return cuo.SetComplaintToComplaintTypeID(c.ID)
}

// SetComplaintToClubID sets the ComplaintToClub edge to Club by id.
func (cuo *ComplaintUpdateOne) SetComplaintToClubID(id int) *ComplaintUpdateOne {
	cuo.mutation.SetComplaintToClubID(id)
	return cuo
}

// SetNillableComplaintToClubID sets the ComplaintToClub edge to Club by id if the given value is not nil.
func (cuo *ComplaintUpdateOne) SetNillableComplaintToClubID(id *int) *ComplaintUpdateOne {
	if id != nil {
		cuo = cuo.SetComplaintToClubID(*id)
	}
	return cuo
}

// SetComplaintToClub sets the ComplaintToClub edge to Club.
func (cuo *ComplaintUpdateOne) SetComplaintToClub(c *Club) *ComplaintUpdateOne {
	return cuo.SetComplaintToClubID(c.ID)
}

// Mutation returns the ComplaintMutation object of the builder.
func (cuo *ComplaintUpdateOne) Mutation() *ComplaintMutation {
	return cuo.mutation
}

// ClearComplaintToUser clears the ComplaintToUser edge to User.
func (cuo *ComplaintUpdateOne) ClearComplaintToUser() *ComplaintUpdateOne {
	cuo.mutation.ClearComplaintToUser()
	return cuo
}

// ClearComplaintToComplaintType clears the ComplaintToComplaintType edge to ComplaintType.
func (cuo *ComplaintUpdateOne) ClearComplaintToComplaintType() *ComplaintUpdateOne {
	cuo.mutation.ClearComplaintToComplaintType()
	return cuo
}

// ClearComplaintToClub clears the ComplaintToClub edge to Club.
func (cuo *ComplaintUpdateOne) ClearComplaintToClub() *ComplaintUpdateOne {
	cuo.mutation.ClearComplaintToClub()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *ComplaintUpdateOne) Save(ctx context.Context) (*Complaint, error) {

	var (
		err  error
		node *Complaint
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComplaintMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ComplaintUpdateOne) SaveX(ctx context.Context) *Complaint {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ComplaintUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ComplaintUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ComplaintUpdateOne) sqlSave(ctx context.Context) (c *Complaint, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   complaint.Table,
			Columns: complaint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: complaint.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Complaint.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: complaint.FieldInfo,
		})
	}
	if value, ok := cuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: complaint.FieldDate,
		})
	}
	if cuo.mutation.ComplaintToUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToUserTable,
			Columns: []string{complaint.ComplaintToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ComplaintToUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToUserTable,
			Columns: []string{complaint.ComplaintToUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ComplaintToComplaintTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToComplaintTypeTable,
			Columns: []string{complaint.ComplaintToComplaintTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: complainttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ComplaintToComplaintTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToComplaintTypeTable,
			Columns: []string{complaint.ComplaintToComplaintTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: complainttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ComplaintToClubCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToClubTable,
			Columns: []string{complaint.ComplaintToClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ComplaintToClubIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   complaint.ComplaintToClubTable,
			Columns: []string{complaint.ComplaintToClubColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: club.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Complaint{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{complaint.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
